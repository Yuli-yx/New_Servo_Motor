
New_Servo_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f00  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800a0e0  0800a0e0  0001a0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a50c  0800a50c  00020438  2**0
                  CONTENTS
  4 .ARM          00000008  0800a50c  0800a50c  0001a50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a514  0800a514  00020438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a514  0800a514  0001a514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a518  0800a518  0001a518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000438  20000000  0800a51c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022fc  20000438  0800a954  00020438  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002734  0800a954  00022734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
 12 .debug_line   00048e54  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0004d4c8  00000000  00000000  000692bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009314  00000000  00000000  000b6784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002020  00000000  00000000  000bfa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001085a7  00000000  00000000  000c1ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00006958  00000000  00000000  001ca060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    000320df  00000000  00000000  001d09b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000b3dc  00000000  00000000  00202a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0020de73  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005fdc  00000000  00000000  0020dec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000438 	.word	0x20000438
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a0c8 	.word	0x0800a0c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000043c 	.word	0x2000043c
 800021c:	0800a0c8 	.word	0x0800a0c8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000526:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <LoopForever+0x6>)
  ldr r1, =_edata
 800052a:	490e      	ldr	r1, [pc, #56]	; (8000564 <LoopForever+0xa>)
  ldr r2, =_sidata
 800052c:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <LoopForever+0xe>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000530:	e002      	b.n	8000538 <LoopCopyDataInit>

08000532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000536:	3304      	adds	r3, #4

08000538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800053c:	d3f9      	bcc.n	8000532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053e:	4a0b      	ldr	r2, [pc, #44]	; (800056c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000540:	4c0b      	ldr	r4, [pc, #44]	; (8000570 <LoopForever+0x16>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000544:	e001      	b.n	800054a <LoopFillZerobss>

08000546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000548:	3204      	adds	r2, #4

0800054a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800054c:	d3fb      	bcc.n	8000546 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800054e:	f003 ff45 	bl	80043dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000552:	f009 fd7f 	bl	800a054 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000556:	f000 ffbb 	bl	80014d0 <main>

0800055a <LoopForever>:

LoopForever:
    b LoopForever
 800055a:	e7fe      	b.n	800055a <LoopForever>
  ldr   r0, =_estack
 800055c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	20000438 	.word	0x20000438
  ldr r2, =_sidata
 8000568:	0800a51c 	.word	0x0800a51c
  ldr r2, =_sbss
 800056c:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 8000570:	20002734 	.word	0x20002734

08000574 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <BusFault_Handler>
	...

08000578 <ASPEP_start>:

  return (crc == 0U);
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 800057c:	6940      	ldr	r0, [r0, #20]
 800057e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000580:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000582:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000584:	6d65      	ldr	r5, [r4, #84]	; 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000586:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 800058a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800058e:	6960      	ldr	r0, [r4, #20]
 8000590:	f104 011c 	add.w	r1, r4, #28
 8000594:	462b      	mov	r3, r5
 8000596:	2204      	movs	r2, #4
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800059c:	4718      	bx	r3
 800059e:	bf00      	nop

080005a0 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 80005a0:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
               | (((uint32_t)capabilities->version) << 4U)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80005a2:	780b      	ldrb	r3, [r1, #0]
               | (((uint32_t)capabilities->version) << 4U)
 80005a4:	790a      	ldrb	r2, [r1, #4]
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80005a6:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005aa:	4c1e      	ldr	r4, [pc, #120]	; (8000624 <ASPEP_sendBeacon+0x84>)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80005ac:	01db      	lsls	r3, r3, #7
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005ae:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80005b2:	784a      	ldrb	r2, [r1, #1]
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80005b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80005b8:	78ca      	ldrb	r2, [r1, #3]
 80005ba:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
 80005be:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 80005c8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80005cc:	5ca2      	ldrb	r2, [r4, r2]
 80005ce:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80005d2:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80005d4:	5ca2      	ldrb	r2, [r4, r2]
 80005d6:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 80005da:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80005dc:	5ca2      	ldrb	r2, [r4, r2]
 80005de:	4c12      	ldr	r4, [pc, #72]	; (8000628 <ASPEP_sendBeacon+0x88>)
 80005e0:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80005e4:	5ca2      	ldrb	r2, [r4, r2]
 80005e6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80005ea:	f043 0305 	orr.w	r3, r3, #5
 80005ee:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80005f2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80005f4:	b14b      	cbz	r3, 800060a <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 80005f6:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80005f8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80005fc:	b913      	cbnz	r3, 8000604 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80005fe:	2302      	movs	r3, #2
 8000600:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000608:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800060a:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 800060e:	2303      	movs	r3, #3
 8000610:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000614:	6481      	str	r1, [r0, #72]	; 0x48
 8000616:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000618:	2204      	movs	r2, #4
 800061a:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 800061c:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000620:	6940      	ldr	r0, [r0, #20]
 8000622:	4718      	bx	r3
 8000624:	0800a118 	.word	0x0800a118
 8000628:	0800a108 	.word	0x0800a108

0800062c <ASPEP_sendPing>:
{
 800062c:	b530      	push	{r4, r5, lr}
              | (uint32_t)((uint32_t)cBit << 5U)
 800062e:	ea4f 1c41 	mov.w	ip, r1, lsl #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000632:	f890 e060 	ldrb.w	lr, [r0, #96]	; 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000636:	f890 4063 	ldrb.w	r4, [r0, #99]	; 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800063a:	4d1e      	ldr	r5, [pc, #120]	; (80006b4 <ASPEP_sendPing+0x88>)
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800063c:	ea4c 1c01 	orr.w	ip, ip, r1, lsl #4
              | (uint32_t)((uint32_t)Nbit << 6U)
 8000640:	f00e 0e01 	and.w	lr, lr, #1
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000644:	ea4c 3c02 	orr.w	ip, ip, r2, lsl #12
 8000648:	ea4c 138e 	orr.w	r3, ip, lr, lsl #6
 800064c:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
              | (uint32_t)((uint32_t)ipID << 8U)
 8000650:	f004 040f 	and.w	r4, r4, #15
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000654:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4c17      	ldr	r4, [pc, #92]	; (80006b8 <ASPEP_sendPing+0x8c>)
 800065c:	f042 0206 	orr.w	r2, r2, #6
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000660:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000664:	5ca2      	ldrb	r2, [r4, r2]
 8000666:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 800066a:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800066c:	5ca2      	ldrb	r2, [r4, r2]
 800066e:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000672:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000674:	5ca2      	ldrb	r2, [r4, r2]
 8000676:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 800067a:	5ceb      	ldrb	r3, [r5, r3]
 800067c:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000680:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000682:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000684:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000686:	b13b      	cbz	r3, 8000698 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000688:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 800068a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800068e:	b913      	cbnz	r3, 8000696 <ASPEP_sendPing+0x6a>
          pHandle->ctrlBuffer.state = pending;
 8000690:	2302      	movs	r3, #2
 8000692:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000696:	bd30      	pop	{r4, r5, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000698:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 800069c:	2303      	movs	r3, #3
 800069e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80006a2:	6481      	str	r1, [r0, #72]	; 0x48
 80006a4:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80006a6:	2204      	movs	r2, #4
 80006a8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80006aa:	6940      	ldr	r0, [r0, #20]
}
 80006ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80006b0:	4718      	bx	r3
 80006b2:	bf00      	nop
 80006b4:	0800a108 	.word	0x0800a108
 80006b8:	0800a118 	.word	0x0800a118

080006bc <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 80006bc:	2a0a      	cmp	r2, #10
{
 80006be:	b410      	push	{r4}
 80006c0:	4603      	mov	r3, r0
    if (MCTL_SYNC == syncAsync)
 80006c2:	d00b      	beq.n	80006dc <ASPEP_getBuffer+0x20>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 80006c4:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 80006c8:	2a01      	cmp	r2, #1
 80006ca:	d921      	bls.n	8000710 <ASPEP_getBuffer+0x54>
 80006cc:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80006d0:	2a01      	cmp	r2, #1
 80006d2:	d911      	bls.n	80006f8 <ASPEP_getBuffer+0x3c>
        result = false;
 80006d4:	2000      	movs	r0, #0
}
 80006d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006da:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80006dc:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 80006e0:	2a01      	cmp	r2, #1
 80006e2:	d8f7      	bhi.n	80006d4 <ASPEP_getBuffer+0x18>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006e4:	6a82      	ldr	r2, [r0, #40]	; 0x28
        pHandle->syncBuffer.state = writeLock;
 80006e6:	2401      	movs	r4, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006e8:	3204      	adds	r2, #4
 80006ea:	600a      	str	r2, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80006ec:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 80006f0:	4620      	mov	r0, r4
}
 80006f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006f6:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006f8:	6b82      	ldr	r2, [r0, #56]	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006fa:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006fc:	f103 0438 	add.w	r4, r3, #56	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 8000700:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000704:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000706:	641c      	str	r4, [r3, #64]	; 0x40
}
 8000708:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 800070c:	600a      	str	r2, [r1, #0]
}
 800070e:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000710:	6b02      	ldr	r2, [r0, #48]	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000712:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000714:	f103 0430 	add.w	r4, r3, #48	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000718:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 800071c:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 800071e:	641c      	str	r4, [r3, #64]	; 0x40
}
 8000720:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000724:	600a      	str	r2, [r1, #0]
}
 8000726:	4770      	bx	lr

08000728 <ASPEP_sendPacket>:
{
 8000728:	b570      	push	{r4, r5, r6, lr}
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 800072a:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
 800072e:	2c02      	cmp	r4, #2
 8000730:	d002      	beq.n	8000738 <ASPEP_sendPacket+0x10>
      result = ASPEP_NOT_CONNECTED;
 8000732:	2102      	movs	r1, #2
}
 8000734:	4608      	mov	r0, r1
 8000736:	bd70      	pop	{r4, r5, r6, pc}
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000738:	ea43 1402 	orr.w	r4, r3, r2, lsl #4
      *header = tmpHeader;
 800073c:	f841 4c04 	str.w	r4, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000740:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
 8000744:	2c01      	cmp	r4, #1
 8000746:	d104      	bne.n	8000752 <ASPEP_sendPacket+0x2a>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000748:	f64f 64ca 	movw	r4, #65226	; 0xfeca
 800074c:	528c      	strh	r4, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 800074e:	3202      	adds	r2, #2
 8000750:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000752:	2b0a      	cmp	r3, #10
 8000754:	d103      	bne.n	800075e <ASPEP_sendPacket+0x36>
        if (pSupHandle->MCP_PacketAvailable)
 8000756:	7c04      	ldrb	r4, [r0, #16]
 8000758:	b394      	cbz	r4, 80007c0 <ASPEP_sendPacket+0x98>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from master is processed*/
 800075a:	2400      	movs	r4, #0
 800075c:	7404      	strb	r4, [r0, #16]
  uint32_t header = *headerPtr;
 800075e:	f851 4c04 	ldr.w	r4, [r1, #-4]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000762:	4d35      	ldr	r5, [pc, #212]	; (8000838 <ASPEP_sendPacket+0x110>)
 8000764:	b2e6      	uxtb	r6, r4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000766:	f3c4 2e07 	ubfx	lr, r4, #8, #8
 800076a:	5dae      	ldrb	r6, [r5, r6]
 800076c:	ea8e 0e06 	eor.w	lr, lr, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000770:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000772:	f815 600e 	ldrb.w	r6, [r5, lr]
 8000776:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 800077a:	ea8e 0e06 	eor.w	lr, lr, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 800077e:	f1a1 0c04 	sub.w	ip, r1, #4
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000782:	f815 e00e 	ldrb.w	lr, [r5, lr]
 8000786:	f3c4 6503 	ubfx	r5, r4, #24, #4
 800078a:	ea8e 0e05 	eor.w	lr, lr, r5
 800078e:	4d2b      	ldr	r5, [pc, #172]	; (800083c <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8000790:	f815 500e 	ldrb.w	r5, [r5, lr]
 8000794:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000798:	b292      	uxth	r2, r2
  *headerPtr |= (uint32_t)crc << 28;
 800079a:	f841 4c04 	str.w	r4, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 800079e:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80007a0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80007a2:	b1e1      	cbz	r1, 80007de <ASPEP_sendPacket+0xb6>
  __ASM volatile ("cpsie i" : : : "memory");
 80007a4:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 80007a6:	2b09      	cmp	r3, #9
 80007a8:	d00d      	beq.n	80007c6 <ASPEP_sendPacket+0x9e>
      else if (MCTL_SYNC == dataType)
 80007aa:	2b0a      	cmp	r3, #10
 80007ac:	d02e      	beq.n	800080c <ASPEP_sendPacket+0xe4>
      else if(ASPEP_CTRL == dataType)
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d132      	bne.n	8000818 <ASPEP_sendPacket+0xf0>
        if (pHandle->ctrlBuffer.state != available)
 80007b2:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 80007b6:	bb69      	cbnz	r1, 8000814 <ASPEP_sendPacket+0xec>
          pHandle->ctrlBuffer.state = pending;
 80007b8:	2302      	movs	r3, #2
 80007ba:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80007be:	e7b9      	b.n	8000734 <ASPEP_sendPacket+0xc>
          result = MCTL_SYNC_NOT_EXPECTED;
 80007c0:	2101      	movs	r1, #1
}
 80007c2:	4608      	mov	r0, r1
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 80007c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
        if (NULL == pHandle->asyncNextBuffer)
 80007c8:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 80007ca:	6819      	ldr	r1, [r3, #0]
          result = ASPEP_BUFFER_ERROR;
 80007cc:	458c      	cmp	ip, r1
 80007ce:	bf14      	ite	ne
 80007d0:	2103      	movne	r1, #3
 80007d2:	2100      	moveq	r1, #0
        if (NULL == pHandle->asyncNextBuffer)
 80007d4:	b36c      	cbz	r4, 8000832 <ASPEP_sendPacket+0x10a>
        pHandle->lastRequestedAsyncBuff->state = pending;
 80007d6:	2002      	movs	r0, #2
 80007d8:	7198      	strb	r0, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 80007da:	809a      	strh	r2, [r3, #4]
 80007dc:	e7aa      	b.n	8000734 <ASPEP_sendPacket+0xc>
      if (MCTL_ASYNC == dataType)
 80007de:	2b09      	cmp	r3, #9
 80007e0:	d022      	beq.n	8000828 <ASPEP_sendPacket+0x100>
      else if (MCTL_SYNC == dataType)
 80007e2:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 80007e4:	f04f 0103 	mov.w	r1, #3
        pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 80007e8:	bf0b      	itete	eq
 80007ea:	f100 0328 	addeq.w	r3, r0, #40	; 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007ee:	f100 0320 	addne.w	r3, r0, #32
        pHandle->syncBuffer.state = readLock;
 80007f2:	f880 102e 	strbeq.w	r1, [r0, #46]	; 0x2e
        pHandle->ctrlBuffer.state = readLock;
 80007f6:	f880 1024 	strbne.w	r1, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007fa:	6483      	str	r3, [r0, #72]	; 0x48
 80007fc:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80007fe:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000800:	6940      	ldr	r0, [r0, #20]
 8000802:	4661      	mov	r1, ip
 8000804:	4798      	blx	r3
 8000806:	2100      	movs	r1, #0
}
 8000808:	4608      	mov	r0, r1
 800080a:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle -> syncBuffer.state != writeLock)
 800080c:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8000810:	2b01      	cmp	r3, #1
 8000812:	d003      	beq.n	800081c <ASPEP_sendPacket+0xf4>
          result = ASPEP_BUFFER_ERROR;
 8000814:	2103      	movs	r1, #3
 8000816:	e78d      	b.n	8000734 <ASPEP_sendPacket+0xc>
  uint8_t result = ASPEP_OK;
 8000818:	2100      	movs	r1, #0
 800081a:	e78b      	b.n	8000734 <ASPEP_sendPacket+0xc>
          pHandle->syncBuffer.state = pending;
 800081c:	2302      	movs	r3, #2
 800081e:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8000822:	8582      	strh	r2, [r0, #44]	; 0x2c
  uint8_t result = ASPEP_OK;
 8000824:	2100      	movs	r1, #0
 8000826:	e785      	b.n	8000734 <ASPEP_sendPacket+0xc>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000828:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800082a:	2103      	movs	r1, #3
 800082c:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 800082e:	6483      	str	r3, [r0, #72]	; 0x48
 8000830:	e7e4      	b.n	80007fc <ASPEP_sendPacket+0xd4>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000832:	6443      	str	r3, [r0, #68]	; 0x44
 8000834:	e7cf      	b.n	80007d6 <ASPEP_sendPacket+0xae>
 8000836:	bf00      	nop
 8000838:	0800a118 	.word	0x0800a118
 800083c:	0800a108 	.word	0x0800a108

08000840 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000840:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000842:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000846:	2b03      	cmp	r3, #3
{
 8000848:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 800084a:	d013      	beq.n	8000874 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 800084c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800084e:	2100      	movs	r1, #0
 8000850:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000852:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8000856:	2a02      	cmp	r2, #2
 8000858:	d013      	beq.n	8000882 <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 800085a:	2b02      	cmp	r3, #2
 800085c:	d11d      	bne.n	800089a <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 800085e:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000862:	6d83      	ldr	r3, [r0, #88]	; 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000864:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000866:	2204      	movs	r2, #4
 8000868:	6940      	ldr	r0, [r0, #20]
 800086a:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 800086c:	2303      	movs	r3, #3
 800086e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000872:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000874:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = available;
 8000878:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 800087a:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 800087c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (pHandle->syncBuffer.state == pending)
 8000880:	d10b      	bne.n	800089a <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000882:	f104 0028 	add.w	r0, r4, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000886:	6da3      	ldr	r3, [r4, #88]	; 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000888:	64a0      	str	r0, [r4, #72]	; 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800088a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800088c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800088e:	6960      	ldr	r0, [r4, #20]
 8000890:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000892:	2303      	movs	r3, #3
 8000894:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8000898:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800089a:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 800089c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800089e:	b1cb      	cbz	r3, 80008d4 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 80008a0:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 80008a2:	64a3      	str	r3, [r4, #72]	; 0x48
        pHandle->asyncNextBuffer->state = readLock;
 80008a4:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 80008a6:	6819      	ldr	r1, [r3, #0]
 80008a8:	889a      	ldrh	r2, [r3, #4]
 80008aa:	6960      	ldr	r0, [r4, #20]
 80008ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80008ae:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 80008b0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d007      	beq.n	80008c8 <ASPEP_HWDataTransmittedIT+0x88>
 80008b8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d003      	beq.n	80008c8 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 80008c4:	b662      	cpsie	i
}
 80008c6:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 80008c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80008ca:	0063      	lsls	r3, r4, #1
 80008cc:	3368      	adds	r3, #104	; 0x68
 80008ce:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 80008d0:	6463      	str	r3, [r4, #68]	; 0x44
        {
 80008d2:	e7f7      	b.n	80008c4 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 80008d4:	64a3      	str	r3, [r4, #72]	; 0x48
 80008d6:	e7f5      	b.n	80008c4 <ASPEP_HWDataTransmittedIT+0x84>

080008d8 <ASPEP_RXframeProcess>:

uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 80008d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
    bool validCRCData = true;

    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 80008dc:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 80008e0:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 80008e2:	2500      	movs	r5, #0
{
 80008e4:	4604      	mov	r4, r0
    *packetLength = 0;
 80008e6:	800d      	strh	r5, [r1, #0]
    if (pHandle->NewPacketAvailable)
 80008e8:	b193      	cbz	r3, 8000910 <ASPEP_RXframeProcess+0x38>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80008ea:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80008ee:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
      switch (pHandle->ASPEP_State)
 80008f2:	2e01      	cmp	r6, #1
 80008f4:	d054      	beq.n	80009a0 <ASPEP_RXframeProcess+0xc8>
 80008f6:	2e02      	cmp	r6, #2
 80008f8:	d03e      	beq.n	8000978 <ASPEP_RXframeProcess+0xa0>
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d033      	beq.n	8000966 <ASPEP_RXframeProcess+0x8e>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80008fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000900:	6960      	ldr	r0, [r4, #20]
 8000902:	2204      	movs	r2, #4
 8000904:	f104 011c 	add.w	r1, r4, #28
 8000908:	4798      	blx	r3
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
}
 800090a:	4628      	mov	r0, r5
 800090c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000910:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 8000914:	2d00      	cmp	r5, #0
 8000916:	d0f8      	beq.n	800090a <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000918:	042b      	lsls	r3, r5, #16
 800091a:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800091e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8000922:	4995      	ldr	r1, [pc, #596]	; (8000b78 <ASPEP_RXframeProcess+0x2a0>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000924:	4895      	ldr	r0, [pc, #596]	; (8000b7c <ASPEP_RXframeProcess+0x2a4>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000926:	f083 0309 	eor.w	r3, r3, #9
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800092a:	5cca      	ldrb	r2, [r1, r3]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 800092c:	f045 030f 	orr.w	r3, r5, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000930:	ea82 4515 	eor.w	r5, r2, r5, lsr #16
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000934:	5d4a      	ldrb	r2, [r1, r5]
  *headerPtr |= (uint32_t)crc << 28;
 8000936:	5c82      	ldrb	r2, [r0, r2]
 8000938:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800093c:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800093e:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000940:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000942:	2b00      	cmp	r3, #0
 8000944:	d03a      	beq.n	80009bc <ASPEP_RXframeProcess+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 8000946:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000948:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800094c:	b913      	cbnz	r3, 8000954 <ASPEP_RXframeProcess+0x7c>
          pHandle->ctrlBuffer.state = pending;
 800094e:	2302      	movs	r3, #2
 8000950:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8000954:	2500      	movs	r5, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000956:	6960      	ldr	r0, [r4, #20]
 8000958:	6d23      	ldr	r3, [r4, #80]	; 0x50
      pHandle->badPacketFlag = ASPEP_OK;
 800095a:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 800095e:	4798      	blx	r3
}
 8000960:	4628      	mov	r0, r5
 8000962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (BEACON == pHandle->rxPacketType)
 8000966:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8000968:	2b05      	cmp	r3, #5
 800096a:	f000 8095 	beq.w	8000a98 <ASPEP_RXframeProcess+0x1c0>
          else if (PING == pHandle->rxPacketType)
 800096e:	2b06      	cmp	r3, #6
 8000970:	f000 80d7 	beq.w	8000b22 <ASPEP_RXframeProcess+0x24a>
  uint8_t *result = NULL;
 8000974:	4635      	mov	r5, r6
 8000976:	e7c2      	b.n	80008fe <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000978:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800097a:	2b05      	cmp	r3, #5
 800097c:	d05f      	beq.n	8000a3e <ASPEP_RXframeProcess+0x166>
          else if (PING == pHandle->rxPacketType)
 800097e:	2b06      	cmp	r3, #6
 8000980:	f000 80d6 	beq.w	8000b30 <ASPEP_RXframeProcess+0x258>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000984:	2b09      	cmp	r3, #9
 8000986:	d1ba      	bne.n	80008fe <ASPEP_RXframeProcess+0x26>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000988:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
              *packetLength = pHandle->rxLength;
 800098c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
              result = pHandle->rxBuffer;
 8000990:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000992:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000994:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000996:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 800099a:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 800099c:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 800099e:	e7ae      	b.n	80008fe <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 80009a0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80009a2:	2b05      	cmp	r3, #5
 80009a4:	d016      	beq.n	80009d4 <ASPEP_RXframeProcess+0xfc>
          else if (PING == pHandle->rxPacketType)
 80009a6:	2b06      	cmp	r3, #6
 80009a8:	d1a9      	bne.n	80008fe <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 80009aa:	f3c2 320f 	ubfx	r2, r2, #12, #16
 80009ae:	4631      	mov	r1, r6
 80009b0:	f7ff fe3c 	bl	800062c <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 80009b4:	2302      	movs	r3, #2
 80009b6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 80009ba:	e7a0      	b.n	80008fe <ASPEP_RXframeProcess+0x26>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80009bc:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 80009c0:	2303      	movs	r3, #3
 80009c2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80009c6:	64a1      	str	r1, [r4, #72]	; 0x48
 80009c8:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80009ca:	2204      	movs	r2, #4
 80009cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80009ce:	6960      	ldr	r0, [r4, #20]
 80009d0:	4798      	blx	r3
  return (result);
 80009d2:	e7bf      	b.n	8000954 <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80009d4:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80009d6:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009d8:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009dc:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009e0:	f894 606e 	ldrb.w	r6, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009e4:	f894 706f 	ldrb.w	r7, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80009e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80009ec:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009ee:	4281      	cmp	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80009f0:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009f4:	bf28      	it	cs
 80009f6:	4601      	movcs	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009f8:	42ab      	cmp	r3, r5
 80009fa:	4698      	mov	r8, r3
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 80009fc:	f3c2 5e46 	ubfx	lr, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a00:	bf28      	it	cs
 8000a02:	46a8      	movcs	r8, r5
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a04:	45b4      	cmp	ip, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a06:	f884 806c 	strb.w	r8, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a0a:	46e0      	mov	r8, ip
 8000a0c:	bf28      	it	cs
 8000a0e:	46b0      	movcs	r8, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a10:	45be      	cmp	lr, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a12:	f884 806e 	strb.w	r8, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a16:	46f0      	mov	r8, lr
 8000a18:	bf28      	it	cs
 8000a1a:	46b8      	movcs	r8, r7
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a1c:	42ab      	cmp	r3, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a1e:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a22:	f884 806f 	strb.w	r8, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a26:	f240 8088 	bls.w	8000b3a <ASPEP_RXframeProcess+0x262>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8000a30:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8000a34:	4620      	mov	r0, r4
 8000a36:	f7ff fdb3 	bl	80005a0 <ASPEP_sendBeacon>
  uint8_t *result = NULL;
 8000a3a:	2500      	movs	r5, #0
 8000a3c:	e75f      	b.n	80008fe <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a3e:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a40:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a42:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a46:	f894 606c 	ldrb.w	r6, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a4a:	f894 c06e 	ldrb.w	ip, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a4e:	f894 706f 	ldrb.w	r7, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a52:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a56:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a58:	4281      	cmp	r1, r0
 8000a5a:	bf28      	it	cs
 8000a5c:	4601      	movcs	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000a5e:	f3c2 3e86 	ubfx	lr, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a62:	42b3      	cmp	r3, r6
 8000a64:	4699      	mov	r9, r3
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000a66:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a6a:	bf28      	it	cs
 8000a6c:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a6e:	45e6      	cmp	lr, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a70:	f884 906c 	strb.w	r9, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a74:	46f1      	mov	r9, lr
 8000a76:	bf28      	it	cs
 8000a78:	46e1      	movcs	r9, ip
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a7a:	45b8      	cmp	r8, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a7c:	f884 906e 	strb.w	r9, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a80:	46c1      	mov	r9, r8
 8000a82:	bf28      	it	cs
 8000a84:	46b9      	movcs	r9, r7
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a86:	42b3      	cmp	r3, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a88:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a8c:	f884 906f 	strb.w	r9, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a90:	d964      	bls.n	8000b5c <ASPEP_RXframeProcess+0x284>
 8000a92:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8000a96:	e7cb      	b.n	8000a30 <ASPEP_RXframeProcess+0x158>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a98:	7f65      	ldrb	r5, [r4, #29]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a9a:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a9c:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aa0:	f894 c06c 	ldrb.w	ip, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000aa4:	f894 e06e 	ldrb.w	lr, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000aa8:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000aac:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000ab0:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ab2:	42ab      	cmp	r3, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000ab4:	f3c2 3786 	ubfx	r7, r2, #14, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ab8:	bf28      	it	cs
 8000aba:	462b      	movcs	r3, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000abc:	4560      	cmp	r0, ip
 8000abe:	4601      	mov	r1, r0
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000ac0:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000ac4:	bf28      	it	cs
 8000ac6:	4661      	movcs	r1, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ac8:	4577      	cmp	r7, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000aca:	f884 106c 	strb.w	r1, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ace:	4639      	mov	r1, r7
 8000ad0:	bf28      	it	cs
 8000ad2:	4671      	movcs	r1, lr
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ad4:	45c1      	cmp	r9, r8
 8000ad6:	464e      	mov	r6, r9
 8000ad8:	bf28      	it	cs
 8000ada:	4646      	movcs	r6, r8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000adc:	4560      	cmp	r0, ip
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ade:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ae2:	f884 106e 	strb.w	r1, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ae6:	f884 606f 	strb.w	r6, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000aea:	d8a1      	bhi.n	8000a30 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000aec:	429d      	cmp	r5, r3
 8000aee:	d89f      	bhi.n	8000a30 <ASPEP_RXframeProcess+0x158>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000af0:	4577      	cmp	r7, lr
 8000af2:	d89d      	bhi.n	8000a30 <ASPEP_RXframeProcess+0x158>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000af4:	45c1      	cmp	r9, r8
 8000af6:	d89b      	bhi.n	8000a30 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000af8:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
 8000afc:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000b00:	4290      	cmp	r0, r2
 8000b02:	d195      	bne.n	8000a30 <ASPEP_RXframeProcess+0x158>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b04:	1c4a      	adds	r2, r1, #1
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b06:	3301      	adds	r3, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b08:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b0a:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b0c:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b0e:	01b6      	lsls	r6, r6, #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b10:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b12:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b14:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000b16:	81e6      	strh	r6, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000b18:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000b1c:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8000b20:	e786      	b.n	8000a30 <ASPEP_RXframeProcess+0x158>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000b22:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000b26:	4631      	mov	r1, r6
 8000b28:	f7ff fd80 	bl	800062c <ASPEP_sendPing>
  uint8_t *result = NULL;
 8000b2c:	4635      	mov	r5, r6
 8000b2e:	e6e6      	b.n	80008fe <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000b30:	7f42      	ldrb	r2, [r0, #29]
 8000b32:	2101      	movs	r1, #1
 8000b34:	f7ff fd7a 	bl	800062c <ASPEP_sendPing>
 8000b38:	e6e1      	b.n	80008fe <ASPEP_RXframeProcess+0x26>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b3a:	4288      	cmp	r0, r1
 8000b3c:	f63f af75 	bhi.w	8000a2a <ASPEP_RXframeProcess+0x152>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b40:	45b4      	cmp	ip, r6
 8000b42:	f63f af72 	bhi.w	8000a2a <ASPEP_RXframeProcess+0x152>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b46:	45be      	cmp	lr, r7
 8000b48:	f63f af6f 	bhi.w	8000a2a <ASPEP_RXframeProcess+0x152>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b4c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8000b50:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000b54:	4293      	cmp	r3, r2
 8000b56:	f47f af68 	bne.w	8000a2a <ASPEP_RXframeProcess+0x152>
 8000b5a:	e769      	b.n	8000a30 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b5c:	4288      	cmp	r0, r1
 8000b5e:	d898      	bhi.n	8000a92 <ASPEP_RXframeProcess+0x1ba>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b60:	45e6      	cmp	lr, ip
 8000b62:	d896      	bhi.n	8000a92 <ASPEP_RXframeProcess+0x1ba>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b64:	45b8      	cmp	r8, r7
 8000b66:	d894      	bhi.n	8000a92 <ASPEP_RXframeProcess+0x1ba>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b68:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 8000b6c:	f3c2 1202 	ubfx	r2, r2, #4, #3
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000b70:	1aab      	subs	r3, r5, r2
 8000b72:	425d      	negs	r5, r3
 8000b74:	415d      	adcs	r5, r3
 8000b76:	e78c      	b.n	8000a92 <ASPEP_RXframeProcess+0x1ba>
 8000b78:	0800a118 	.word	0x0800a118
 8000b7c:	0800a108 	.word	0x0800a108

08000b80 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000b80:	b510      	push	{r4, lr}
    /* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.
      * This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_
      * RXframeProcess
      * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be
      * configured after.*/
    switch (pHandle->ASPEP_TL_State)
 8000b82:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 8000b86:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000b88:	b13b      	cbz	r3, 8000b9a <ASPEP_HWDataReceivedIT+0x1a>
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d104      	bne.n	8000b98 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000b94:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
        break;
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000b98:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b9a:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000b9c:	4a1e      	ldr	r2, [pc, #120]	; (8000c18 <ASPEP_HWDataReceivedIT+0x98>)
 8000b9e:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000ba0:	5cd3      	ldrb	r3, [r2, r3]
 8000ba2:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000ba6:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000ba8:	5cd3      	ldrb	r3, [r2, r3]
 8000baa:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000bae:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000bb0:	5cd3      	ldrb	r3, [r2, r3]
 8000bb2:	ea83 6111 	eor.w	r1, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000bb6:	5c53      	ldrb	r3, [r2, r1]
 8000bb8:	b95b      	cbnz	r3, 8000bd2 <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000bba:	7f03      	ldrb	r3, [r0, #28]
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	6683      	str	r3, [r0, #104]	; 0x68
          switch (pHandle->rxPacketType)
 8000bc4:	d809      	bhi.n	8000bda <ASPEP_HWDataReceivedIT+0x5a>
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d81e      	bhi.n	8000c08 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8000bd0:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000bd2:	2304      	movs	r3, #4
 8000bd4:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000bd8:	bd10      	pop	{r4, pc}
 8000bda:	2b09      	cmp	r3, #9
 8000bdc:	d1f5      	bne.n	8000bca <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000bde:	8b83      	ldrh	r3, [r0, #28]
 8000be0:	091b      	lsrs	r3, r3, #4
 8000be2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000be6:	b17b      	cbz	r3, 8000c08 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000be8:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d30f      	bcc.n	8000c10 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000bf0:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 8000bf4:	6981      	ldr	r1, [r0, #24]
 8000bf6:	6940      	ldr	r0, [r0, #20]
 8000bf8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000bfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bfe:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000c00:	2301      	movs	r3, #1
 8000c02:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8000c06:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8000c0e:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000c10:	2302      	movs	r3, #2
 8000c12:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000c16:	bd10      	pop	{r4, pc}
 8000c18:	0800a118 	.word	0x0800a118

08000c1c <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000c1c:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000c24:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000c26:	6940      	ldr	r0, [r0, #20]
 8000c28:	2204      	movs	r2, #4
 8000c2a:	311c      	adds	r1, #28
 8000c2c:	4718      	bx	r3
 8000c2e:	bf00      	nop

08000c30 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init(HALL_Handle_t *pHandle)
{
 8000c30:	b570      	push	{r4, r5, r6, lr}
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;

    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000c32:	f8b0 c016 	ldrh.w	ip, [r0, #22]
 8000c36:	7843      	ldrb	r3, [r0, #1]
    reliable speed */
    hMinReliableElSpeedUnit /= 4U;

    /* Adjustment factor: maximum measurable speed is x time greater than the
    maximum reliable speed */
    hMaxReliableElSpeedUnit *= 2U;
 8000c38:	8a84      	ldrh	r4, [r0, #20]

    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000c3a:	6a82      	ldr	r2, [r0, #40]	; 0x28
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000c3c:	fb1c fc03 	smulbb	ip, ip, r3
    hMaxReliableElSpeedUnit *= 2U;
 8000c40:	fb14 f403 	smulbb	r4, r4, r3
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8000c44:	fa1f fc8c 	uxth.w	ip, ip
    hMaxReliableElSpeedUnit *= 2U;
 8000c48:	0064      	lsls	r4, r4, #1
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000c4a:	0c11      	lsrs	r1, r2, #16

    /* SW Init */
    if (0U == hMinReliableElSpeedUnit)
 8000c4c:	f1bc 0f03 	cmp.w	ip, #3
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8000c50:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    pHandle->OvfFreq = (uint16_t)(pHandle->TIMClockFreq / 65536U);
 8000c52:	f8a0 10c2 	strh.w	r1, [r0, #194]	; 0xc2
    hMaxReliableElSpeedUnit *= 2U;
 8000c56:	b2a4      	uxth	r4, r4
    if (0U == hMinReliableElSpeedUnit)
 8000c58:	d96e      	bls.n	8000d38 <HALL_Init+0x108>
    else
    {
      /* Set accordingly the min reliable speed */
      /* 1000 comes from mS
      * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
      pHandle->HallTimeout = (1000U * (uint16_t)SPEED_UNIT) / (6U * hMinReliableElSpeedUnit);
 8000c5a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8000c5e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8000c62:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8000c66:	f242 7e10 	movw	lr, #10000	; 0x2710
 8000c6a:	fbbe fcfc 	udiv	ip, lr, ip
 8000c6e:	fa1f f58c 	uxth.w	r5, ip
 8000c72:	f8a0 50c0 	strh.w	r5, [r0, #192]	; 0xc0
    }

    /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8000c76:	4d32      	ldr	r5, [pc, #200]	; (8000d40 <HALL_Init+0x110>)

    /* Align MaxPeriod to a multiple of Overflow.*/
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;

    pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8000c78:	f8a0 40b0 	strh.w	r4, [r0, #176]	; 0xb0
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8000c7c:	fb0c f101 	mul.w	r1, ip, r1
 8000c80:	fba5 5101 	umull	r5, r1, r5, r1

    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000c84:	4d2f      	ldr	r5, [pc, #188]	; (8000d44 <HALL_Init+0x114>)
 8000c86:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8000c8a:	fba5 5202 	umull	r5, r2, r5, r2
                              * pHandle->_Super.DPPConvFactor;
 8000c8e:	69c5      	ldr	r5, [r0, #28]
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8000c90:	0989      	lsrs	r1, r1, #6
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000c92:	0892      	lsrs	r2, r2, #2
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;
 8000c94:	040e      	lsls	r6, r1, #16
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000c96:	fbb2 fefc 	udiv	lr, r2, ip

    if (0U == hMaxReliableElSpeedUnit)
    {
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 8000c9a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                              * pHandle->_Super.DPPConvFactor;
 8000c9e:	fb05 f50e 	mul.w	r5, r5, lr
    pHandle->HALLMaxRatio = (pHandle->HallTimeout * pHandle->OvfFreq) / 1000U ;
 8000ca2:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    pHandle->MaxPeriod = pHandle->HALLMaxRatio * 65536UL;
 8000ca6:	f8c0 60b8 	str.w	r6, [r0, #184]	; 0xb8
    pHandle->PseudoFreqConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 8000caa:	b289      	uxth	r1, r1
 8000cac:	f8c0 50b4 	str.w	r5, [r0, #180]	; 0xb4
      pHandle->MinPeriod = ((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL));
 8000cb0:	0052      	lsls	r2, r2, #1
    if (0U == hMaxReliableElSpeedUnit)
 8000cb2:	b10c      	cbz	r4, 8000cb8 <HALL_Init+0x88>
    }
    else
    {
      pHandle->MinPeriod = (((uint32_t)SPEED_UNIT * (pHandle->TIMClockFreq / 6UL)) / hMaxReliableElSpeedUnit);
 8000cb4:	fbb2 f2f4 	udiv	r2, r2, r4
 8000cb8:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
    }

    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8000cbc:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8000cc0:	8c84      	ldrh	r4, [r0, #36]	; 0x24
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8000cc2:	fb0c f202 	mul.w	r2, ip, r2
 8000cc6:	fbb2 f2f4 	udiv	r2, r2, r4
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8000cca:	699c      	ldr	r4, [r3, #24]
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 8000ccc:	3a01      	subs	r2, #1
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8000cce:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4

    /* Reset speed reliability */
    pHandle->SensorIsReliable = true;

    /* Set IC filter for Channel 1 (ICF1) */
    LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, (uint32_t)(pHandle->ICx_Filter) << 20U);
 8000cd2:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
 8000cd6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
    pHandle->SensorIsReliable = true;
 8000cda:	2501      	movs	r5, #1
 8000cdc:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
 8000ce0:	f880 5049 	strb.w	r5, [r0, #73]	; 0x49
 8000ce4:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000ce6:	6299      	str	r1, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000ce8:	695a      	ldr	r2, [r3, #20]
    */
    LL_TIM_SetPrescaler(TIMx, pHandle->HALLMaxRatio);
    LL_TIM_GenerateEvent_UPDATE(TIMx);

    /* Clear the TIMx's pending flags */
    WRITE_REG(TIMx->SR, 0);
 8000cea:	2100      	movs	r1, #0
 8000cec:	432a      	orrs	r2, r5
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	f042 0204 	orr.w	r2, r2, #4
 8000cf8:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000cfa:	68da      	ldr	r2, [r3, #12]
 8000cfc:	f042 0202 	orr.w	r2, r2, #2
 8000d00:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	432a      	orrs	r2, r5
 8000d06:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8000d08:	6259      	str	r1, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8000d0a:	6a1a      	ldr	r2, [r3, #32]
 8000d0c:	432a      	orrs	r2, r5
 8000d0e:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	432a      	orrs	r2, r5
 8000d14:	601a      	str	r2, [r3, #0]

    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH1);
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bSpeedBufferSize = pHandle->SpeedBufferSize;
 8000d16:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26

    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8000d1a:	b163      	cbz	r3, 8000d36 <HALL_Init+0x106>
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	b2d9      	uxtb	r1, r3
 8000d20:	f100 0350 	add.w	r3, r0, #80	; 0x50
    {
      pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 8000d24:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8000d28:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000d2c:	304c      	adds	r0, #76	; 0x4c
 8000d2e:	f840 2f04 	str.w	r2, [r0, #4]!
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8000d32:	4298      	cmp	r0, r3
 8000d34:	d1fb      	bne.n	8000d2e <HALL_Init+0xfe>
    }
#ifdef NULL_PTR_CHECK_HALL_SPD_POS_FDB
  }
#endif
}
 8000d36:	bd70      	pop	{r4, r5, r6, pc}
 8000d38:	f04f 0c96 	mov.w	ip, #150	; 0x96
      pHandle->HallTimeout = 150U;
 8000d3c:	4665      	mov	r5, ip
 8000d3e:	e798      	b.n	8000c72 <HALL_Init+0x42>
 8000d40:	10624dd3 	.word	0x10624dd3
 8000d44:	aaaaaaab 	.word	0xaaaaaaab

08000d48 <HALL_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8000d48:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000d4a:	68d1      	ldr	r1, [r2, #12]
 8000d4c:	f021 0102 	bic.w	r1, r1, #2

    /* Mask interrupts to insure a clean intialization */
    LL_TIM_DisableIT_CC1(TIMx);

    pHandle->RatioDec = false;
 8000d50:	2300      	movs	r3, #0
{
 8000d52:	b430      	push	{r4, r5}

    /* Clear speed error counter */
    pHandle->_Super.bSpeedErrorNumber = 0;

    /* Re-initialize partly the timer */
    LL_TIM_SetPrescaler(TIMx, pHandle->HALLMaxRatio);
 8000d54:	f8b0 40ae 	ldrh.w	r4, [r0, #174]	; 0xae
 8000d58:	60d1      	str	r1, [r2, #12]
    pHandle->SensorIsReliable = true;
 8000d5a:	2101      	movs	r1, #1
    pHandle->RatioDec = false;
 8000d5c:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
    pHandle->Direction = POSITIVE;
 8000d60:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
    pHandle->RatioInc = false;
 8000d64:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
    pHandle->SpeedFIFOIdx = 0U;
 8000d68:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    pHandle->FirstCapt = 0U;
 8000d6c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    pHandle->_Super.bSpeedErrorNumber = 0;
 8000d70:	7003      	strb	r3, [r0, #0]
    pHandle->BufferFilled = 0U;
 8000d72:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    pHandle->_Super.hMecAccelUnitP = 0;
 8000d76:	8243      	strh	r3, [r0, #18]
    pHandle->OVFCounter = 0U;
 8000d78:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
    pHandle->CompSpeed = 0;
 8000d7c:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
    pHandle->SensorIsReliable = true;
 8000d80:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
  WRITE_REG(TIMx->PSC, Prescaler);
 8000d84:	6294      	str	r4, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 8000d86:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000d88:	6813      	ldr	r3, [r2, #0]
 8000d8a:	430b      	orrs	r3, r1
 8000d8c:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8000d8e:	68d3      	ldr	r3, [r2, #12]
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	60d3      	str	r3, [r2, #12]
    /* Nothing to do */
  }
  else
  {
#endif
    if (DEGREES_120 == pHandle->SensorPlacement)
 8000d96:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000d9a:	bb0b      	cbnz	r3, 8000de0 <HALL_Clear+0x98>
    {
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000d9c:	6c02      	ldr	r2, [r0, #64]	; 0x40
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000d9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000da0:	6911      	ldr	r1, [r2, #16]
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000da2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000da4:	691d      	ldr	r5, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000da6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000da8:	438a      	bics	r2, r1
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000daa:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 8000dae:	bf0c      	ite	eq
 8000db0:	2401      	moveq	r4, #1
 8000db2:	2400      	movne	r4, #0
 8000db4:	43ab      	bics	r3, r5
 8000db6:	6909      	ldr	r1, [r1, #16]
 8000db8:	bf0c      	ite	eq
 8000dba:	2301      	moveq	r3, #1
 8000dbc:	2300      	movne	r3, #0
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8000dc4:	438a      	bics	r2, r1
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000dc6:	bf08      	it	eq
 8000dc8:	f043 0301 	orreq.w	r3, r3, #1
 8000dcc:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
    }

    switch (pHandle->HallState)
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	2b05      	cmp	r3, #5
 8000dd4:	d85e      	bhi.n	8000e94 <HALL_Clear+0x14c>
 8000dd6:	e8df f003 	tbb	[pc, r3]
 8000dda:	352b      	.short	0x352b
 8000ddc:	2153493f 	.word	0x2153493f
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8000de0:	6b82      	ldr	r2, [r0, #56]	; 0x38
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8000de2:	6c01      	ldr	r1, [r0, #64]	; 0x40
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000de4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000de6:	6914      	ldr	r4, [r2, #16]
 8000de8:	6909      	ldr	r1, [r1, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8000dea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000dec:	691d      	ldr	r5, [r3, #16]
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000dee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000df0:	438a      	bics	r2, r1
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8000df2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000df4:	bf0c      	ite	eq
 8000df6:	2101      	moveq	r1, #1
 8000df8:	2100      	movne	r1, #0
 8000dfa:	43ab      	bics	r3, r5
 8000dfc:	bf0c      	ite	eq
 8000dfe:	2301      	moveq	r3, #1
 8000e00:	2300      	movne	r3, #0
 8000e02:	43a2      	bics	r2, r4
 8000e04:	bf0c      	ite	eq
 8000e06:	2201      	moveq	r2, #1
 8000e08:	2200      	movne	r2, #0
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8000e10:	f082 0204 	eor.w	r2, r2, #4
 8000e14:	4313      	orrs	r3, r2
 8000e16:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8000e1a:	e7d9      	b.n	8000dd0 <HALL_Clear+0x88>
        break;
      }

      case STATE_6:
      {
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8000e1c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000e1e:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8000e22:	3b3f      	subs	r3, #63	; 0x3f
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	8083      	strh	r3, [r0, #4]
}
 8000e28:	bc30      	pop	{r4, r5}
        break;
      }
    }

    /* Initialize the measured angle */
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000e2a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8000e2e:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8000e30:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000e32:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000e36:	333f      	adds	r3, #63	; 0x3f
 8000e38:	b21b      	sxth	r3, r3
}
 8000e3a:	bc30      	pop	{r4, r5}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8000e3c:	8083      	strh	r3, [r0, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000e3e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8000e42:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8000e44:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000e46:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 8000e4a:	3b2a      	subs	r3, #42	; 0x2a
 8000e4c:	b21b      	sxth	r3, r3
}
 8000e4e:	bc30      	pop	{r4, r5}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8000e50:	8083      	strh	r3, [r0, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000e52:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8000e56:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8000e58:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000e5a:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8000e5e:	332a      	adds	r3, #42	; 0x2a
 8000e60:	b21b      	sxth	r3, r3
}
 8000e62:	bc30      	pop	{r4, r5}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8000e64:	8083      	strh	r3, [r0, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000e66:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8000e6a:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 8000e6c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000e6e:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8000e72:	3b15      	subs	r3, #21
 8000e74:	b21b      	sxth	r3, r3
}
 8000e76:	bc30      	pop	{r4, r5}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 8000e78:	8083      	strh	r3, [r0, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000e7a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8000e7e:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 8000e80:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8000e82:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8000e86:	3315      	adds	r3, #21
 8000e88:	b21b      	sxth	r3, r3
}
 8000e8a:	bc30      	pop	{r4, r5}
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 8000e8c:	8083      	strh	r3, [r0, #4]
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000e8e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8000e92:	4770      	bx	lr
        pHandle->SensorIsReliable = false;
 8000e94:	2200      	movs	r2, #0
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8000e96:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
        pHandle->SensorIsReliable = false;
 8000e9a:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
        break;
 8000e9e:	e7c3      	b.n	8000e28 <HALL_Clear+0xe0>

08000ea0 <HALL_CalcElAngle>:
    if (pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8000ea0:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8000ea4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000ea8:	429a      	cmp	r2, r3
      pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8000eaa:	8883      	ldrh	r3, [r0, #4]
    if (pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8000eac:	d00f      	beq.n	8000ece <HALL_CalcElAngle+0x2e>
      pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8000eae:	f8b0 c0aa 	ldrh.w	ip, [r0, #170]	; 0xaa
      pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8000eb2:	f8a0 20a0 	strh.w	r2, [r0, #160]	; 0xa0
      pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8000eb6:	b291      	uxth	r1, r2
      pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8000eb8:	440b      	add	r3, r1
      pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8000eba:	4461      	add	r1, ip
      pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8000ebc:	f8b0 c0ac 	ldrh.w	ip, [r0, #172]	; 0xac
      pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8000ec0:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
      pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8000ec4:	4463      	add	r3, ip
 8000ec6:	b21b      	sxth	r3, r3
      pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8000ec8:	8083      	strh	r3, [r0, #4]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	4770      	bx	lr
      pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8000ece:	f8b0 20a0 	ldrh.w	r2, [r0, #160]	; 0xa0
 8000ed2:	4413      	add	r3, r2
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	8083      	strh	r3, [r0, #4]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	4770      	bx	lr

08000edc <HALL_CalcAvrgMecSpeedUnit>:
{
 8000edc:	b538      	push	{r3, r4, r5, lr}
 8000ede:	4604      	mov	r4, r0
    if (pHandle->SensorIsReliable)
 8000ee0:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
{
 8000ee4:	460d      	mov	r5, r1
    if (pHandle->SensorIsReliable)
 8000ee6:	b180      	cbz	r0, 8000f0a <HALL_CalcAvrgMecSpeedUnit+0x2e>
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8000ee8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      if (LL_TIM_GetPrescaler(TIMx) >= pHandle->HALLMaxRatio)
 8000eea:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
  return (uint32_t)(READ_REG(TIMx->PSC));
 8000eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d811      	bhi.n	8000f18 <HALL_CalcAvrgMecSpeedUnit+0x3c>
        pHandle->_Super.hElSpeedDpp = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	81e3      	strh	r3, [r4, #14]
        *hMecSpeedUnit = 0;
 8000ef8:	800b      	strh	r3, [r1, #0]
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8000efa:	4629      	mov	r1, r5
 8000efc:	4620      	mov	r0, r4
 8000efe:	f008 ffb1 	bl	8009e64 <SPD_IsMecSpeedReliable>
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8000f02:	f9b5 3000 	ldrsh.w	r3, [r5]
 8000f06:	81a3      	strh	r3, [r4, #12]
}
 8000f08:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8000f0a:	78e3      	ldrb	r3, [r4, #3]
 8000f0c:	7023      	strb	r3, [r4, #0]
      *hMecSpeedUnit = 0;
 8000f0e:	4603      	mov	r3, r0
      pHandle->_Super.hElSpeedDpp = 0;
 8000f10:	81e0      	strh	r0, [r4, #14]
      *hMecSpeedUnit = 0;
 8000f12:	8008      	strh	r0, [r1, #0]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8000f14:	81a3      	strh	r3, [r4, #12]
}
 8000f16:	bd38      	pop	{r3, r4, r5, pc}
        pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8000f18:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8000f1c:	81e3      	strh	r3, [r4, #14]
        if (0 ==  pHandle->AvrElSpeedDpp)
 8000f1e:	b31b      	cbz	r3, 8000f68 <HALL_CalcAvrgMecSpeedUnit+0x8c>
          if (pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED)
 8000f20:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d01d      	beq.n	8000f64 <HALL_CalcAvrgMecSpeedUnit+0x88>
            if (true == pHandle->HallMtpa)
 8000f28:	f894 20c7 	ldrb.w	r2, [r4, #199]	; 0xc7
 8000f2c:	b9f2      	cbnz	r2, 8000f6c <HALL_CalcAvrgMecSpeedUnit+0x90>
              pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8000f2e:	88a2      	ldrh	r2, [r4, #4]
 8000f30:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
 8000f34:	1a89      	subs	r1, r1, r2
 8000f36:	b209      	sxth	r1, r1
              pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 8000f38:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
              pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8000f3c:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
              pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 8000f40:	fb91 f1f2 	sdiv	r1, r1, r2
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8000f44:	8b62      	ldrh	r2, [r4, #26]
 8000f46:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
 8000f4a:	fb02 f303 	mul.w	r3, r2, r3
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8000f4e:	69e1      	ldr	r1, [r4, #28]
 8000f50:	7862      	ldrb	r2, [r4, #1]
                        * (int32_t)SPEED_UNIT )
 8000f52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000f56:	005b      	lsls	r3, r3, #1
                        / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)) );
 8000f58:	fb01 f202 	mul.w	r2, r1, r2
 8000f5c:	fb93 f3f2 	sdiv	r3, r3, r2
            *hMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8000f60:	802b      	strh	r3, [r5, #0]
 8000f62:	e7ca      	b.n	8000efa <HALL_CalcAvrgMecSpeedUnit+0x1e>
            *hMecSpeedUnit = (int16_t)pHandle->SatSpeed;
 8000f64:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 8000f68:	802b      	strh	r3, [r5, #0]
 8000f6a:	e7c6      	b.n	8000efa <HALL_CalcAvrgMecSpeedUnit+0x1e>
              pHandle->CompSpeed = 0;
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	e7e9      	b.n	8000f44 <HALL_CalcAvrgMecSpeedUnit+0x68>

08000f70 <HALL_TIMx_CC_IRQHandler>:
  if (pHandle->SensorIsReliable)
 8000f70:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d049      	beq.n	800100c <HALL_TIMx_CC_IRQHandler+0x9c>
{
 8000f78:	b4f0      	push	{r4, r5, r6, r7}
    if (DEGREES_120 == pHandle->SensorPlacement)
 8000f7a:	f890 3020 	ldrb.w	r3, [r0, #32]
  TIM_TypeDef *TIMx = pHandle->TIMx;
 8000f7e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    bPrevHallState = pHandle->HallState;
 8000f80:	f890 c0a6 	ldrb.w	ip, [r0, #166]	; 0xa6
    PrevDirection = pHandle->Direction;
 8000f84:	f990 10a2 	ldrsb.w	r1, [r0, #162]	; 0xa2
    if (DEGREES_120 == pHandle->SensorPlacement)
 8000f88:	b32b      	cbz	r3, 8000fd6 <HALL_TIMx_CC_IRQHandler+0x66>
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8000f8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000f8c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000f8e:	691e      	ldr	r6, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8000f90:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f92:	691a      	ldr	r2, [r3, #16]
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000f94:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000f96:	691f      	ldr	r7, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8000f98:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000f9a:	4393      	bics	r3, r2
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000f9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000f9e:	bf0c      	ite	eq
 8000fa0:	2201      	moveq	r2, #1
 8000fa2:	2200      	movne	r2, #0
 8000fa4:	43bb      	bics	r3, r7
 8000fa6:	bf0c      	ite	eq
 8000fa8:	2301      	moveq	r3, #1
 8000faa:	2300      	movne	r3, #0
 8000fac:	43b5      	bics	r5, r6
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8000fae:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8000fb2:	bf0c      	ite	eq
 8000fb4:	2201      	moveq	r2, #1
 8000fb6:	2200      	movne	r2, #0
 8000fb8:	0092      	lsls	r2, r2, #2
 8000fba:	f082 0204 	eor.w	r2, r2, #4
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    switch (pHandle->HallState)
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	2b05      	cmp	r3, #5
 8000fc8:	f200 8178 	bhi.w	80012bc <HALL_TIMx_CC_IRQHandler+0x34c>
 8000fcc:	e8df f003 	tbb	[pc, r3]
 8000fd0:	505f7183 	.word	0x505f7183
 8000fd4:	203e      	.short	0x203e
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000fd6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000fd8:	691a      	ldr	r2, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000fda:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000fdc:	691e      	ldr	r6, [r3, #16]
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8000fde:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000fe0:	4393      	bics	r3, r2
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000fe2:	6b02      	ldr	r2, [r0, #48]	; 0x30
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8000fe4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8000fe6:	6915      	ldr	r5, [r2, #16]
 8000fe8:	bf0c      	ite	eq
 8000fea:	2201      	moveq	r2, #1
 8000fec:	2200      	movne	r2, #0
 8000fee:	43b3      	bics	r3, r6
 8000ff0:	bf0c      	ite	eq
 8000ff2:	2301      	moveq	r3, #1
 8000ff4:	2300      	movne	r3, #0
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8000ffc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8000ffe:	43aa      	bics	r2, r5
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001000:	bf08      	it	eq
 8001002:	f043 0301 	orreq.w	r3, r3, #1
 8001006:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 800100a:	e7db      	b.n	8000fc4 <HALL_TIMx_CC_IRQHandler+0x54>
}
 800100c:	2000      	movs	r0, #0
 800100e:	4770      	bx	lr
        if (STATE_2 == bPrevHallState)
 8001010:	f1bc 0f02 	cmp.w	ip, #2
 8001014:	f000 808c 	beq.w	8001130 <HALL_TIMx_CC_IRQHandler+0x1c0>
        else if (STATE_4 == bPrevHallState)
 8001018:	f1bc 0f04 	cmp.w	ip, #4
 800101c:	f000 80ad 	beq.w	800117a <HALL_TIMx_CC_IRQHandler+0x20a>
    PrevDirection = pHandle->Direction;
 8001020:	460b      	mov	r3, r1
    if (true == pHandle->HallMtpa)
 8001022:	f890 20c7 	ldrb.w	r2, [r0, #199]	; 0xc7
 8001026:	b112      	cbz	r2, 800102e <HALL_TIMx_CC_IRQHandler+0xbe>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8001028:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
 800102c:	8082      	strh	r2, [r0, #4]
    if (0U == pHandle->FirstCapt)
 800102e:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 8001032:	2a00      	cmp	r2, #0
 8001034:	f040 80ad 	bne.w	8001192 <HALL_TIMx_CC_IRQHandler+0x222>
      pHandle->FirstCapt++;
 8001038:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800103c:	3301      	adds	r3, #1
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8001044:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 8001046:	2000      	movs	r0, #0
 8001048:	bcf0      	pop	{r4, r5, r6, r7}
 800104a:	4770      	bx	lr
        if (STATE_4 == bPrevHallState)
 800104c:	f1bc 0f04 	cmp.w	ip, #4
 8001050:	d078      	beq.n	8001144 <HALL_TIMx_CC_IRQHandler+0x1d4>
        else if (STATE_1 == bPrevHallState)
 8001052:	f1bc 0f01 	cmp.w	ip, #1
 8001056:	d1e3      	bne.n	8001020 <HALL_TIMx_CC_IRQHandler+0xb0>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 8001058:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800105a:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 800105e:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 8001060:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 8001062:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8001066:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT);
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	e04d      	b.n	800110c <HALL_TIMx_CC_IRQHandler+0x19c>
        if (STATE_6 == bPrevHallState)
 8001070:	f1bc 0f06 	cmp.w	ip, #6
 8001074:	d077      	beq.n	8001166 <HALL_TIMx_CC_IRQHandler+0x1f6>
        else if (STATE_5 == bPrevHallState)
 8001076:	f1bc 0f05 	cmp.w	ip, #5
 800107a:	d1d1      	bne.n	8001020 <HALL_TIMx_CC_IRQHandler+0xb0>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift);
 800107c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800107e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8001082:	22ff      	movs	r2, #255	; 0xff
 8001084:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift);
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	e03e      	b.n	800110c <HALL_TIMx_CC_IRQHandler+0x19c>
        if (STATE_1 == bPrevHallState)
 800108e:	f1bc 0f01 	cmp.w	ip, #1
 8001092:	d05e      	beq.n	8001152 <HALL_TIMx_CC_IRQHandler+0x1e2>
        else if (STATE_2 == bPrevHallState)
 8001094:	f1bc 0f02 	cmp.w	ip, #2
 8001098:	d1c2      	bne.n	8001020 <HALL_TIMx_CC_IRQHandler+0xb0>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 800109a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800109c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80010a0:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = NEGATIVE;
 80010a2:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80010a4:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80010a8:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295
 80010b0:	e02c      	b.n	800110c <HALL_TIMx_CC_IRQHandler+0x19c>
        if (STATE_3 == bPrevHallState)
 80010b2:	f1bc 0f03 	cmp.w	ip, #3
 80010b6:	d031      	beq.n	800111c <HALL_TIMx_CC_IRQHandler+0x1ac>
        else if (STATE_6 == bPrevHallState)
 80010b8:	f1bc 0f06 	cmp.w	ip, #6
 80010bc:	d1b0      	bne.n	8001020 <HALL_TIMx_CC_IRQHandler+0xb0>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80010be:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80010c0:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 80010c4:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 80010c6:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80010c8:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80010cc:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	e01a      	b.n	800110c <HALL_TIMx_CC_IRQHandler+0x19c>
        if (STATE_5 == bPrevHallState)
 80010d6:	f1bc 0f05 	cmp.w	ip, #5
 80010da:	d00e      	beq.n	80010fa <HALL_TIMx_CC_IRQHandler+0x18a>
        else if (STATE_3 == bPrevHallState)
 80010dc:	f1bc 0f03 	cmp.w	ip, #3
 80010e0:	d19e      	bne.n	8001020 <HALL_TIMx_CC_IRQHandler+0xb0>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 80010e2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80010e4:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 80010e8:	3355      	adds	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 80010ea:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 80010ec:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80010f0:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
 80010f8:	e008      	b.n	800110c <HALL_TIMx_CC_IRQHandler+0x19c>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 80010fa:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80010fc:	f502 522a 	add.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 8001100:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8001102:	322a      	adds	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 8001104:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8001108:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
    if (pHandle->Direction != PrevDirection)
 800110c:	4299      	cmp	r1, r3
 800110e:	d088      	beq.n	8001022 <HALL_TIMx_CC_IRQHandler+0xb2>
      pHandle->BufferFilled = 0U ;
 8001110:	2200      	movs	r2, #0
 8001112:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0U;
 8001116:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
 800111a:	e782      	b.n	8001022 <HALL_TIMx_CC_IRQHandler+0xb2>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 800111c:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 800111e:	f502 42ff 	add.w	r2, r2, #32640	; 0x7f80
          pHandle->Direction = POSITIVE;
 8001122:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 8001124:	327f      	adds	r2, #127	; 0x7f
          pHandle->Direction = POSITIVE;
 8001126:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT);
 800112a:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 800112e:	e7ed      	b.n	800110c <HALL_TIMx_CC_IRQHandler+0x19c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 8001130:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8001132:	f5a2 42aa 	sub.w	r2, r2, #21760	; 0x5500
          pHandle->Direction = POSITIVE;
 8001136:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 8001138:	3a55      	subs	r2, #85	; 0x55
          pHandle->Direction = POSITIVE;
 800113a:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT);
 800113e:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8001142:	e7e3      	b.n	800110c <HALL_TIMx_CC_IRQHandler+0x19c>
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8001144:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8001146:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 800114a:	2301      	movs	r3, #1
 800114c:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 8001150:	e7dc      	b.n	800110c <HALL_TIMx_CC_IRQHandler+0x19c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 8001152:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 8001154:	f880 c0a2 	strb.w	ip, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT);
 8001158:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 800115c:	3355      	adds	r3, #85	; 0x55
 800115e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 8001162:	4663      	mov	r3, ip
 8001164:	e7d2      	b.n	800110c <HALL_TIMx_CC_IRQHandler+0x19c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8001166:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8001168:	f5a2 522a 	sub.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 800116c:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 800116e:	3a2a      	subs	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 8001170:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8001174:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 8001178:	e7c8      	b.n	800110c <HALL_TIMx_CC_IRQHandler+0x19c>
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 800117a:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800117c:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 8001180:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 8001182:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 8001184:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8001188:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT);
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	e7bc      	b.n	800110c <HALL_TIMx_CC_IRQHandler+0x19c>
      if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 8001192:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 8001196:	f890 c026 	ldrb.w	ip, [r0, #38]	; 0x26
 800119a:	4562      	cmp	r2, ip
 800119c:	d205      	bcs.n	80011aa <HALL_TIMx_CC_IRQHandler+0x23a>
        pHandle->BufferFilled++;
 800119e:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 80011a2:	3201      	adds	r2, #1
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
 80011aa:	6b66      	ldr	r6, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 80011ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 80011ae:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
      if (pHandle->OVFCounter != 0U)
 80011b2:	f890 504e 	ldrb.w	r5, [r0, #78]	; 0x4e
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 80011b6:	0412      	lsls	r2, r2, #16
      hPrscBuf = (uint16_t)LL_TIM_GetPrescaler(TIMx);
 80011b8:	b289      	uxth	r1, r1
      wCaptBuf += ((uint32_t)pHandle->OVFCounter) * 0x10000UL;
 80011ba:	fa12 f286 	uxtah	r2, r2, r6
      if (pHandle->OVFCounter != 0U)
 80011be:	f005 07ff 	and.w	r7, r5, #255	; 0xff
 80011c2:	2d00      	cmp	r5, #0
 80011c4:	d044      	beq.n	8001250 <HALL_TIMx_CC_IRQHandler+0x2e0>
        hAux = hPrscBuf + 1U;
 80011c6:	3101      	adds	r1, #1
        wCaptBuf *= hAux;
 80011c8:	b289      	uxth	r1, r1
 80011ca:	fb01 f202 	mul.w	r2, r1, r2
        if (pHandle->RatioInc)
 80011ce:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 80011d2:	2900      	cmp	r1, #0
 80011d4:	d046      	beq.n	8001264 <HALL_TIMx_CC_IRQHandler+0x2f4>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 80011d6:	2100      	movs	r1, #0
 80011d8:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
      if (wCaptBuf < pHandle->MinPeriod)
 80011dc:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
 80011e0:	4291      	cmp	r1, r2
 80011e2:	d82f      	bhi.n	8001244 <HALL_TIMx_CC_IRQHandler+0x2d4>
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80011e4:	f890 1098 	ldrb.w	r1, [r0, #152]	; 0x98
        if (wCaptBuf >= pHandle->MaxPeriod)
 80011e8:	f8d0 50b8 	ldr.w	r5, [r0, #184]	; 0xb8
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80011ec:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 80011f0:	eb00 0781 	add.w	r7, r0, r1, lsl #2
        if (wCaptBuf >= pHandle->MaxPeriod)
 80011f4:	4295      	cmp	r5, r2
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80011f6:	6d3e      	ldr	r6, [r7, #80]	; 0x50
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 80011f8:	bf88      	it	hi
 80011fa:	fb03 f502 	mulhi.w	r5, r3, r2
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80011fe:	eba4 0406 	sub.w	r4, r4, r6
        pHandle->SpeedFIFOIdx++;
 8001202:	f101 0101 	add.w	r1, r1, #1
 8001206:	b2c9      	uxtb	r1, r1
        pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8001208:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
          pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 800120c:	bf8a      	itet	hi
 800120e:	1964      	addhi	r4, r4, r5
          pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 8001210:	435d      	mulls	r5, r3
          pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8001212:	f8c0 409c 	strhi.w	r4, [r0, #156]	; 0x9c
        if (pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize)
 8001216:	458c      	cmp	ip, r1
 8001218:	653d      	str	r5, [r7, #80]	; 0x50
          pHandle->SpeedFIFOIdx = 0U;
 800121a:	bf08      	it	eq
 800121c:	2100      	moveq	r1, #0
 800121e:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
        if (pHandle->SensorIsReliable)
 8001222:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 8001226:	b349      	cbz	r1, 800127c <HALL_TIMx_CC_IRQHandler+0x30c>
          if ((pHandle->BufferFilled < pHandle->SpeedBufferSize) && (wCaptBuf != 0U))
 8001228:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
 800122c:	458c      	cmp	ip, r1
 800122e:	d93a      	bls.n	80012a6 <HALL_TIMx_CC_IRQHandler+0x336>
 8001230:	2a00      	cmp	r2, #0
 8001232:	d038      	beq.n	80012a6 <HALL_TIMx_CC_IRQHandler+0x336>
            uint32_t tempReg = (pHandle->PseudoFreqConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 8001234:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
 8001238:	fbb1 f2f2 	udiv	r2, r1, r2
 800123c:	fb02 f303 	mul.w	r3, r2, r3
            pHandle->AvrElSpeedDpp = (int16_t)tempReg;
 8001240:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
      pHandle->OVFCounter = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
}
 800124a:	bcf0      	pop	{r4, r5, r6, r7}
 800124c:	2000      	movs	r0, #0
 800124e:	4770      	bx	lr
        if (pHandle->RatioDec) /* and don't decrease it again */
 8001250:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
 8001254:	b1ad      	cbz	r5, 8001282 <HALL_TIMx_CC_IRQHandler+0x312>
          hAux = hPrscBuf + 2U;
 8001256:	3102      	adds	r1, #2
          wCaptBuf *= hAux;
 8001258:	b289      	uxth	r1, r1
          pHandle->RatioDec = false;
 800125a:	f880 704a 	strb.w	r7, [r0, #74]	; 0x4a
          wCaptBuf *= hAux;
 800125e:	fb01 f202 	mul.w	r2, r1, r2
          pHandle->RatioDec = false;
 8001262:	e7bb      	b.n	80011dc <HALL_TIMx_CC_IRQHandler+0x26c>
 8001264:	6aa1      	ldr	r1, [r4, #40]	; 0x28
          if (LL_TIM_GetPrescaler(TIMx) < pHandle->HALLMaxRatio) /* Avoid OVF w/ very low freq */
 8001266:	f8b0 50ae 	ldrh.w	r5, [r0, #174]	; 0xae
 800126a:	428d      	cmp	r5, r1
 800126c:	d9b6      	bls.n	80011dc <HALL_TIMx_CC_IRQHandler+0x26c>
 800126e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            LL_TIM_SetPrescaler(TIMx, LL_TIM_GetPrescaler(TIMx) + 1U); /* To avoid OVF during speed decrease */
 8001270:	3101      	adds	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8001272:	62a1      	str	r1, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8001274:	2101      	movs	r1, #1
 8001276:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
 800127a:	e7af      	b.n	80011dc <HALL_TIMx_CC_IRQHandler+0x26c>
          pHandle->AvrElSpeedDpp = 0;
 800127c:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8001280:	e7e0      	b.n	8001244 <HALL_TIMx_CC_IRQHandler+0x2d4>
          uint16_t hAux = hPrscBuf + 1U;
 8001282:	3101      	adds	r1, #1
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 8001284:	b2b6      	uxth	r6, r6
          wCaptBuf *= hAux;
 8001286:	b289      	uxth	r1, r1
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 8001288:	f5b6 4faa 	cmp.w	r6, #21760	; 0x5500
          wCaptBuf *= hAux;
 800128c:	fb01 f202 	mul.w	r2, r1, r2
          if (hHighSpeedCapture < LOW_RES_THRESHOLD) /* If capture range correct */
 8001290:	d2a4      	bcs.n	80011dc <HALL_TIMx_CC_IRQHandler+0x26c>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8001292:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            if (LL_TIM_GetPrescaler(TIMx) > 0U) /* or prescaler cannot be further reduced */
 8001294:	2900      	cmp	r1, #0
 8001296:	d0a1      	beq.n	80011dc <HALL_TIMx_CC_IRQHandler+0x26c>
 8001298:	6aa1      	ldr	r1, [r4, #40]	; 0x28
              LL_TIM_SetPrescaler(TIMx, LL_TIM_GetPrescaler(TIMx) - 1U); /* Increase accuracy by decreasing prsc */
 800129a:	3901      	subs	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800129c:	62a1      	str	r1, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 800129e:	2101      	movs	r1, #1
 80012a0:	f880 104a 	strb.w	r1, [r0, #74]	; 0x4a
 80012a4:	e79a      	b.n	80011dc <HALL_TIMx_CC_IRQHandler+0x26c>
                                               (pHandle->ElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value */
 80012a6:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
            pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoFreqConv /
 80012aa:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
                                               (pHandle->ElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value */
 80012ae:	fb92 fcfc 	sdiv	ip, r2, ip
            pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoFreqConv /
 80012b2:	fb93 f3fc 	sdiv	r3, r3, ip
 80012b6:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 80012ba:	e7c3      	b.n	8001244 <HALL_TIMx_CC_IRQHandler+0x2d4>
        pHandle->SensorIsReliable = false;
 80012bc:	2300      	movs	r3, #0
 80012be:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
        break;
 80012c2:	e6ad      	b.n	8001020 <HALL_TIMx_CC_IRQHandler+0xb0>

080012c4 <HALL_TIMx_UP_IRQHandler>:
  if (pHandle->SensorIsReliable)
 80012c4:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 80012c8:	b1e3      	cbz	r3, 8001304 <HALL_TIMx_UP_IRQHandler+0x40>
{
 80012ca:	b430      	push	{r4, r5}
    pHandle->OVFCounter++;
 80012cc:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
  TIM_TypeDef *TIMx = pHandle->TIMx;
 80012d0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    pHandle->OVFCounter++;
 80012d2:	3301      	adds	r3, #1
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  return (uint32_t)(READ_REG(TIMx->PSC));
 80012da:	6a94      	ldr	r4, [r2, #40]	; 0x28
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 80012dc:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 80012e0:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
    if (pHandle->OVFCounter >= hMaxTimerOverflow)
 80012e4:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
    hMaxTimerOverflow = (uint16_t)(((uint32_t)pHandle->HallTimeout * pHandle->OvfFreq)
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
                                 / ((LL_TIM_GetPrescaler(TIMx) + 1U) * 1000U));
 80012ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f0:	fb04 2202 	mla	r2, r4, r2, r2
 80012f4:	fbb3 f3f2 	udiv	r3, r3, r2
    if (pHandle->OVFCounter >= hMaxTimerOverflow)
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	4299      	cmp	r1, r3
 80012fc:	d204      	bcs.n	8001308 <HALL_TIMx_UP_IRQHandler+0x44>
}
 80012fe:	2000      	movs	r0, #0
 8001300:	bc30      	pop	{r4, r5}
 8001302:	4770      	bx	lr
 8001304:	2000      	movs	r0, #0
 8001306:	4770      	bx	lr
    if (DEGREES_120 == pHandle->SensorPlacement)
 8001308:	f890 3020 	ldrb.w	r3, [r0, #32]
      pHandle->_Super.hElSpeedDpp = 0;
 800130c:	2200      	movs	r2, #0
 800130e:	81c2      	strh	r2, [r0, #14]
    if (DEGREES_120 == pHandle->SensorPlacement)
 8001310:	bb0b      	cbnz	r3, 8001356 <HALL_TIMx_UP_IRQHandler+0x92>
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001312:	6c02      	ldr	r2, [r0, #64]	; 0x40
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8001314:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001316:	6911      	ldr	r1, [r2, #16]
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 8001318:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800131a:	691d      	ldr	r5, [r3, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 800131c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800131e:	438a      	bics	r2, r1
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8001320:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 8001324:	bf0c      	ite	eq
 8001326:	2401      	moveq	r4, #1
 8001328:	2400      	movne	r4, #0
 800132a:	43ab      	bics	r3, r5
 800132c:	6909      	ldr	r1, [r1, #16]
 800132e:	bf0c      	ite	eq
 8001330:	2301      	moveq	r3, #1
 8001332:	2300      	movne	r3, #0
                                      | (LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) << 1U)
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 800133a:	438a      	bics	r2, r1
      pHandle->HallState  = (uint8_t)((LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 2U)
 800133c:	bf08      	it	eq
 800133e:	f043 0301 	orreq.w	r3, r3, #1
 8001342:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    switch (pHandle->HallState)
 8001346:	3b01      	subs	r3, #1
 8001348:	2b05      	cmp	r3, #5
 800134a:	d871      	bhi.n	8001430 <HALL_TIMx_UP_IRQHandler+0x16c>
 800134c:	e8df f003 	tbb	[pc, r3]
 8001350:	545b6269 	.word	0x545b6269
 8001354:	214d      	.short	0x214d
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8001356:	6b82      	ldr	r2, [r0, #56]	; 0x38
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8001358:	6c01      	ldr	r1, [r0, #64]	; 0x40
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 800135a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800135c:	6914      	ldr	r4, [r2, #16]
 800135e:	6909      	ldr	r1, [r1, #16]
                                      | (LL_GPIO_IsInputPinSet(pHandle->H3Port, pHandle->H3Pin) << 1U)
 8001360:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001362:	691d      	ldr	r5, [r3, #16]
                                      | LL_GPIO_IsInputPinSet(pHandle->H1Port, pHandle->H1Pin));
 8001364:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001366:	438a      	bics	r2, r1
      pHandle->HallState  = (uint8_t)(((LL_GPIO_IsInputPinSet(pHandle->H2Port, pHandle->H2Pin) ^ 1U) << 2U)
 8001368:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800136a:	bf0c      	ite	eq
 800136c:	2101      	moveq	r1, #1
 800136e:	2100      	movne	r1, #0
 8001370:	43ab      	bics	r3, r5
 8001372:	bf0c      	ite	eq
 8001374:	2301      	moveq	r3, #1
 8001376:	2300      	movne	r3, #0
 8001378:	43a2      	bics	r2, r4
 800137a:	bf0c      	ite	eq
 800137c:	2201      	moveq	r2, #1
 800137e:	2200      	movne	r2, #0
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001386:	f082 0204 	eor.w	r2, r2, #4
 800138a:	4313      	orrs	r3, r2
 800138c:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8001390:	e7d9      	b.n	8001346 <HALL_TIMx_UP_IRQHandler+0x82>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_60_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8001392:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8001394:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8001398:	3b3f      	subs	r3, #63	; 0x3f
 800139a:	b21b      	sxth	r3, r3
 800139c:	8083      	strh	r3, [r0, #4]
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 800139e:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80013a2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
      pHandle->OVFCounter = 0U;
 80013a6:	2200      	movs	r2, #0
 80013a8:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
      pHandle->FirstCapt = 0U;
 80013ac:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 80013b0:	b17c      	cbz	r4, 80013d2 <HALL_TIMx_UP_IRQHandler+0x10e>
 80013b2:	1e62      	subs	r2, r4, #1
 80013b4:	b2d3      	uxtb	r3, r2
        pHandle->SensorPeriod[bIndex]  = (int32_t)pHandle->MaxPeriod;
 80013b6:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 80013ba:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80013be:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80013c2:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 80013c6:	f843 1f04 	str.w	r1, [r3, #4]!
      for (bIndex = 0U; bIndex < pHandle->SpeedBufferSize; bIndex++)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d1fb      	bne.n	80013c6 <HALL_TIMx_UP_IRQHandler+0x102>
      uint32_t tempReg = pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 80013ce:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0U ;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0U;
 80013d8:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle->ElPeriodSum = (int32_t)tempReg;
 80013dc:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
      pHandle->AvrElSpeedDpp = 0;
 80013e0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
}
 80013e4:	bc30      	pop	{r4, r5}
 80013e6:	2000      	movs	r0, #0
 80013e8:	4770      	bx	lr
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + (S16_60_PHASE_SHIFT / 2));
 80013ea:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80013ec:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 80013f0:	3315      	adds	r3, #21
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	8083      	strh	r3, [r0, #4]
        break;
 80013f6:	e7d2      	b.n	800139e <HALL_TIMx_UP_IRQHandler+0xda>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - (S16_60_PHASE_SHIFT / 2));
 80013f8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80013fa:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 80013fe:	3b15      	subs	r3, #21
 8001400:	b21b      	sxth	r3, r3
 8001402:	8083      	strh	r3, [r0, #4]
        break;
 8001404:	e7cb      	b.n	800139e <HALL_TIMx_UP_IRQHandler+0xda>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_120_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8001406:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8001408:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 800140c:	332a      	adds	r3, #42	; 0x2a
 800140e:	b21b      	sxth	r3, r3
 8001410:	8083      	strh	r3, [r0, #4]
        break;
 8001412:	e7c4      	b.n	800139e <HALL_TIMx_UP_IRQHandler+0xda>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift - S16_120_PHASE_SHIFT - (S16_60_PHASE_SHIFT / 2));
 8001414:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8001416:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 800141a:	3b2a      	subs	r3, #42	; 0x2a
 800141c:	b21b      	sxth	r3, r3
 800141e:	8083      	strh	r3, [r0, #4]
        break;
 8001420:	e7bd      	b.n	800139e <HALL_TIMx_UP_IRQHandler+0xda>
        pHandle->_Super.hElAngle = (int16_t)(pHandle->PhaseShift + S16_60_PHASE_SHIFT + (S16_60_PHASE_SHIFT / 2));
 8001422:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8001424:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001428:	333f      	adds	r3, #63	; 0x3f
 800142a:	b21b      	sxth	r3, r3
 800142c:	8083      	strh	r3, [r0, #4]
        break;
 800142e:	e7b6      	b.n	800139e <HALL_TIMx_UP_IRQHandler+0xda>
        pHandle->SensorIsReliable = false;
 8001430:	2200      	movs	r2, #0
    pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8001432:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
        pHandle->SensorIsReliable = false;
 8001436:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
        break;
 800143a:	e7b0      	b.n	800139e <HALL_TIMx_UP_IRQHandler+0xda>
 800143c:	0000      	movs	r0, r0
	...

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b500      	push	{lr}
 8001442:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001444:	2238      	movs	r2, #56	; 0x38
 8001446:	2100      	movs	r1, #0
 8001448:	a806      	add	r0, sp, #24
 800144a:	f008 fe35 	bl	800a0b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800144e:	2000      	movs	r0, #0
 8001450:	e9cd 0000 	strd	r0, r0, [sp]
 8001454:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8001458:	9004      	str	r0, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800145a:	f004 f8db 	bl	8005614 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800145e:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80014b8 <SystemClock_Config+0x78>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001462:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001464:	2103      	movs	r1, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001466:	2206      	movs	r2, #6
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001468:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800146c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800146e:	2155      	movs	r1, #85	; 0x55
 8001470:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001472:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001474:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001478:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800147c:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001480:	f004 f94e 	bl	8005720 <HAL_RCC_OscConfig>
 8001484:	b108      	cbz	r0, 800148a <SystemClock_Config+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001486:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	e7fe      	b.n	8001488 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80014c0 <SystemClock_Config+0x80>
 800148e:	ed8d 7b00 	vstr	d7, [sp]
 8001492:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80014c8 <SystemClock_Config+0x88>
 8001496:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001498:	2104      	movs	r1, #4
 800149a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149c:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a0:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014a2:	f004 fbc1 	bl	8005c28 <HAL_RCC_ClockConfig>
 80014a6:	b108      	cbz	r0, 80014ac <SystemClock_Config+0x6c>
 80014a8:	b672      	cpsid	i
  while (1)
 80014aa:	e7fe      	b.n	80014aa <SystemClock_Config+0x6a>
  HAL_RCC_EnableCSS();
 80014ac:	f004 fd1a 	bl	8005ee4 <HAL_RCC_EnableCSS>
}
 80014b0:	b015      	add	sp, #84	; 0x54
 80014b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80014b6:	bf00      	nop
 80014b8:	00000001 	.word	0x00000001
 80014bc:	00010000 	.word	0x00010000
 80014c0:	0000000f 	.word	0x0000000f
 80014c4:	00000003 	.word	0x00000003
	...

080014d0 <main>:
{
 80014d0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	2400      	movs	r4, #0
{
 80014d6:	b0ad      	sub	sp, #180	; 0xb4
  HAL_Init();
 80014d8:	f002 ff8a 	bl	80043f0 <HAL_Init>
  SystemClock_Config();
 80014dc:	f7ff ffb0 	bl	8001440 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e4:	4dae      	ldr	r5, [pc, #696]	; (80017a0 <main+0x2d0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	9420      	str	r4, [sp, #128]	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80014ea:	48ae      	ldr	r0, [pc, #696]	; (80017a4 <main+0x2d4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	64eb      	str	r3, [r5, #76]	; 0x4c
 80014f2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80014fe:	f043 0320 	orr.w	r3, r3, #32
 8001502:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001504:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001506:	f003 0320 	and.w	r3, r3, #32
 800150a:	9303      	str	r3, [sp, #12]
 800150c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001516:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	9304      	str	r3, [sp, #16]
 800151e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	64eb      	str	r3, [r5, #76]	; 0x4c
 8001528:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001530:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001534:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001538:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800153a:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001540:	f003 ff70 	bl	8005424 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001544:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	64ab      	str	r3, [r5, #72]	; 0x48
 800154c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001556:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	64ab      	str	r3, [r5, #72]	; 0x48
 800155e:	6cab      	ldr	r3, [r5, #72]	; 0x48
  hadc1.Instance = ADC1;
 8001560:	4d91      	ldr	r5, [pc, #580]	; (80017a8 <main+0x2d8>)
  ADC_MultiModeTypeDef multimode = {0};
 8001562:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001564:	f003 0301 	and.w	r3, r3, #1
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001568:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800156a:	9301      	str	r3, [sp, #4]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800156c:	223c      	movs	r2, #60	; 0x3c
 800156e:	a81c      	add	r0, sp, #112	; 0x70
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001570:	9b01      	ldr	r3, [sp, #4]
  ADC_MultiModeTypeDef multimode = {0};
 8001572:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001576:	f008 fd9f 	bl	800a0b8 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 800157a:	4621      	mov	r1, r4
 800157c:	2220      	movs	r2, #32
 800157e:	a814      	add	r0, sp, #80	; 0x50
 8001580:	f008 fd9a 	bl	800a0b8 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001584:	f44f 4800 	mov.w	r8, #32768	; 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001588:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800158c:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  hadc1.Init.GainCompensation = 0;
 8001590:	612c      	str	r4, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001592:	83ac      	strh	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001594:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001598:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800159c:	63ec      	str	r4, [r5, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800159e:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
  hadc1.Instance = ADC1;
 80015a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015a6:	2401      	movs	r4, #1
 80015a8:	2604      	movs	r6, #4
  hadc1.Init.NbrOfConversion = 2;
 80015aa:	2702      	movs	r7, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ac:	4628      	mov	r0, r5
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015ae:	e9c5 4605 	strd	r4, r6, [r5, #20]
  hadc1.Instance = ADC1;
 80015b2:	602b      	str	r3, [r5, #0]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80015b4:	f8c5 800c 	str.w	r8, [r5, #12]
  hadc1.Init.NbrOfConversion = 2;
 80015b8:	622f      	str	r7, [r5, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ba:	f002 ff3b 	bl	8004434 <HAL_ADC_Init>
 80015be:	b108      	cbz	r0, 80015c4 <main+0xf4>
 80015c0:	b672      	cpsid	i
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <main+0xf2>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015c4:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015c6:	a90e      	add	r1, sp, #56	; 0x38
 80015c8:	4628      	mov	r0, r5
 80015ca:	f003 fd9d 	bl	8005108 <HAL_ADCEx_MultiModeConfigChannel>
 80015ce:	b108      	cbz	r0, 80015d4 <main+0x104>
 80015d0:	b672      	cpsid	i
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <main+0x102>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80015d4:	ed9f 8b6e 	vldr	d8, [pc, #440]	; 8001790 <main+0x2c0>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80015d8:	4b74      	ldr	r3, [pc, #464]	; (80017ac <main+0x2dc>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80015da:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
  sConfigInjected.InjectedOffset = 0;
 80015de:	e9cd 6020 	strd	r6, r0, [sp, #128]	; 0x80
  sConfigInjected.QueueInjectedContext = DISABLE;
 80015e2:	f88d 0096 	strb.w	r0, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80015e6:	f88d 00a0 	strb.w	r0, [sp, #160]	; 0xa0
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80015ea:	f04f 0a09 	mov.w	sl, #9
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80015ee:	f04f 097f 	mov.w	r9, #127	; 0x7f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80015f2:	a91c      	add	r1, sp, #112	; 0x70
 80015f4:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80015f6:	e9cd 3a1c 	strd	r3, sl, [sp, #112]	; 0x70
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80015fa:	ed8d 8b26 	vstr	d8, [sp, #152]	; 0x98
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80015fe:	941e      	str	r4, [sp, #120]	; 0x78
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001600:	9724      	str	r7, [sp, #144]	; 0x90
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001602:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001606:	f003 fa85 	bl	8004b14 <HAL_ADCEx_InjectedConfigChannel>
 800160a:	b108      	cbz	r0, 8001610 <main+0x140>
 800160c:	b672      	cpsid	i
  while (1)
 800160e:	e7fe      	b.n	800160e <main+0x13e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8001610:	a361      	add	r3, pc, #388	; (adr r3, 8001798 <main+0x2c8>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001616:	a91c      	add	r1, sp, #112	; 0x70
 8001618:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 800161a:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800161e:	f003 fa79 	bl	8004b14 <HAL_ADCEx_InjectedConfigChannel>
 8001622:	b108      	cbz	r0, 8001628 <main+0x158>
 8001624:	b672      	cpsid	i
  while (1)
 8001626:	e7fe      	b.n	8001626 <main+0x156>
  sConfig.Channel = ADC_CHANNEL_2;
 8001628:	4a61      	ldr	r2, [pc, #388]	; (80017b0 <main+0x2e0>)
 800162a:	2306      	movs	r3, #6
 800162c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8001630:	2204      	movs	r2, #4
 8001632:	237f      	movs	r3, #127	; 0x7f
 8001634:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001638:	a914      	add	r1, sp, #80	; 0x50
  sConfig.Channel = ADC_CHANNEL_2;
 800163a:	2204      	movs	r2, #4
 800163c:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800163e:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_2;
 8001640:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001644:	f002 fffa 	bl	800463c <HAL_ADC_ConfigChannel>
 8001648:	b108      	cbz	r0, 800164e <main+0x17e>
 800164a:	b672      	cpsid	i
  while (1)
 800164c:	e7fe      	b.n	800164c <main+0x17c>
  sConfig.Channel = ADC_CHANNEL_8;
 800164e:	4a59      	ldr	r2, [pc, #356]	; (80017b4 <main+0x2e4>)
 8001650:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001652:	4628      	mov	r0, r5
 8001654:	a914      	add	r1, sp, #80	; 0x50
  sConfig.Channel = ADC_CHANNEL_8;
 8001656:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800165a:	f002 ffef 	bl	800463c <HAL_ADC_ConfigChannel>
 800165e:	4683      	mov	fp, r0
 8001660:	b108      	cbz	r0, 8001666 <main+0x196>
 8001662:	b672      	cpsid	i
  while (1)
 8001664:	e7fe      	b.n	8001664 <main+0x194>
  hadc2.Instance = ADC2;
 8001666:	4d54      	ldr	r5, [pc, #336]	; (80017b8 <main+0x2e8>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001668:	4601      	mov	r1, r0
 800166a:	223c      	movs	r2, #60	; 0x3c
 800166c:	a81c      	add	r0, sp, #112	; 0x70
 800166e:	f008 fd23 	bl	800a0b8 <memset>
  hadc2.Instance = ADC2;
 8001672:	4b52      	ldr	r3, [pc, #328]	; (80017bc <main+0x2ec>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001674:	f8a5 b01c 	strh.w	fp, [r5, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001678:	4628      	mov	r0, r5
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800167a:	e9c5 bb01 	strd	fp, fp, [r5, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800167e:	e9c5 b404 	strd	fp, r4, [r5, #16]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001682:	f8c5 800c 	str.w	r8, [r5, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001686:	61ae      	str	r6, [r5, #24]
  hadc2.Init.NbrOfConversion = 1;
 8001688:	622c      	str	r4, [r5, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800168a:	f885 b024 	strb.w	fp, [r5, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800168e:	f885 b038 	strb.w	fp, [r5, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001692:	f8c5 b03c 	str.w	fp, [r5, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001696:	f885 b040 	strb.w	fp, [r5, #64]	; 0x40
  hadc2.Instance = ADC2;
 800169a:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800169c:	f002 feca 	bl	8004434 <HAL_ADC_Init>
 80016a0:	b108      	cbz	r0, 80016a6 <main+0x1d6>
 80016a2:	b672      	cpsid	i
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <main+0x1d4>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <main+0x2f0>)
  sConfigInjected.InjectedOffset = 0;
 80016a8:	9021      	str	r0, [sp, #132]	; 0x84
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80016aa:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
  sConfigInjected.QueueInjectedContext = DISABLE;
 80016ae:	f88d 0096 	strb.w	r0, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80016b2:	f88d 00a0 	strb.w	r0, [sp, #160]	; 0xa0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80016b6:	a91c      	add	r1, sp, #112	; 0x70
 80016b8:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80016ba:	ed8d 8b26 	vstr	d8, [sp, #152]	; 0x98
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80016be:	e9cd a41d 	strd	sl, r4, [sp, #116]	; 0x74
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80016c2:	e9cd 961f 	strd	r9, r6, [sp, #124]	; 0x7c
  sConfigInjected.InjectedNbrOfConversion = 2;
 80016c6:	9724      	str	r7, [sp, #144]	; 0x90
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 80016c8:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80016ca:	f003 fa23 	bl	8004b14 <HAL_ADCEx_InjectedConfigChannel>
 80016ce:	b108      	cbz	r0, 80016d4 <main+0x204>
 80016d0:	b672      	cpsid	i
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <main+0x202>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80016d4:	4a3b      	ldr	r2, [pc, #236]	; (80017c4 <main+0x2f4>)
 80016d6:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80016da:	4628      	mov	r0, r5
 80016dc:	a91c      	add	r1, sp, #112	; 0x70
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80016de:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80016e2:	f003 fa17 	bl	8004b14 <HAL_ADCEx_InjectedConfigChannel>
 80016e6:	b108      	cbz	r0, 80016ec <main+0x21c>
 80016e8:	b672      	cpsid	i
  while (1)
 80016ea:	e7fe      	b.n	80016ea <main+0x21a>
  hcordic.Instance = CORDIC;
 80016ec:	4836      	ldr	r0, [pc, #216]	; (80017c8 <main+0x2f8>)
 80016ee:	4b37      	ldr	r3, [pc, #220]	; (80017cc <main+0x2fc>)
 80016f0:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80016f2:	f003 fd6f 	bl	80051d4 <HAL_CORDIC_Init>
 80016f6:	b108      	cbz	r0, 80016fc <main+0x22c>
 80016f8:	b672      	cpsid	i
  while (1)
 80016fa:	e7fe      	b.n	80016fa <main+0x22a>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80016fc:	2400      	movs	r4, #0
  htim1.Instance = TIM1;
 80016fe:	4d34      	ldr	r5, [pc, #208]	; (80017d0 <main+0x300>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001700:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001702:	4621      	mov	r1, r4
 8001704:	2234      	movs	r2, #52	; 0x34
 8001706:	a81c      	add	r0, sp, #112	; 0x70
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001708:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 800170c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001710:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8001714:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8001718:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171c:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001720:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001724:	9406      	str	r4, [sp, #24]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001726:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001728:	941a      	str	r4, [sp, #104]	; 0x68
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800172a:	f008 fcc5 	bl	800a0b8 <memset>
  htim1.Instance = TIM1;
 800172e:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <main+0x304>)
 8001730:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001732:	2720      	movs	r7, #32
 8001734:	f44f 53a6 	mov.w	r3, #5312	; 0x14c0
 8001738:	e9c5 7302 	strd	r7, r3, [r5, #8]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800173c:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173e:	61ac      	str	r4, [r5, #24]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001744:	2401      	movs	r4, #1
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001746:	4628      	mov	r0, r5
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001748:	e9c5 3404 	strd	r3, r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800174c:	f004 fdda 	bl	8006304 <HAL_TIM_Base_Init>
 8001750:	b108      	cbz	r0, 8001756 <main+0x286>
 8001752:	b672      	cpsid	i
  while (1)
 8001754:	e7fe      	b.n	8001754 <main+0x284>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001756:	4628      	mov	r0, r5
 8001758:	f004 fe98 	bl	800648c <HAL_TIM_PWM_Init>
 800175c:	b108      	cbz	r0, 8001762 <main+0x292>
 800175e:	b672      	cpsid	i
  while (1)
 8001760:	e7fe      	b.n	8001760 <main+0x290>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001762:	2206      	movs	r2, #6
 8001764:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001766:	a90e      	add	r1, sp, #56	; 0x38
 8001768:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800176a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800176e:	f004 ffe9 	bl	8006744 <HAL_TIM_SlaveConfigSynchro>
 8001772:	b108      	cbz	r0, 8001778 <main+0x2a8>
 8001774:	b672      	cpsid	i
  while (1)
 8001776:	e7fe      	b.n	8001776 <main+0x2a6>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001778:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800177a:	2270      	movs	r2, #112	; 0x70
 800177c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800177e:	a906      	add	r1, sp, #24
 8001780:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001782:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001786:	f005 fbcb 	bl	8006f20 <HAL_TIMEx_MasterConfigSynchronization>
 800178a:	b328      	cbz	r0, 80017d8 <main+0x308>
 800178c:	b672      	cpsid	i
  while (1)
 800178e:	e7fe      	b.n	800178e <main+0x2be>
 8001790:	00000080 	.word	0x00000080
 8001794:	00000080 	.word	0x00000080
 8001798:	1d500080 	.word	0x1d500080
 800179c:	0000010f 	.word	0x0000010f
 80017a0:	40021000 	.word	0x40021000
 80017a4:	48000800 	.word	0x48000800
 80017a8:	20000454 	.word	0x20000454
 80017ac:	04300002 	.word	0x04300002
 80017b0:	08600004 	.word	0x08600004
 80017b4:	21800100 	.word	0x21800100
 80017b8:	200004c0 	.word	0x200004c0
 80017bc:	50000100 	.word	0x50000100
 80017c0:	1d500080 	.word	0x1d500080
 80017c4:	19200040 	.word	0x19200040
 80017c8:	2000052c 	.word	0x2000052c
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	20000614 	.word	0x20000614
 80017d4:	40012c00 	.word	0x40012c00
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80017d8:	aa0a      	add	r2, sp, #40	; 0x28
 80017da:	4621      	mov	r1, r4
 80017dc:	4628      	mov	r0, r5
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80017de:	2601      	movs	r6, #1
 80017e0:	2701      	movs	r7, #1
 80017e2:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 80017e6:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80017e8:	f005 fc32 	bl	8007050 <HAL_TIMEx_ConfigBreakInput>
 80017ec:	4602      	mov	r2, r0
 80017ee:	b108      	cbz	r0, 80017f4 <main+0x324>
 80017f0:	b672      	cpsid	i
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <main+0x322>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f4:	2660      	movs	r6, #96	; 0x60
 80017f6:	f44f 6726 	mov.w	r7, #2656	; 0xa60
 80017fa:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
 80017fe:	2600      	movs	r6, #0
 8001800:	2708      	movs	r7, #8
 8001802:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001806:	f44f 7300 	mov.w	r3, #512	; 0x200
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800180a:	2600      	movs	r6, #0
 800180c:	2700      	movs	r7, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800180e:	a914      	add	r1, sp, #80	; 0x50
 8001810:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001812:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001816:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001818:	f005 f9e4 	bl	8006be4 <HAL_TIM_PWM_ConfigChannel>
 800181c:	b108      	cbz	r0, 8001822 <main+0x352>
 800181e:	b672      	cpsid	i
  while (1)
 8001820:	e7fe      	b.n	8001820 <main+0x350>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001822:	2204      	movs	r2, #4
 8001824:	a914      	add	r1, sp, #80	; 0x50
 8001826:	4628      	mov	r0, r5
 8001828:	f005 f9dc 	bl	8006be4 <HAL_TIM_PWM_ConfigChannel>
 800182c:	b108      	cbz	r0, 8001832 <main+0x362>
 800182e:	b672      	cpsid	i
  while (1)
 8001830:	e7fe      	b.n	8001830 <main+0x360>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001832:	2208      	movs	r2, #8
 8001834:	a914      	add	r1, sp, #80	; 0x50
 8001836:	4628      	mov	r0, r5
 8001838:	f005 f9d4 	bl	8006be4 <HAL_TIM_PWM_ConfigChannel>
 800183c:	b108      	cbz	r0, 8001842 <main+0x372>
 800183e:	b672      	cpsid	i
  while (1)
 8001840:	e7fe      	b.n	8001840 <main+0x370>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001842:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001844:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001846:	220c      	movs	r2, #12
 8001848:	a914      	add	r1, sp, #80	; 0x50
 800184a:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800184c:	f04f 0870 	mov.w	r8, #112	; 0x70
 8001850:	f241 49bf 	movw	r9, #5311	; 0x14bf
 8001854:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001858:	f005 f9c4 	bl	8006be4 <HAL_TIM_PWM_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	b108      	cbz	r0, 8001864 <main+0x394>
 8001860:	b672      	cpsid	i
  while (1)
 8001862:	e7fe      	b.n	8001862 <main+0x392>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001864:	f44f 6200 	mov.w	r2, #2048	; 0x800
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001868:	9328      	str	r3, [sp, #160]	; 0xa0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800186a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800186e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8001872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001876:	2348      	movs	r3, #72	; 0x48
 8001878:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 800187c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001884:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8001888:	2203      	movs	r2, #3
 800188a:	2300      	movs	r3, #0
 800188c:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001890:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001892:	2200      	movs	r2, #0
 8001894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001898:	a91c      	add	r1, sp, #112	; 0x70
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800189a:	e9cd 6726 	strd	r6, r7, [sp, #152]	; 0x98
 800189e:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018a2:	f005 fb87 	bl	8006fb4 <HAL_TIMEx_ConfigBreakDeadTime>
 80018a6:	b108      	cbz	r0, 80018ac <main+0x3dc>
 80018a8:	b672      	cpsid	i
  while (1)
 80018aa:	e7fe      	b.n	80018aa <main+0x3da>
  htim2.Instance = TIM2;
 80018ac:	4c61      	ldr	r4, [pc, #388]	; (8001a34 <main+0x564>)
  HAL_TIM_MspPostInit(&htim1);
 80018ae:	4862      	ldr	r0, [pc, #392]	; (8001a38 <main+0x568>)
 80018b0:	f002 fb0c 	bl	8003ecc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b4:	2300      	movs	r3, #0
 80018b6:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 80018ba:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
  TIM_HallSensor_InitTypeDef sConfig = {0};
 80018be:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 80018c2:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c6:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ca:	e9c4 3301 	strd	r3, r3, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ce:	9310      	str	r3, [sp, #64]	; 0x40
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d0:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d2:	61a3      	str	r3, [r4, #24]
  htim2.Instance = TIM2;
 80018d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018d8:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018da:	4620      	mov	r0, r4
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 80018dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e0:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018e2:	f004 fd0f 	bl	8006304 <HAL_TIM_Base_Init>
 80018e6:	b108      	cbz	r0, 80018ec <main+0x41c>
 80018e8:	b672      	cpsid	i
  while (1)
 80018ea:	e7fe      	b.n	80018ea <main+0x41a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018f0:	a91c      	add	r1, sp, #112	; 0x70
 80018f2:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f4:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018f6:	f004 fe51 	bl	800659c <HAL_TIM_ConfigClockSource>
 80018fa:	b108      	cbz	r0, 8001900 <main+0x430>
 80018fc:	b672      	cpsid	i
  while (1)
 80018fe:	e7fe      	b.n	80018fe <main+0x42e>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001900:	2200      	movs	r2, #0
 8001902:	2300      	movs	r3, #0
 8001904:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001908:	a914      	add	r1, sp, #80	; 0x50
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800190a:	220c      	movs	r2, #12
 800190c:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 800190e:	4620      	mov	r0, r4
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001910:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8001914:	f005 fa9a 	bl	8006e4c <HAL_TIMEx_HallSensor_Init>
 8001918:	b108      	cbz	r0, 800191e <main+0x44e>
 800191a:	b672      	cpsid	i
  while (1)
 800191c:	e7fe      	b.n	800191c <main+0x44c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800191e:	2350      	movs	r3, #80	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001920:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001922:	a90e      	add	r1, sp, #56	; 0x38
 8001924:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001926:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001928:	f005 fafa 	bl	8006f20 <HAL_TIMEx_MasterConfigSynchronization>
 800192c:	4603      	mov	r3, r0
 800192e:	b108      	cbz	r0, 8001934 <main+0x464>
 8001930:	b672      	cpsid	i
  while (1)
 8001932:	e7fe      	b.n	8001932 <main+0x462>
  huart2.Instance = USART2;
 8001934:	4c41      	ldr	r4, [pc, #260]	; (8001a3c <main+0x56c>)
  huart2.Init.BaudRate = 1843200;
 8001936:	4942      	ldr	r1, [pc, #264]	; (8001a40 <main+0x570>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001938:	62a3      	str	r3, [r4, #40]	; 0x28
  huart2.Init.BaudRate = 1843200;
 800193a:	f44f 12e1 	mov.w	r2, #1843200	; 0x1c2000
 800193e:	e9c4 1200 	strd	r1, r2, [r4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001942:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001944:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001948:	e9c4 0204 	strd	r0, r2, [r4, #16]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800194c:	4620      	mov	r0, r4
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800194e:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001952:	e9c4 3308 	strd	r3, r3, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001956:	f005 fe25 	bl	80075a4 <HAL_UART_Init>
 800195a:	4601      	mov	r1, r0
 800195c:	b108      	cbz	r0, 8001962 <main+0x492>
 800195e:	b672      	cpsid	i
  while (1)
 8001960:	e7fe      	b.n	8001960 <main+0x490>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001962:	4620      	mov	r0, r4
 8001964:	f005 fea8 	bl	80076b8 <HAL_UARTEx_SetTxFifoThreshold>
 8001968:	4601      	mov	r1, r0
 800196a:	b108      	cbz	r0, 8001970 <main+0x4a0>
 800196c:	b672      	cpsid	i
  while (1)
 800196e:	e7fe      	b.n	800196e <main+0x49e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001970:	4620      	mov	r0, r4
 8001972:	f005 fee3 	bl	800773c <HAL_UARTEx_SetRxFifoThreshold>
 8001976:	b108      	cbz	r0, 800197c <main+0x4ac>
 8001978:	b672      	cpsid	i
  while (1)
 800197a:	e7fe      	b.n	800197a <main+0x4aa>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800197c:	4620      	mov	r0, r4
 800197e:	f005 fe7d 	bl	800767c <HAL_UARTEx_DisableFifoMode>
 8001982:	4605      	mov	r5, r0
 8001984:	b108      	cbz	r0, 800198a <main+0x4ba>
 8001986:	b672      	cpsid	i
  while (1)
 8001988:	e7fe      	b.n	8001988 <main+0x4b8>
  MX_MotorControl_Init();
 800198a:	f000 fe5b 	bl	8002644 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 800198e:	462a      	mov	r2, r5
 8001990:	2108      	movs	r1, #8
 8001992:	2026      	movs	r0, #38	; 0x26
 8001994:	f003 fc4a 	bl	800522c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001998:	2026      	movs	r0, #38	; 0x26
 800199a:	f003 fc85 	bl	80052a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 8, 0);
 800199e:	462a      	mov	r2, r5
 80019a0:	2108      	movs	r1, #8
 80019a2:	200b      	movs	r0, #11
 80019a4:	f003 fc42 	bl	800522c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019a8:	200b      	movs	r0, #11
 80019aa:	f003 fc7d 	bl	80052a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 9, 0);
 80019ae:	462a      	mov	r2, r5
 80019b0:	2109      	movs	r1, #9
 80019b2:	2018      	movs	r0, #24
 80019b4:	f003 fc3a 	bl	800522c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80019b8:	2018      	movs	r0, #24
 80019ba:	f003 fc75 	bl	80052a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 80019be:	462a      	mov	r2, r5
 80019c0:	2105      	movs	r1, #5
 80019c2:	2019      	movs	r0, #25
 80019c4:	f003 fc32 	bl	800522c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019c8:	2019      	movs	r0, #25
 80019ca:	f003 fc6d 	bl	80052a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 7, 0);
 80019ce:	462a      	mov	r2, r5
 80019d0:	2107      	movs	r1, #7
 80019d2:	2012      	movs	r0, #18
 80019d4:	f003 fc2a 	bl	800522c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80019d8:	2012      	movs	r0, #18
 80019da:	f003 fc65 	bl	80052a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 8, 0);
 80019de:	462a      	mov	r2, r5
 80019e0:	2108      	movs	r1, #8
 80019e2:	201c      	movs	r0, #28
 80019e4:	f003 fc22 	bl	800522c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019e8:	201c      	movs	r0, #28
 80019ea:	f003 fc5d 	bl	80052a8 <HAL_NVIC_EnableIRQ>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 80019ee:	4c15      	ldr	r4, [pc, #84]	; (8001a44 <main+0x574>)
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 80019f0:	462a      	mov	r2, r5
 80019f2:	2108      	movs	r1, #8
 80019f4:	2028      	movs	r0, #40	; 0x28
 80019f6:	f003 fc19 	bl	800522c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019fa:	2028      	movs	r0, #40	; 0x28
 80019fc:	f003 fc54 	bl	80052a8 <HAL_NVIC_EnableIRQ>
  osThreadDef(mediumFrequency, startMediumFrequencyTask, osPriorityNormal, 0, 128);
 8001a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a02:	ae14      	add	r6, sp, #80	; 0x50
 8001a04:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001a06:	f854 3b04 	ldr.w	r3, [r4], #4
 8001a0a:	6033      	str	r3, [r6, #0]
  mediumFrequencyHandle = osThreadCreate(osThread(mediumFrequency), NULL);
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	a814      	add	r0, sp, #80	; 0x50
 8001a10:	f005 fedc 	bl	80077cc <osThreadCreate>
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <main+0x578>)
 8001a16:	6018      	str	r0, [r3, #0]
  osThreadDef(safety, StartSafetyTask, osPriorityAboveNormal, 0, 128);
 8001a18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a1a:	ae1c      	add	r6, sp, #112	; 0x70
 8001a1c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	6033      	str	r3, [r6, #0]
  safetyHandle = osThreadCreate(osThread(safety), NULL);
 8001a22:	4629      	mov	r1, r5
 8001a24:	a81c      	add	r0, sp, #112	; 0x70
 8001a26:	f005 fed1 	bl	80077cc <osThreadCreate>
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <main+0x57c>)
 8001a2c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001a2e:	f005 fec7 	bl	80077c0 <osKernelStart>
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <main+0x562>
 8001a34:	20000660 	.word	0x20000660
 8001a38:	20000614 	.word	0x20000614
 8001a3c:	200006ac 	.word	0x200006ac
 8001a40:	40004400 	.word	0x40004400
 8001a44:	0800a0e0 	.word	0x0800a0e0
 8001a48:	2000073c 	.word	0x2000073c
 8001a4c:	20000740 	.word	0x20000740

08001a50 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001a52:	6802      	ldr	r2, [r0, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d000      	beq.n	8001a5a <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001a58:	4770      	bx	lr
    HAL_IncTick();
 8001a5a:	f002 bcd9 	b.w	8004410 <HAL_IncTick>
 8001a5e:	bf00      	nop
 8001a60:	40001000 	.word	0x40001000

08001a64 <Error_Handler>:
 8001a64:	b672      	cpsid	i
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <Error_Handler+0x2>

08001a68 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001a68:	4b01      	ldr	r3, [pc, #4]	; (8001a70 <MC_StartMotor1+0x8>)
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	f000 b890 	b.w	8001b90 <MCI_StartMotor>
 8001a70:	20001930 	.word	0x20001930

08001a74 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8001a74:	4b01      	ldr	r3, [pc, #4]	; (8001a7c <MC_StopMotor1+0x8>)
 8001a76:	6818      	ldr	r0, [r3, #0]
 8001a78:	f000 b8a0 	b.w	8001bbc <MCI_StopMotor>
 8001a7c:	20001930 	.word	0x20001930

08001a80 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8001a80:	4b01      	ldr	r3, [pc, #4]	; (8001a88 <MC_GetSTMStateMotor1+0x8>)
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	f000 b87e 	b.w	8001b84 <MCI_GetSTMState>
 8001a88:	20001930 	.word	0x20001930

08001a8c <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */
__weak uint8_t MC_ProfilerCommand (uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return MCP_CMD_UNKNOWN;
}
 8001a8c:	2002      	movs	r0, #2
 8001a8e:	4770      	bx	lr

08001a90 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop

08001a94 <MC_APP_PostMediumFrequencyHook_M1>:
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop

08001a98 <MCI_Init>:
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001a98:	f04f 0c00 	mov.w	ip, #0
    pHandle->pFOCVars = pFOCVars;
 8001a9c:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pPWM = pPWMHandle;
 8001aa0:	6083      	str	r3, [r0, #8]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001aa2:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = 0;
 8001aa6:	f8c0 c00e 	str.w	ip, [r0, #14]
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 8001aaa:	f8a0 c016 	strh.w	ip, [r0, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001aae:	f880 c01e 	strb.w	ip, [r0, #30]
    pHandle->DirectCommand = MCI_NO_COMMAND;
 8001ab2:	f8a0 c018 	strh.w	ip, [r0, #24]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 8001ab6:	f8c0 c01a 	str.w	ip, [r0, #26]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001aba:	4770      	bx	lr

08001abc <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001abc:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001ac0:	f240 3301 	movw	r3, #769	; 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001ac4:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 8001ac8:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 8001aca:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001acc:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001ace:	4770      	bx	lr

08001ad0 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001ad0:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001ad4:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001ad8:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 8001adc:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 8001ade:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001ae0:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001ae2:	4770      	bx	lr

08001ae4 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8001ae4:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001ae6:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001ae8:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001aec:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 8001aee:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001af2:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001af4:	b002      	add	sp, #8
 8001af6:	4770      	bx	lr

08001af8 <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001af8:	8b43      	ldrh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 8001afa:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001afe:	430b      	orrs	r3, r1
 8001b00:	ea23 0302 	bic.w	r3, r3, r2
  pHandle->PastFaults |= hSetErrors;
 8001b04:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001b08:	8343      	strh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 8001b0a:	8381      	strh	r1, [r0, #28]

  return;
}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop

08001b10 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001b10:	7f83      	ldrb	r3, [r0, #30]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d000      	beq.n	8001b18 <MCI_ExecBufferedCommands+0x8>
 8001b16:	4770      	bx	lr
{
 8001b18:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001b1a:	7b02      	ldrb	r2, [r0, #12]
 8001b1c:	2a02      	cmp	r2, #2
 8001b1e:	4604      	mov	r4, r0
 8001b20:	d006      	beq.n	8001b30 <MCI_ExecBufferedCommands+0x20>
 8001b22:	2a03      	cmp	r2, #3
 8001b24:	d026      	beq.n	8001b74 <MCI_ExecBufferedCommands+0x64>
 8001b26:	2a01      	cmp	r2, #1
 8001b28:	d015      	beq.n	8001b56 <MCI_ExecBufferedCommands+0x46>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	77a3      	strb	r3, [r4, #30]
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001b2e:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001b30:	6843      	ldr	r3, [r0, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001b38:	6800      	ldr	r0, [r0, #0]
 8001b3a:	2104      	movs	r1, #4
 8001b3c:	f008 f9fa 	bl	8009f34 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001b40:	8ae2      	ldrh	r2, [r4, #22]
 8001b42:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001b46:	6820      	ldr	r0, [r4, #0]
 8001b48:	f008 f9f8 	bl	8009f3c <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	d0ec      	beq.n	8001b2a <MCI_ExecBufferedCommands+0x1a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001b50:	2302      	movs	r3, #2
 8001b52:	77a3      	strb	r3, [r4, #30]
}
 8001b54:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001b56:	6843      	ldr	r3, [r0, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001b5e:	6800      	ldr	r0, [r0, #0]
 8001b60:	2103      	movs	r1, #3
 8001b62:	f008 f9e7 	bl	8009f34 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001b66:	8ae2      	ldrh	r2, [r4, #22]
 8001b68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b6c:	6820      	ldr	r0, [r4, #0]
 8001b6e:	f008 f9e5 	bl	8009f3c <STC_ExecRamp>
          break;
 8001b72:	e7eb      	b.n	8001b4c <MCI_ExecBufferedCommands+0x3c>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001b74:	6842      	ldr	r2, [r0, #4]
 8001b76:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001b7a:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8001b7e:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8001b80:	e7e6      	b.n	8001b50 <MCI_ExecBufferedCommands+0x40>
 8001b82:	bf00      	nop

08001b84 <MCI_GetSTMState>:
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
}
 8001b84:	7e40      	ldrb	r0, [r0, #25]
 8001b86:	4770      	bx	lr

08001b88 <MCI_GetOccurredFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
}
 8001b88:	8b80      	ldrh	r0, [r0, #28]
 8001b8a:	4770      	bx	lr

08001b8c <MCI_GetCurrentFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
}
 8001b8c:	8b40      	ldrh	r0, [r0, #26]
 8001b8e:	4770      	bx	lr

08001b90 <MCI_StartMotor>:
{
 8001b90:	b510      	push	{r4, lr}
 8001b92:	4604      	mov	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001b94:	f7ff fff6 	bl	8001b84 <MCI_GetSTMState>
 8001b98:	b108      	cbz	r0, 8001b9e <MCI_StartMotor+0xe>
    RetVal = false;
 8001b9a:	2000      	movs	r0, #0
}
 8001b9c:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f7ff fff2 	bl	8001b88 <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	d1f8      	bne.n	8001b9a <MCI_StartMotor+0xa>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f7ff ffef 	bl	8001b8c <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001bae:	2800      	cmp	r0, #0
 8001bb0:	d1f3      	bne.n	8001b9a <MCI_StartMotor+0xa>
    pHandle->DirectCommand = MCI_START;
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	7620      	strb	r0, [r4, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001bb6:	77a0      	strb	r0, [r4, #30]
}
 8001bb8:	bd10      	pop	{r4, pc}
 8001bba:	bf00      	nop

08001bbc <MCI_StopMotor>:
{
 8001bbc:	b538      	push	{r3, r4, r5, lr}
 8001bbe:	4605      	mov	r5, r0
  State = MCI_GetSTMState(pHandle);
 8001bc0:	f7ff ffe0 	bl	8001b84 <MCI_GetSTMState>
  if (IDLE == State  || ICLWAIT == State)
 8001bc4:	b150      	cbz	r0, 8001bdc <MCI_StopMotor+0x20>
 8001bc6:	f1b0 040c 	subs.w	r4, r0, #12
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001bca:	4628      	mov	r0, r5
  if (IDLE == State  || ICLWAIT == State)
 8001bcc:	bf18      	it	ne
 8001bce:	2401      	movne	r4, #1
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001bd0:	f7ff ffda 	bl	8001b88 <MCI_GetOccurredFaults>
 8001bd4:	b140      	cbz	r0, 8001be8 <MCI_StopMotor+0x2c>
    RetVal = false;
 8001bd6:	2400      	movs	r4, #0
}
 8001bd8:	4620      	mov	r0, r4
 8001bda:	bd38      	pop	{r3, r4, r5, pc}
    status = false;
 8001bdc:	4604      	mov	r4, r0
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001bde:	4628      	mov	r0, r5
 8001be0:	f7ff ffd2 	bl	8001b88 <MCI_GetOccurredFaults>
 8001be4:	2800      	cmp	r0, #0
 8001be6:	d1f6      	bne.n	8001bd6 <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001be8:	4628      	mov	r0, r5
 8001bea:	f7ff ffcf 	bl	8001b8c <MCI_GetCurrentFaults>
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001bee:	2800      	cmp	r0, #0
 8001bf0:	d1f1      	bne.n	8001bd6 <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001bf2:	2c00      	cmp	r4, #0
 8001bf4:	d0ef      	beq.n	8001bd6 <MCI_StopMotor+0x1a>
    pHandle->DirectCommand = MCI_STOP;
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	762b      	strb	r3, [r5, #24]
    RetVal = true;
 8001bfa:	e7ed      	b.n	8001bd8 <MCI_StopMotor+0x1c>

08001bfc <MCI_FaultAcknowledged>:
{
 8001bfc:	b510      	push	{r4, lr}
 8001bfe:	4604      	mov	r4, r0
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001c00:	f7ff ffc0 	bl	8001b84 <MCI_GetSTMState>
 8001c04:	280b      	cmp	r0, #11
 8001c06:	d001      	beq.n	8001c0c <MCI_FaultAcknowledged+0x10>
    RetVal = false;
 8001c08:	2000      	movs	r0, #0
}
 8001c0a:	bd10      	pop	{r4, pc}
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f7ff ffbd 	bl	8001b8c <MCI_GetCurrentFaults>
 8001c12:	2800      	cmp	r0, #0
 8001c14:	d1f8      	bne.n	8001c08 <MCI_FaultAcknowledged+0xc>
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 8001c16:	2302      	movs	r3, #2
 8001c18:	7623      	strb	r3, [r4, #24]
    pHandle->PastFaults = MC_NO_FAULTS;
 8001c1a:	83a0      	strh	r0, [r4, #28]
    RetVal = true;
 8001c1c:	2001      	movs	r0, #1
}
 8001c1e:	bd10      	pop	{r4, pc}

08001c20 <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001c20:	8b83      	ldrh	r3, [r0, #28]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001c22:	8b40      	ldrh	r0, [r0, #26]

  return (LocalFaultState);
}
 8001c24:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop

08001c2c <MCI_GetControlMode>:
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8001c2c:	7fc0      	ldrb	r0, [r0, #31]
 8001c2e:	4770      	bx	lr

08001c30 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8001c30:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop

08001c38 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8001c38:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop

08001c40 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8001c40:	8ac0      	ldrh	r0, [r0, #22]
 8001c42:	4770      	bx	lr

08001c44 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001c44:	6800      	ldr	r0, [r0, #0]
 8001c46:	f008 b9bd 	b.w	8009fc4 <STC_StopRamp>
 8001c4a:	bf00      	nop

08001c4c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8001c4c:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8001c4e:	6800      	ldr	r0, [r0, #0]
 8001c50:	f008 f95e 	bl	8009f10 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
}
 8001c54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8001c58:	f008 b8fc 	b.w	8009e54 <SPD_GetAvrgMecSpeedUnit>

08001c5c <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8001c5c:	6800      	ldr	r0, [r0, #0]
 8001c5e:	f008 b961 	b.w	8009f24 <STC_GetMecSpeedRefUnit>
 8001c62:	bf00      	nop

08001c64 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8001c64:	6842      	ldr	r2, [r0, #4]
 8001c66:	6810      	ldr	r0, [r2, #0]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	b282      	uxth	r2, r0
 8001c6c:	f362 030f 	bfi	r3, r2, #0, #16
 8001c70:	0c00      	lsrs	r0, r0, #16
 8001c72:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001c76:	b082      	sub	sp, #8
#endif
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	b002      	add	sp, #8
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop

08001c80 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8001c80:	6842      	ldr	r2, [r0, #4]
 8001c82:	6850      	ldr	r0, [r2, #4]
 8001c84:	2300      	movs	r3, #0
 8001c86:	b282      	uxth	r2, r0
 8001c88:	f362 030f 	bfi	r3, r2, #0, #16
 8001c8c:	0c00      	lsrs	r0, r0, #16
 8001c8e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001c92:	b082      	sub	sp, #8
#endif
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	b002      	add	sp, #8
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop

08001c9c <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8001c9c:	6842      	ldr	r2, [r0, #4]
 8001c9e:	68d0      	ldr	r0, [r2, #12]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	b282      	uxth	r2, r0
 8001ca4:	f362 030f 	bfi	r3, r2, #0, #16
 8001ca8:	0c00      	lsrs	r0, r0, #16
 8001caa:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001cae:	b082      	sub	sp, #8
#endif
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	b002      	add	sp, #8
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop

08001cb8 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8001cb8:	6842      	ldr	r2, [r0, #4]
 8001cba:	6910      	ldr	r0, [r2, #16]
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	b282      	uxth	r2, r0
 8001cc0:	f362 030f 	bfi	r3, r2, #0, #16
 8001cc4:	0c00      	lsrs	r0, r0, #16
 8001cc6:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001cca:	b082      	sub	sp, #8
#endif
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	b002      	add	sp, #8
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop

08001cd4 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001cd4:	6842      	ldr	r2, [r0, #4]
 8001cd6:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	b282      	uxth	r2, r0
 8001cde:	f362 030f 	bfi	r3, r2, #0, #16
 8001ce2:	0c00      	lsrs	r0, r0, #16
 8001ce4:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001ce8:	b082      	sub	sp, #8
#endif
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	b002      	add	sp, #8
 8001cee:	4770      	bx	lr

08001cf0 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8001cf0:	6842      	ldr	r2, [r0, #4]
 8001cf2:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	b282      	uxth	r2, r0
 8001cfa:	f362 030f 	bfi	r3, r2, #0, #16
 8001cfe:	0c00      	lsrs	r0, r0, #16
 8001d00:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001d04:	b082      	sub	sp, #8
#endif
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	b002      	add	sp, #8
 8001d0a:	4770      	bx	lr

08001d0c <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001d0c:	6843      	ldr	r3, [r0, #4]
#endif
}
 8001d0e:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001d12:	4770      	bx	lr

08001d14 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8001d14:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 8001d16:	e9d0 0400 	ldrd	r0, r4, [r0]
 8001d1a:	f008 f985 	bl	800a028 <STC_GetDefaultIqdref>
 8001d1e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001d22:	8220      	strh	r0, [r4, #16]
 8001d24:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001d26:	bd10      	pop	{r4, pc}

08001d28 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001d28:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001d2c:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 8001d2e:	fb13 f201 	smulbb	r2, r3, r1
{
 8001d32:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001d36:	fb10 f101 	smulbb	r1, r0, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001d3a:	4250      	negs	r0, r2
 8001d3c:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8001d40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8001d44:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 8001d46:	da05      	bge.n	8001d54 <MCM_Clarke+0x2c>
 8001d48:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8001d4a:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8001d4e:	da0c      	bge.n	8001d6a <MCM_Clarke+0x42>
 8001d50:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <MCM_Clarke+0x50>)
 8001d52:	e001      	b.n	8001d58 <MCM_Clarke+0x30>
 8001d54:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
  }

  return (Output);
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f363 000f 	bfi	r0, r3, #0, #16
 8001d60:	b293      	uxth	r3, r2
 8001d62:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001d66:	b004      	add	sp, #16
 8001d68:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8001d6a:	4803      	ldr	r0, [pc, #12]	; (8001d78 <MCM_Clarke+0x50>)
 8001d6c:	b20a      	sxth	r2, r1
 8001d6e:	4282      	cmp	r2, r0
 8001d70:	bfb8      	it	lt
 8001d72:	4602      	movlt	r2, r0
 8001d74:	e7f0      	b.n	8001d58 <MCM_Clarke+0x30>
 8001d76:	bf00      	nop
 8001d78:	ffff8001 	.word	0xffff8001

08001d7c <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <MCM_Trig_Functions+0x28>)
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8001d7e:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001d82:	f04f 1260 	mov.w	r2, #6291552	; 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8001d86:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001d8a:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8001d8c:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001d8e:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule 11.4 A Conversion should not be performed between a 
   * pointer to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
 8001d90:	2000      	movs	r0, #0
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	f362 000f 	bfi	r0, r2, #0, #16
 8001d98:	0c1b      	lsrs	r3, r3, #16
{
 8001d9a:	b082      	sub	sp, #8
  return (CosSin.Components); //cstat !UNION-type-punning
 8001d9c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001da0:	b002      	add	sp, #8
 8001da2:	4770      	bx	lr
 8001da4:	40020c00 	.word	0x40020c00

08001da8 <MCM_Park>:
{
 8001da8:	b530      	push	{r4, r5, lr}
 8001daa:	b085      	sub	sp, #20
 8001dac:	4603      	mov	r3, r0
 8001dae:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001db0:	4608      	mov	r0, r1
 8001db2:	141c      	asrs	r4, r3, #16
{
 8001db4:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001db6:	f7ff ffe1 	bl	8001d7c <MCM_Trig_Functions>
 8001dba:	b22d      	sxth	r5, r5
 8001dbc:	fa0f fc80 	sxth.w	ip, r0
 8001dc0:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001dc2:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001dc6:	fb04 1113 	mls	r1, r4, r3, r1
  if (wqd_tmp > INT16_MAX)
 8001dca:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8001dce:	da05      	bge.n	8001ddc <MCM_Park+0x34>
 8001dd0:	13ca      	asrs	r2, r1, #15
  else if (wqd_tmp < (-32768))
 8001dd2:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001dd6:	da22      	bge.n	8001e1e <MCM_Park+0x76>
 8001dd8:	4914      	ldr	r1, [pc, #80]	; (8001e2c <MCM_Park+0x84>)
 8001dda:	e001      	b.n	8001de0 <MCM_Park+0x38>
 8001ddc:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8001de0:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001de4:	fb05 4403 	mla	r4, r5, r3, r4
  if (wqd_tmp > INT16_MAX)
 8001de8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001dec:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8001df0:	da04      	bge.n	8001dfc <MCM_Park+0x54>
  else if (wqd_tmp < (-32768))
 8001df2:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001df6:	da0c      	bge.n	8001e12 <MCM_Park+0x6a>
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <MCM_Park+0x84>)
 8001dfa:	e001      	b.n	8001e00 <MCM_Park+0x58>
 8001dfc:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 8001e00:	b28a      	uxth	r2, r1
 8001e02:	2000      	movs	r0, #0
 8001e04:	f362 000f 	bfi	r0, r2, #0, #16
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001e0e:	b005      	add	sp, #20
 8001e10:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8001e12:	4806      	ldr	r0, [pc, #24]	; (8001e2c <MCM_Park+0x84>)
 8001e14:	b213      	sxth	r3, r2
 8001e16:	4283      	cmp	r3, r0
 8001e18:	bfb8      	it	lt
 8001e1a:	4603      	movlt	r3, r0
 8001e1c:	e7f0      	b.n	8001e00 <MCM_Park+0x58>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001e1e:	4903      	ldr	r1, [pc, #12]	; (8001e2c <MCM_Park+0x84>)
 8001e20:	b212      	sxth	r2, r2
 8001e22:	4291      	cmp	r1, r2
 8001e24:	bfb8      	it	lt
 8001e26:	4611      	movlt	r1, r2
 8001e28:	e7da      	b.n	8001de0 <MCM_Park+0x38>
 8001e2a:	bf00      	nop
 8001e2c:	ffff8001 	.word	0xffff8001

08001e30 <MCM_Rev_Park>:
{
 8001e30:	b530      	push	{r4, r5, lr}
 8001e32:	b085      	sub	sp, #20
 8001e34:	4604      	mov	r4, r0
 8001e36:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001e38:	4608      	mov	r0, r1
{
 8001e3a:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001e3c:	f7ff ff9e 	bl	8001d7c <MCM_Trig_Functions>
 8001e40:	1424      	asrs	r4, r4, #16
 8001e42:	1402      	asrs	r2, r0, #16
 8001e44:	b22d      	sxth	r5, r5
 8001e46:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001e48:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8001e4c:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8001e50:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001e54:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8001e58:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f363 000f 	bfi	r0, r3, #0, #16
 8001e62:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001e66:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001e6a:	b005      	add	sp, #20
 8001e6c:	bd30      	pop	{r4, r5, pc}
 8001e6e:	bf00      	nop

08001e70 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8001e70:	2800      	cmp	r0, #0
 8001e72:	dd09      	ble.n	8001e88 <MCM_Sqrt+0x18>
 8001e74:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <MCM_Sqrt+0x1c>)
 8001e78:	f240 1269 	movw	r2, #361	; 0x169
 8001e7c:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8001e7e:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001e80:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001e82:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 8001e84:	b662      	cpsie	i
}
 8001e86:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8001e88:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8001e8a:	4770      	bx	lr
 8001e8c:	40020c00 	.word	0x40020c00

08001e90 <FOC_Clear>:
  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001e90:	2226      	movs	r2, #38	; 0x26
{
 8001e92:	b538      	push	{r3, r4, r5, lr}
 8001e94:	fb00 f202 	mul.w	r2, r0, r2
 8001e98:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	509c      	str	r4, [r3, r2]
{
 8001e9e:	4605      	mov	r5, r0
 8001ea0:	f102 0108 	add.w	r1, r2, #8
 8001ea4:	1898      	adds	r0, r3, r2
 8001ea6:	3210      	adds	r2, #16
 8001ea8:	4419      	add	r1, r3
 8001eaa:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001eac:	4a11      	ldr	r2, [pc, #68]	; (8001ef4 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001eae:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001eb0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001eb4:	604c      	str	r4, [r1, #4]
 8001eb6:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001eb8:	f8c3 4006 	str.w	r4, [r3, #6]
 8001ebc:	f8c3 400a 	str.w	r4, [r3, #10]
 8001ec0:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	f006 fec1 	bl	8008c4c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <FOC_Clear+0x68>)
 8001ecc:	4621      	mov	r1, r4
 8001ece:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001ed2:	f006 febb 	bl	8008c4c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <FOC_Clear+0x6c>)
 8001ed8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001edc:	f008 f81a 	bl	8009f14 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <FOC_Clear+0x70>)
 8001ee2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001eea:	f000 bd11 	b.w	8002910 <PWMC_SwitchOffPWM>
 8001eee:	bf00      	nop
 8001ef0:	20000770 	.word	0x20000770
 8001ef4:	20000348 	.word	0x20000348
 8001ef8:	20000344 	.word	0x20000344
 8001efc:	2000034c 	.word	0x2000034c
 8001f00:	200007a0 	.word	0x200007a0

08001f04 <MCboot>:
  if (MC_NULL == pMCIList)
 8001f04:	2800      	cmp	r0, #0
 8001f06:	d05f      	beq.n	8001fc8 <MCboot+0xc4>
{
 8001f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bMCBootCompleted = (uint8_t )0;
 8001f0c:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8002000 <MCboot+0xfc>
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001f10:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8002004 <MCboot+0x100>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 8001f14:	4d2d      	ldr	r5, [pc, #180]	; (8001fcc <MCboot+0xc8>)
    RVBS_Init(&BusVoltageSensor_M1);
 8001f16:	4e2e      	ldr	r6, [pc, #184]	; (8001fd0 <MCboot+0xcc>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001f18:	4f2e      	ldr	r7, [pc, #184]	; (8001fd4 <MCboot+0xd0>)
{
 8001f1a:	b083      	sub	sp, #12
    bMCBootCompleted = (uint8_t )0;
 8001f1c:	f04f 0800 	mov.w	r8, #0
 8001f20:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001f22:	482d      	ldr	r0, [pc, #180]	; (8001fd8 <MCboot+0xd4>)
 8001f24:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 8001f28:	f889 8000 	strb.w	r8, [r9]
    R3_2_Init(&PWM_Handle_M1);
 8001f2c:	f007 faca 	bl	80094c4 <R3_2_Init>
    ASPEP_start(&aspepOverUartA);
 8001f30:	482a      	ldr	r0, [pc, #168]	; (8001fdc <MCboot+0xd8>)
 8001f32:	f7fe fb21 	bl	8000578 <ASPEP_start>
    startTimers();
 8001f36:	f006 ff31 	bl	8008d9c <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001f3a:	4829      	ldr	r0, [pc, #164]	; (8001fe0 <MCboot+0xdc>)
 8001f3c:	f006 fe72 	bl	8008c24 <PID_HandleInit>
    HALL_Init (&HALL_M1);
 8001f40:	4828      	ldr	r0, [pc, #160]	; (8001fe4 <MCboot+0xe0>)
 8001f42:	f7fe fe75 	bl	8000c30 <HALL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &HALL_M1._Super);
 8001f46:	4a27      	ldr	r2, [pc, #156]	; (8001fe4 <MCboot+0xe0>)
 8001f48:	4925      	ldr	r1, [pc, #148]	; (8001fe0 <MCboot+0xdc>)
 8001f4a:	6828      	ldr	r0, [r5, #0]
 8001f4c:	f007 ffca 	bl	8009ee4 <STC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001f50:	4825      	ldr	r0, [pc, #148]	; (8001fe8 <MCboot+0xe4>)
 8001f52:	f006 fe67 	bl	8008c24 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8001f56:	4825      	ldr	r0, [pc, #148]	; (8001fec <MCboot+0xe8>)
 8001f58:	f006 fe64 	bl	8008c24 <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 8001f5c:	4630      	mov	r0, r6
 8001f5e:	f007 ff07 	bl	8009d70 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001f62:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <MCboot+0xec>)
    NTC_Init(&TempSensor_M1);
 8001f64:	4823      	ldr	r0, [pc, #140]	; (8001ff4 <MCboot+0xf0>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001f6a:	4e23      	ldr	r6, [pc, #140]	; (8001ff8 <MCboot+0xf4>)
 8001f6c:	609e      	str	r6, [r3, #8]
    NTC_Init(&TempSensor_M1);
 8001f6e:	f006 fe19 	bl	8008ba4 <NTC_Init>
    REMNG_Init(pREMNG[M1]);
 8001f72:	4822      	ldr	r0, [pc, #136]	; (8001ffc <MCboot+0xf8>)
 8001f74:	f007 ff62 	bl	8009e3c <REMNG_Init>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001f78:	f04f 0a01 	mov.w	sl, #1
    FOC_Clear(M1);
 8001f7c:	4640      	mov	r0, r8
 8001f7e:	f7ff ff87 	bl	8001e90 <FOC_Clear>
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001f82:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001f84:	f886 a024 	strb.w	sl, [r6, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001f88:	f008 f84e 	bl	800a028 <STC_GetDefaultIqdref>
 8001f8c:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001f8e:	6828      	ldr	r0, [r5, #0]
 8001f90:	f008 f84a 	bl	800a028 <STC_GetDefaultIqdref>
 8001f94:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001f98:	f8db 3000 	ldr.w	r3, [fp]
 8001f9c:	6829      	ldr	r1, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001f9e:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001fa0:	4632      	mov	r2, r6
 8001fa2:	4638      	mov	r0, r7
 8001fa4:	f7ff fd78 	bl	8001a98 <MCI_Init>
    MCI_ExecSpeedRamp(&Mci[M1],
 8001fa8:	6828      	ldr	r0, [r5, #0]
 8001faa:	f008 f839 	bl	800a020 <STC_GetMecSpeedRefUnitDefault>
 8001fae:	4642      	mov	r2, r8
 8001fb0:	4601      	mov	r1, r0
 8001fb2:	4638      	mov	r0, r7
 8001fb4:	f7ff fd82 	bl	8001abc <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 8001fb8:	6027      	str	r7, [r4, #0]
    MC_APP_BootHook();
 8001fba:	f7ff fd69 	bl	8001a90 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8001fbe:	f889 a000 	strb.w	sl, [r9]
}
 8001fc2:	b003      	add	sp, #12
 8001fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	2000034c 	.word	0x2000034c
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	20000744 	.word	0x20000744
 8001fd8:	2000023c 	.word	0x2000023c
 8001fdc:	200003b4 	.word	0x200003b4
 8001fe0:	20000200 	.word	0x20000200
 8001fe4:	200000e0 	.word	0x200000e0
 8001fe8:	200001d4 	.word	0x200001d4
 8001fec:	200001a8 	.word	0x200001a8
 8001ff0:	20000340 	.word	0x20000340
 8001ff4:	20000318 	.word	0x20000318
 8001ff8:	20000770 	.word	0x20000770
 8001ffc:	200002cc 	.word	0x200002cc
 8002000:	20000796 	.word	0x20000796
 8002004:	200007a0 	.word	0x200007a0

08002008 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop

0800200c <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 800200c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 800200e:	4c08      	ldr	r4, [pc, #32]	; (8002030 <FOC_CalcCurrRef+0x24>)
 8002010:	2326      	movs	r3, #38	; 0x26
 8002012:	fb03 4400 	mla	r4, r3, r0, r4
 8002016:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800201a:	b103      	cbz	r3, 800201e <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 800201c:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <FOC_CalcCurrRef+0x28>)
 8002020:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002024:	f007 ffd2 	bl	8009fcc <STC_CalcTorqueReference>
 8002028:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800202a:	8220      	strh	r0, [r4, #16]
}
 800202c:	bd10      	pop	{r4, pc}
 800202e:	bf00      	nop
 8002030:	20000770 	.word	0x20000770
 8002034:	2000034c 	.word	0x2000034c

08002038 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8002038:	4b01      	ldr	r3, [pc, #4]	; (8002040 <TSK_SetChargeBootCapDelayM1+0x8>)
 800203a:	8018      	strh	r0, [r3, #0]
}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000798 	.word	0x20000798

08002044 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8002046:	8818      	ldrh	r0, [r3, #0]
 8002048:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800204a:	fab0 f080 	clz	r0, r0
 800204e:	0940      	lsrs	r0, r0, #5
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000798 	.word	0x20000798

08002058 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8002058:	4b01      	ldr	r3, [pc, #4]	; (8002060 <TSK_SetStopPermanencyTimeM1+0x8>)
 800205a:	8018      	strh	r0, [r3, #0]
}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	2000079c 	.word	0x2000079c

08002064 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8002066:	8818      	ldrh	r0, [r3, #0]
 8002068:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800206a:	fab0 f080 	clz	r0, r0
 800206e:	0940      	lsrs	r0, r0, #5
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	2000079c 	.word	0x2000079c

08002078 <TSK_MediumFrequencyTaskM1>:
{
 8002078:	b570      	push	{r4, r5, r6, lr}
 800207a:	b082      	sub	sp, #8
  int16_t wAux = 0;
 800207c:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 800207e:	f10d 0106 	add.w	r1, sp, #6
 8002082:	4866      	ldr	r0, [pc, #408]	; (800221c <TSK_MediumFrequencyTaskM1+0x1a4>)
  int16_t wAux = 0;
 8002084:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 8002088:	f7fe ff28 	bl	8000edc <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 800208c:	4e64      	ldr	r6, [pc, #400]	; (8002220 <TSK_MediumFrequencyTaskM1+0x1a8>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 800208e:	4c65      	ldr	r4, [pc, #404]	; (8002224 <TSK_MediumFrequencyTaskM1+0x1ac>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit(&HALL_M1, &wAux);
 8002090:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8002092:	6830      	ldr	r0, [r6, #0]
 8002094:	f006 fe52 	bl	8008d3c <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002098:	4620      	mov	r0, r4
 800209a:	f7ff fd77 	bl	8001b8c <MCI_GetCurrentFaults>
 800209e:	b118      	cbz	r0, 80020a8 <TSK_MediumFrequencyTaskM1+0x30>
    Mci[M1].State = FAULT_NOW;
 80020a0:	230a      	movs	r3, #10
 80020a2:	7663      	strb	r3, [r4, #25]
}
 80020a4:	b002      	add	sp, #8
 80020a6:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 80020a8:	4620      	mov	r0, r4
 80020aa:	f7ff fd6d 	bl	8001b88 <MCI_GetOccurredFaults>
 80020ae:	bb48      	cbnz	r0, 8002104 <TSK_MediumFrequencyTaskM1+0x8c>
      switch (Mci[M1].State)
 80020b0:	7e63      	ldrb	r3, [r4, #25]
 80020b2:	2b11      	cmp	r3, #17
 80020b4:	d8f6      	bhi.n	80020a4 <TSK_MediumFrequencyTaskM1+0x2c>
 80020b6:	a201      	add	r2, pc, #4	; (adr r2, 80020bc <TSK_MediumFrequencyTaskM1+0x44>)
 80020b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020bc:	080021bd 	.word	0x080021bd
 80020c0:	080020a5 	.word	0x080020a5
 80020c4:	080020a5 	.word	0x080020a5
 80020c8:	080020a5 	.word	0x080020a5
 80020cc:	080020a5 	.word	0x080020a5
 80020d0:	080020a5 	.word	0x080020a5
 80020d4:	08002199 	.word	0x08002199
 80020d8:	080020a5 	.word	0x080020a5
 80020dc:	0800218f 	.word	0x0800218f
 80020e0:	080020a5 	.word	0x080020a5
 80020e4:	08002105 	.word	0x08002105
 80020e8:	08002183 	.word	0x08002183
 80020ec:	080020a5 	.word	0x080020a5
 80020f0:	080020a5 	.word	0x080020a5
 80020f4:	080020a5 	.word	0x080020a5
 80020f8:	080020a5 	.word	0x080020a5
 80020fc:	0800213b 	.word	0x0800213b
 8002100:	0800210d 	.word	0x0800210d
      Mci[M1].State = FAULT_OVER;
 8002104:	230b      	movs	r3, #11
 8002106:	7663      	strb	r3, [r4, #25]
}
 8002108:	b002      	add	sp, #8
 800210a:	bd70      	pop	{r4, r5, r6, pc}
            if (MCI_STOP == Mci[M1].DirectCommand)
 800210c:	7e23      	ldrb	r3, [r4, #24]
 800210e:	2b05      	cmp	r3, #5
 8002110:	d064      	beq.n	80021dc <TSK_MediumFrequencyTaskM1+0x164>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8002112:	4d45      	ldr	r5, [pc, #276]	; (8002228 <TSK_MediumFrequencyTaskM1+0x1b0>)
 8002114:	2101      	movs	r1, #1
 8002116:	6828      	ldr	r0, [r5, #0]
 8002118:	f000 fbfe 	bl	8002918 <PWMC_CurrentReadingCalibr>
 800211c:	2800      	cmp	r0, #0
 800211e:	d0c1      	beq.n	80020a4 <TSK_MediumFrequencyTaskM1+0x2c>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8002120:	7e23      	ldrb	r3, [r4, #24]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d071      	beq.n	800220a <TSK_MediumFrequencyTaskM1+0x192>
                  R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8002126:	6828      	ldr	r0, [r5, #0]
 8002128:	2100      	movs	r1, #0
 800212a:	f007 f81b 	bl	8009164 <R3_2_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 800212e:	2014      	movs	r0, #20
 8002130:	f7ff ff82 	bl	8002038 <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 8002134:	2310      	movs	r3, #16
 8002136:	7663      	strb	r3, [r4, #25]
 8002138:	e7b4      	b.n	80020a4 <TSK_MediumFrequencyTaskM1+0x2c>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800213a:	7e23      	ldrb	r3, [r4, #24]
 800213c:	2b05      	cmp	r3, #5
 800213e:	d04d      	beq.n	80021dc <TSK_MediumFrequencyTaskM1+0x164>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8002140:	f7ff ff80 	bl	8002044 <TSK_ChargeBootCapDelayHasElapsedM1>
 8002144:	2800      	cmp	r0, #0
 8002146:	d0ad      	beq.n	80020a4 <TSK_MediumFrequencyTaskM1+0x2c>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8002148:	4d37      	ldr	r5, [pc, #220]	; (8002228 <TSK_MediumFrequencyTaskM1+0x1b0>)
 800214a:	6828      	ldr	r0, [r5, #0]
 800214c:	f007 f87e 	bl	800924c <R3_2_SwitchOffPWM>
              HALL_Clear(&HALL_M1);
 8002150:	4832      	ldr	r0, [pc, #200]	; (800221c <TSK_MediumFrequencyTaskM1+0x1a4>)
 8002152:	f7fe fdf9 	bl	8000d48 <HALL_Clear>
              FOC_Clear( M1 );
 8002156:	2000      	movs	r0, #0
 8002158:	f7ff fe9a 	bl	8001e90 <FOC_Clear>
              FOC_InitAdditionalMethods(M1);
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff ff53 	bl	8002008 <FOC_InitAdditionalMethods>
              FOC_CalcCurrRef(M1);
 8002162:	2000      	movs	r0, #0
 8002164:	f7ff ff52 	bl	800200c <FOC_CalcCurrRef>
              STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1]); /* Init the reference speed to current speed */
 8002168:	4b30      	ldr	r3, [pc, #192]	; (800222c <TSK_MediumFrequencyTaskM1+0x1b4>)
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	f007 ff6a 	bl	800a044 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands( &Mci[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8002170:	482c      	ldr	r0, [pc, #176]	; (8002224 <TSK_MediumFrequencyTaskM1+0x1ac>)
 8002172:	f7ff fccd 	bl	8001b10 <MCI_ExecBufferedCommands>
              Mci[M1].State = RUN;
 8002176:	2306      	movs	r3, #6
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8002178:	6828      	ldr	r0, [r5, #0]
              Mci[M1].State = RUN;
 800217a:	7663      	strb	r3, [r4, #25]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 800217c:	f000 fbca 	bl	8002914 <PWMC_SwitchOnPWM>
 8002180:	e790      	b.n	80020a4 <TSK_MediumFrequencyTaskM1+0x2c>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8002182:	7e23      	ldrb	r3, [r4, #24]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d18d      	bne.n	80020a4 <TSK_MediumFrequencyTaskM1+0x2c>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002188:	2300      	movs	r3, #0
 800218a:	8323      	strh	r3, [r4, #24]
 800218c:	e78a      	b.n	80020a4 <TSK_MediumFrequencyTaskM1+0x2c>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 800218e:	f7ff ff69 	bl	8002064 <TSK_StopPermanencyTimeHasElapsedM1>
 8002192:	2800      	cmp	r0, #0
 8002194:	d086      	beq.n	80020a4 <TSK_MediumFrequencyTaskM1+0x2c>
 8002196:	e7f7      	b.n	8002188 <TSK_MediumFrequencyTaskM1+0x110>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002198:	7e23      	ldrb	r3, [r4, #24]
 800219a:	2b05      	cmp	r3, #5
 800219c:	d01e      	beq.n	80021dc <TSK_MediumFrequencyTaskM1+0x164>
            MCI_ExecBufferedCommands(&Mci[M1]);
 800219e:	4821      	ldr	r0, [pc, #132]	; (8002224 <TSK_MediumFrequencyTaskM1+0x1ac>)
 80021a0:	f7ff fcb6 	bl	8001b10 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 80021a4:	2000      	movs	r0, #0
 80021a6:	f7ff ff31 	bl	800200c <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 80021aa:	2d00      	cmp	r5, #0
 80021ac:	f47f af7a 	bne.w	80020a4 <TSK_MediumFrequencyTaskM1+0x2c>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 80021b0:	481c      	ldr	r0, [pc, #112]	; (8002224 <TSK_MediumFrequencyTaskM1+0x1ac>)
 80021b2:	462a      	mov	r2, r5
 80021b4:	2120      	movs	r1, #32
 80021b6:	f7ff fc9f 	bl	8001af8 <MCI_FaultProcessing>
 80021ba:	e773      	b.n	80020a4 <TSK_MediumFrequencyTaskM1+0x2c>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 80021bc:	7e23      	ldrb	r3, [r4, #24]
 80021be:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	f47f af6e 	bne.w	80020a4 <TSK_MediumFrequencyTaskM1+0x2c>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 80021c8:	4d17      	ldr	r5, [pc, #92]	; (8002228 <TSK_MediumFrequencyTaskM1+0x1b0>)
 80021ca:	6828      	ldr	r0, [r5, #0]
 80021cc:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
 80021d0:	b9a9      	cbnz	r1, 80021fe <TSK_MediumFrequencyTaskM1+0x186>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 80021d2:	f000 fba1 	bl	8002918 <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 80021d6:	2311      	movs	r3, #17
 80021d8:	7663      	strb	r3, [r4, #25]
 80021da:	e763      	b.n	80020a4 <TSK_MediumFrequencyTaskM1+0x2c>
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <TSK_MediumFrequencyTaskM1+0x1b0>)
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	f007 f834 	bl	800924c <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7ff fe53 	bl	8001e90 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 80021ea:	6830      	ldr	r0, [r6, #0]
 80021ec:	f006 fdc0 	bl	8008d70 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 80021f0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80021f4:	f7ff ff30 	bl	8002058 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 80021f8:	2308      	movs	r3, #8
 80021fa:	7663      	strb	r3, [r4, #25]
  return;
 80021fc:	e752      	b.n	80020a4 <TSK_MediumFrequencyTaskM1+0x2c>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80021fe:	4619      	mov	r1, r3
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8002200:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8002204:	f000 fb88 	bl	8002918 <PWMC_CurrentReadingCalibr>
             R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8002208:	e78d      	b.n	8002126 <TSK_MediumFrequencyTaskM1+0xae>
                  FOC_Clear(M1);
 800220a:	2000      	movs	r0, #0
 800220c:	f7ff fe40 	bl	8001e90 <FOC_Clear>
                  PQD_Clear(pMPM[M1]);
 8002210:	6830      	ldr	r0, [r6, #0]
 8002212:	f006 fdad 	bl	8008d70 <PQD_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002216:	2300      	movs	r3, #0
 8002218:	8323      	strh	r3, [r4, #24]
 800221a:	e743      	b.n	80020a4 <TSK_MediumFrequencyTaskM1+0x2c>
 800221c:	200000e0 	.word	0x200000e0
 8002220:	20000340 	.word	0x20000340
 8002224:	20000744 	.word	0x20000744
 8002228:	200007a0 	.word	0x200007a0
 800222c:	2000034c 	.word	0x2000034c

08002230 <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <MC_Scheduler+0x78>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d000      	beq.n	800223a <MC_Scheduler+0xa>
 8002238:	4770      	bx	lr
{
 800223a:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 800223c:	4c1b      	ldr	r4, [pc, #108]	; (80022ac <MC_Scheduler+0x7c>)
 800223e:	8823      	ldrh	r3, [r4, #0]
 8002240:	b193      	cbz	r3, 8002268 <MC_Scheduler+0x38>
      hMFTaskCounterM1--;
 8002242:	3b01      	subs	r3, #1
 8002244:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8002246:	4a1a      	ldr	r2, [pc, #104]	; (80022b0 <MC_Scheduler+0x80>)
 8002248:	8813      	ldrh	r3, [r2, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	b11b      	cbz	r3, 8002256 <MC_Scheduler+0x26>
      hBootCapDelayCounterM1--;
 800224e:	8813      	ldrh	r3, [r2, #0]
 8002250:	3b01      	subs	r3, #1
 8002252:	b29b      	uxth	r3, r3
 8002254:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8002256:	4a17      	ldr	r2, [pc, #92]	; (80022b4 <MC_Scheduler+0x84>)
 8002258:	8813      	ldrh	r3, [r2, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	b11b      	cbz	r3, 8002266 <MC_Scheduler+0x36>
      hStopPermanencyCounterM1--;
 800225e:	8813      	ldrh	r3, [r2, #0]
 8002260:	3b01      	subs	r3, #1
 8002262:	b29b      	uxth	r3, r3
 8002264:	8013      	strh	r3, [r2, #0]
}
 8002266:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002268:	4d13      	ldr	r5, [pc, #76]	; (80022b8 <MC_Scheduler+0x88>)
      TSK_MediumFrequencyTaskM1();
 800226a:	f7ff ff05 	bl	8002078 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 800226e:	f7ff fc11 	bl	8001a94 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002272:	4629      	mov	r1, r5
 8002274:	f851 0b0c 	ldr.w	r0, [r1], #12
 8002278:	6883      	ldr	r3, [r0, #8]
 800227a:	4798      	blx	r3
 800227c:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 800227e:	b130      	cbz	r0, 800228e <MC_Scheduler+0x5e>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8002280:	4629      	mov	r1, r5
 8002282:	220a      	movs	r2, #10
 8002284:	f851 0b08 	ldr.w	r0, [r1], #8
 8002288:	6803      	ldr	r3, [r0, #0]
 800228a:	4798      	blx	r3
 800228c:	b910      	cbnz	r0, 8002294 <MC_Scheduler+0x64>
      hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 800228e:	2301      	movs	r3, #1
 8002290:	8023      	strh	r3, [r4, #0]
 8002292:	e7d8      	b.n	8002246 <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8002294:	4628      	mov	r0, r5
 8002296:	f006 fa47 	bl	8008728 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 800229a:	6828      	ldr	r0, [r5, #0]
 800229c:	89ea      	ldrh	r2, [r5, #14]
 800229e:	6846      	ldr	r6, [r0, #4]
 80022a0:	68a9      	ldr	r1, [r5, #8]
 80022a2:	230a      	movs	r3, #10
 80022a4:	47b0      	blx	r6
 80022a6:	e7f2      	b.n	800228e <MC_Scheduler+0x5e>
 80022a8:	20000796 	.word	0x20000796
 80022ac:	2000079a 	.word	0x2000079a
 80022b0:	20000798 	.word	0x20000798
 80022b4:	2000079c 	.word	0x2000079c
 80022b8:	20000390 	.word	0x20000390

080022bc <MC_RunMotorControlTasks>:
{
 80022bc:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 80022be:	4b03      	ldr	r3, [pc, #12]	; (80022cc <MC_RunMotorControlTasks+0x10>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b903      	cbnz	r3, 80022c6 <MC_RunMotorControlTasks+0xa>
}
 80022c4:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 80022c6:	f7ff ffb3 	bl	8002230 <MC_Scheduler>
}
 80022ca:	bd08      	pop	{r3, pc}
 80022cc:	20000796 	.word	0x20000796

080022d0 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80022d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint16_t hFOCreturn;
  uint8_t bMotorNbr = 0;

  (void)HALL_CalcElAngle(&HALL_M1);
 80022d4:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8002408 <TSK_HighFrequencyTask+0x138>
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80022d8:	4e41      	ldr	r6, [pc, #260]	; (80023e0 <TSK_HighFrequencyTask+0x110>)
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
//  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Iqd = MCM_Park(Ialphabeta, hVolAngle);	//for test
 80022da:	4d42      	ldr	r5, [pc, #264]	; (80023e4 <TSK_HighFrequencyTask+0x114>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80022dc:	4c42      	ldr	r4, [pc, #264]	; (80023e8 <TSK_HighFrequencyTask+0x118>)
{
 80022de:	b086      	sub	sp, #24
  (void)HALL_CalcElAngle(&HALL_M1);
 80022e0:	4648      	mov	r0, r9
 80022e2:	f7fe fddd 	bl	8000ea0 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80022e6:	4b41      	ldr	r3, [pc, #260]	; (80023ec <TSK_HighFrequencyTask+0x11c>)
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	f007 fe11 	bl	8009f10 <STC_GetSpeedSensor>
 80022ee:	4680      	mov	r8, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80022f0:	f007 fdac 	bl	8009e4c <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80022f4:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 80022f6:	4607      	mov	r7, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80022f8:	6830      	ldr	r0, [r6, #0]
 80022fa:	f000 f9bb 	bl	8002674 <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 80022fe:	f001 fc65 	bl	8003bcc <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8002302:	f001 fc13 	bl	8003b2c <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8002306:	9803      	ldr	r0, [sp, #12]
 8002308:	f7ff fd0e 	bl	8001d28 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hVolAngle);	//for test
 800230c:	8829      	ldrh	r1, [r5, #0]
  Ialphabeta = MCM_Clarke(Iab);
 800230e:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hVolAngle);	//for test
 8002310:	b209      	sxth	r1, r1
 8002312:	f7ff fd49 	bl	8001da8 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002316:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <TSK_HighFrequencyTask+0x120>)
  Iqd = MCM_Park(Ialphabeta, hVolAngle);	//for test
 8002318:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800231a:	b201      	sxth	r1, r0
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8002322:	1a59      	subs	r1, r3, r1
 8002324:	f006 fcc4 	bl	8008cb0 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002328:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800232c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8002330:	1ac9      	subs	r1, r1, r3
 8002332:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <TSK_HighFrequencyTask+0x124>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002334:	4682      	mov	sl, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	f006 fcba 	bl	8008cb0 <PI_Controller>
  // Vqd.q = 10000;
  // Vqd.d = 0;
   hVolAngle += (int16_t)(10 * (int32_t)HALL_M1._Super.DPPConvFactor /
 800233c:	f8d9 301c 	ldr.w	r3, [r9, #28]
                           (SPEED_UNIT * (int32_t)HALL_M1._Super.hMeasurementFrequency));
 8002340:	f8b9 201a 	ldrh.w	r2, [r9, #26]
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002344:	f8ad 000a 	strh.w	r0, [sp, #10]
   hVolAngle += (int16_t)(10 * (int32_t)HALL_M1._Super.DPPConvFactor /
 8002348:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                           (SPEED_UNIT * (int32_t)HALL_M1._Super.hMeasurementFrequency));
 800234c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002350:	0052      	lsls	r2, r2, #1
   hVolAngle += (int16_t)(10 * (int32_t)HALL_M1._Super.DPPConvFactor /
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fb93 f3f2 	sdiv	r3, r3, r2
 8002358:	882a      	ldrh	r2, [r5, #0]
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 800235a:	f8ad a008 	strh.w	sl, [sp, #8]
   hVolAngle += (int16_t)(10 * (int32_t)HALL_M1._Super.DPPConvFactor /
 800235e:	4413      	add	r3, r2
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002360:	9902      	ldr	r1, [sp, #8]
 8002362:	4825      	ldr	r0, [pc, #148]	; (80023f8 <TSK_HighFrequencyTask+0x128>)
   hVolAngle += (int16_t)(10 * (int32_t)HALL_M1._Super.DPPConvFactor /
 8002364:	b21b      	sxth	r3, r3
 8002366:	802b      	strh	r3, [r5, #0]
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002368:	f006 f9ae 	bl	80086c8 <Circle_Limitation>
 800236c:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800236e:	4640      	mov	r0, r8
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002370:	9302      	str	r3, [sp, #8]
 8002372:	ea4f 4823 	mov.w	r8, r3, asr #16
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8002376:	f007 fd71 	bl	8009e5c <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hVolAngle);
 800237a:	8829      	ldrh	r1, [r5, #0]
 800237c:	9802      	ldr	r0, [sp, #8]
 800237e:	b209      	sxth	r1, r1
 8002380:	f7ff fd56 	bl	8001e30 <MCM_Rev_Park>
 8002384:	4601      	mov	r1, r0
//  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002386:	6830      	ldr	r0, [r6, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hVolAngle);
 8002388:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800238a:	f000 f975 	bl	8002678 <PWMC_SetPhaseVoltage>
  // Vqd.d = CntPhA;
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Vqd.q = hVolAngle;	//for test by maskluo
 800238e:	882a      	ldrh	r2, [r5, #0]
  FOCVars[M1].Iab = Iab;
 8002390:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Vqd.q = hVolAngle;	//for test by maskluo
 8002392:	82e2      	strh	r2, [r4, #22]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002394:	4601      	mov	r1, r0
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002396:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 8002398:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Iab = Iab;
 800239a:	6023      	str	r3, [r4, #0]
  if(hFOCreturn == MC_DURATION)
 800239c:	2901      	cmp	r1, #1
  FOCVars[M1].Iqd = Iqd;
 800239e:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Vqd = Vqd;
 80023a0:	f8a4 8018 	strh.w	r8, [r4, #24]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80023a4:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80023a6:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 80023a8:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 80023ac:	8427      	strh	r7, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 80023ae:	d011      	beq.n	80023d4 <TSK_HighFrequencyTask+0x104>
  GLOBAL_TIMESTAMP++;
 80023b0:	4a12      	ldr	r2, [pc, #72]	; (80023fc <TSK_HighFrequencyTask+0x12c>)
  if (0U == MCPA_UART_A.Mark)
 80023b2:	4813      	ldr	r0, [pc, #76]	; (8002400 <TSK_HighFrequencyTask+0x130>)
  GLOBAL_TIMESTAMP++;
 80023b4:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 80023b6:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 80023ba:	3301      	adds	r3, #1
 80023bc:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 80023be:	b919      	cbnz	r1, 80023c8 <TSK_HighFrequencyTask+0xf8>
}
 80023c0:	2000      	movs	r0, #0
 80023c2:	b006      	add	sp, #24
 80023c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    MCPA_dataLog (&MCPA_UART_A);
 80023c8:	f006 fa72 	bl	80088b0 <MCPA_dataLog>
}
 80023cc:	2000      	movs	r0, #0
 80023ce:	b006      	add	sp, #24
 80023d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 80023d4:	480b      	ldr	r0, [pc, #44]	; (8002404 <TSK_HighFrequencyTask+0x134>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	f7ff fb8e 	bl	8001af8 <MCI_FaultProcessing>
 80023dc:	e7e8      	b.n	80023b0 <TSK_HighFrequencyTask+0xe0>
 80023de:	bf00      	nop
 80023e0:	200007a0 	.word	0x200007a0
 80023e4:	2000079e 	.word	0x2000079e
 80023e8:	20000770 	.word	0x20000770
 80023ec:	2000034c 	.word	0x2000034c
 80023f0:	20000348 	.word	0x20000348
 80023f4:	20000344 	.word	0x20000344
 80023f8:	2000002c 	.word	0x2000002c
 80023fc:	20002730 	.word	0x20002730
 8002400:	20000364 	.word	0x20000364
 8002404:	20000744 	.word	0x20000744
 8002408:	200000e0 	.word	0x200000e0

0800240c <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 800240c:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800240e:	4b1f      	ldr	r3, [pc, #124]	; (800248c <TSK_SafetyTask_PWMOFF+0x80>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002410:	4e1f      	ldr	r6, [pc, #124]	; (8002490 <TSK_SafetyTask_PWMOFF+0x84>)
{
 8002412:	b082      	sub	sp, #8
 8002414:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002416:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800241a:	f006 fbd5 	bl	8008bc8 <NTC_CalcAvTemp>
 800241e:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002420:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002424:	f000 fa9c 	bl	8002960 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002428:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800242c:	4328      	orrs	r0, r5
 800242e:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 8002430:	b174      	cbz	r4, 8002450 <TSK_SafetyTask_PWMOFF+0x44>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 8002432:	4818      	ldr	r0, [pc, #96]	; (8002494 <TSK_SafetyTask_PWMOFF+0x88>)
 8002434:	43ea      	mvns	r2, r5
 8002436:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 800243a:	b292      	uxth	r2, r2
 800243c:	4629      	mov	r1, r5
 800243e:	9001      	str	r0, [sp, #4]
 8002440:	f7ff fb5a 	bl	8001af8 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8002444:	9801      	ldr	r0, [sp, #4]
 8002446:	f7ff fbeb 	bl	8001c20 <MCI_GetFaultState>
 800244a:	b940      	cbnz	r0, 800245e <TSK_SafetyTask_PWMOFF+0x52>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800244c:	b002      	add	sp, #8
 800244e:	bd70      	pop	{r4, r5, r6, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8002450:	4811      	ldr	r0, [pc, #68]	; (8002498 <TSK_SafetyTask_PWMOFF+0x8c>)
 8002452:	f007 fcbf 	bl	8009dd4 <RVBS_CalcAvVbus>
 8002456:	f000 000e 	and.w	r0, r0, #14
 800245a:	4305      	orrs	r5, r0
 800245c:	e7e9      	b.n	8002432 <TSK_SafetyTask_PWMOFF+0x26>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800245e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002462:	f000 fa55 	bl	8002910 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8002466:	480d      	ldr	r0, [pc, #52]	; (800249c <TSK_SafetyTask_PWMOFF+0x90>)
 8002468:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800246c:	b953      	cbnz	r3, 8002484 <TSK_SafetyTask_PWMOFF+0x78>
    FOC_Clear(bMotor);
 800246e:	4620      	mov	r0, r4
 8002470:	f7ff fd0e 	bl	8001e90 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <TSK_SafetyTask_PWMOFF+0x94>)
 8002476:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800247a:	b002      	add	sp, #8
 800247c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8002480:	f006 bc76 	b.w	8008d70 <PQD_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 8002484:	f006 fad8 	bl	8008a38 <MCPA_flushDataLog>
 8002488:	e7f1      	b.n	800246e <TSK_SafetyTask_PWMOFF+0x62>
 800248a:	bf00      	nop
 800248c:	20000350 	.word	0x20000350
 8002490:	200007a0 	.word	0x200007a0
 8002494:	20000744 	.word	0x20000744
 8002498:	20000000 	.word	0x20000000
 800249c:	20000364 	.word	0x20000364
 80024a0:	20000340 	.word	0x20000340

080024a4 <TSK_SafetyTask>:
{
 80024a4:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <TSK_SafetyTask+0x1c>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d000      	beq.n	80024b0 <TSK_SafetyTask+0xc>
}
 80024ae:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7ff ffab 	bl	800240c <TSK_SafetyTask_PWMOFF>
}
 80024b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 80024ba:	f001 bb07 	b.w	8003acc <RCM_ExecUserConv>
 80024be:	bf00      	nop
 80024c0:	20000796 	.word	0x20000796

080024c4 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80024c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <TSK_HardwareFaultTask+0x18>)
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	f006 febf 	bl	800924c <R3_2_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80024ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80024d2:	4803      	ldr	r0, [pc, #12]	; (80024e0 <TSK_HardwareFaultTask+0x1c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	2180      	movs	r1, #128	; 0x80
 80024d8:	f7ff bb0e 	b.w	8001af8 <MCI_FaultProcessing>
 80024dc:	200007a0 	.word	0x200007a0
 80024e0:	20000744 	.word	0x20000744

080024e4 <startMediumFrequencyTask>:

/* startMediumFrequencyTask function */
void startMediumFrequencyTask(void const * argument)
{
 80024e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MF task 1 */
  /* Infinite loop */
  for (;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 80024e6:	2001      	movs	r0, #1
 80024e8:	f005 ff72 	bl	80083d0 <vTaskDelay>
    MC_RunMotorControlTasks();
 80024ec:	f7ff fee6 	bl	80022bc <MC_RunMotorControlTasks>
  for (;;)
 80024f0:	e7f9      	b.n	80024e6 <startMediumFrequencyTask+0x2>
 80024f2:	bf00      	nop

080024f4 <StartSafetyTask>:
  /* USER CODE END MF task 1 */
}

/* startSafetyTask function */
void StartSafetyTask(void const * argument)
{
 80024f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SF task 1 */
  /* Infinite loop */
  for (;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 80024f6:	2001      	movs	r0, #1
 80024f8:	f005 ff6a 	bl	80083d0 <vTaskDelay>
    TSK_SafetyTask();
 80024fc:	f7ff ffd2 	bl	80024a4 <TSK_SafetyTask>
  for (;;)
 8002500:	e7f9      	b.n	80024f6 <StartSafetyTask+0x2>
 8002502:	bf00      	nop

08002504 <UI_HandleStartStopButton_cb>:
  }
  /* USER CODE END SF task 1 */
}

__weak void UI_HandleStartStopButton_cb (void)
{
 8002504:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8002506:	f7ff fabb 	bl	8001a80 <MC_GetSTMStateMotor1>
 800250a:	b918      	cbnz	r0, 8002514 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 800250c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8002510:	f7ff baaa 	b.w	8001a68 <MC_StartMotor1>
}
 8002514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8002518:	f7ff baac 	b.w	8001a74 <MC_StopMotor1>

0800251c <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 800251c:	b4f0      	push	{r4, r5, r6, r7}
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800251e:	4941      	ldr	r1, [pc, #260]	; (8002624 <mc_lock_pins+0x108>)
 8002520:	f04f 1401 	mov.w	r4, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002524:	2601      	movs	r6, #1
 8002526:	b090      	sub	sp, #64	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002528:	61cc      	str	r4, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800252a:	61ce      	str	r6, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800252c:	61cc      	str	r4, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 800252e:	69ca      	ldr	r2, [r1, #28]
 8002530:	920f      	str	r2, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002532:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
  (void) temp;
 8002536:	980f      	ldr	r0, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002538:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 800253c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002540:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002542:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002544:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002546:	69da      	ldr	r2, [r3, #28]
 8002548:	920e      	str	r2, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800254a:	4a37      	ldr	r2, [pc, #220]	; (8002628 <mc_lock_pins+0x10c>)
  (void) temp;
 800254c:	980e      	ldr	r0, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800254e:	4837      	ldr	r0, [pc, #220]	; (800262c <mc_lock_pins+0x110>)
 8002550:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002552:	2508      	movs	r5, #8
 8002554:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002556:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002558:	69d0      	ldr	r0, [r2, #28]
 800255a:	900d      	str	r0, [sp, #52]	; 0x34
  (void) temp;
 800255c:	980d      	ldr	r0, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, PinMask);
 800255e:	f44f 6580 	mov.w	r5, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002562:	f44f 3082 	mov.w	r0, #66560	; 0x10400
 8002566:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002568:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800256a:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800256c:	69d7      	ldr	r7, [r2, #28]
 800256e:	970c      	str	r7, [sp, #48]	; 0x30
  (void) temp;
 8002570:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002572:	4f2f      	ldr	r7, [pc, #188]	; (8002630 <mc_lock_pins+0x114>)
 8002574:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002576:	f44f 7c80 	mov.w	ip, #256	; 0x100
 800257a:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800257e:	61df      	str	r7, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002580:	69df      	ldr	r7, [r3, #28]
 8002582:	970b      	str	r7, [sp, #44]	; 0x2c
  (void) temp;
 8002584:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002586:	f44f 7c00 	mov.w	ip, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800258a:	f44f 3781 	mov.w	r7, #66048	; 0x10200
 800258e:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002590:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002594:	61df      	str	r7, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002596:	69df      	ldr	r7, [r3, #28]
 8002598:	970a      	str	r7, [sp, #40]	; 0x28
  (void) temp;
 800259a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800259c:	4f25      	ldr	r7, [pc, #148]	; (8002634 <mc_lock_pins+0x118>)
 800259e:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025a0:	f04f 0c40 	mov.w	ip, #64	; 0x40
 80025a4:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025a8:	61df      	str	r7, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025aa:	69df      	ldr	r7, [r3, #28]
 80025ac:	9709      	str	r7, [sp, #36]	; 0x24
  (void) temp;
 80025ae:	9f09      	ldr	r7, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025b0:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025b2:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025b4:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025b6:	69d7      	ldr	r7, [r2, #28]
 80025b8:	9708      	str	r7, [sp, #32]
  (void) temp;
 80025ba:	9f08      	ldr	r7, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025bc:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025be:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025c0:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025c2:	69d8      	ldr	r0, [r3, #28]
 80025c4:	9007      	str	r0, [sp, #28]
  (void) temp;
 80025c6:	9807      	ldr	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025c8:	481b      	ldr	r0, [pc, #108]	; (8002638 <mc_lock_pins+0x11c>)
 80025ca:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025cc:	2502      	movs	r5, #2
 80025ce:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025d0:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025d2:	69d2      	ldr	r2, [r2, #28]
 80025d4:	9206      	str	r2, [sp, #24]
  (void) temp;
 80025d6:	9a06      	ldr	r2, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025d8:	4a18      	ldr	r2, [pc, #96]	; (800263c <mc_lock_pins+0x120>)
 80025da:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025dc:	2780      	movs	r7, #128	; 0x80
 80025de:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025e0:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	9205      	str	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025e6:	2704      	movs	r7, #4
  (void) temp;
 80025e8:	9a05      	ldr	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <mc_lock_pins+0x124>)
 80025ec:	61ca      	str	r2, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025ee:	61cf      	str	r7, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025f0:	61ca      	str	r2, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025f2:	69ca      	ldr	r2, [r1, #28]
 80025f4:	9204      	str	r2, [sp, #16]
  (void) temp;
 80025f6:	9a04      	ldr	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025f8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025fa:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025fc:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	9203      	str	r2, [sp, #12]
  (void) temp;
 8002602:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002604:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002606:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002608:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	9302      	str	r3, [sp, #8]
  (void) temp;
 800260e:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002610:	61c8      	str	r0, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002612:	61cd      	str	r5, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002614:	61c8      	str	r0, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002616:	69cb      	ldr	r3, [r1, #28]
 8002618:	9301      	str	r3, [sp, #4]
  (void) temp;
 800261a:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
}
 800261c:	b010      	add	sp, #64	; 0x40
 800261e:	bcf0      	pop	{r4, r5, r6, r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	48000800 	.word	0x48000800
 8002628:	48000400 	.word	0x48000400
 800262c:	00010008 	.word	0x00010008
 8002630:	00010100 	.word	0x00010100
 8002634:	00010040 	.word	0x00010040
 8002638:	00010002 	.word	0x00010002
 800263c:	00010080 	.word	0x00010080
 8002640:	00010004 	.word	0x00010004

08002644 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002644:	b508      	push	{r3, lr}

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002646:	4803      	ldr	r0, [pc, #12]	; (8002654 <MX_MotorControl_Init+0x10>)
 8002648:	f7ff fc5c 	bl	8001f04 <MCboot>
  mc_lock_pins();
}
 800264c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002650:	f7ff bf64 	b.w	800251c <mc_lock_pins>
 8002654:	20001930 	.word	0x20001930

08002658 <vPortSetupTimerInterrupt>:

void vPortSetupTimerInterrupt( void )
{
 8002658:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  ( void )HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 800265a:	f003 fbf7 	bl	8005e4c <HAL_RCC_GetHCLKFreq>
 800265e:	4b04      	ldr	r3, [pc, #16]	; (8002670 <vPortSetupTimerInterrupt+0x18>)
 8002660:	fba3 3000 	umull	r3, r0, r3, r0
 8002664:	09c0      	lsrs	r0, r0, #7
}
 8002666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ( void )HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 800266a:	f002 be2b 	b.w	80052c4 <HAL_SYSTICK_Config>
 800266e:	bf00      	nop
 8002670:	10624dd3 	.word	0x10624dd3

08002674 <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8002674:	6803      	ldr	r3, [r0, #0]
 8002676:	4718      	bx	r3

08002678 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002678:	b510      	push	{r4, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800267a:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800267e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
{
 8002680:	b082      	sub	sp, #8
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002682:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 8002686:	9101      	str	r1, [sp, #4]
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002688:	fb04 fc0c 	mul.w	ip, r4, ip
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800268c:	b209      	sxth	r1, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800268e:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002692:	fb03 f101 	mul.w	r1, r3, r1

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8002696:	eb01 034c 	add.w	r3, r1, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 800269a:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 800269e:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 80026a2:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 80026a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80026aa:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 80026ae:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 80026b2:	ea4f 0262 	mov.w	r2, r2, asr #1
    if (wY < 0)
 80026b6:	f2c0 8088 	blt.w	80027ca <PWMC_SetPhaseVoltage+0x152>
          pHandle->highDuty = (uint16_t)wTimePhA;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 80026ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 80026be:	db59      	blt.n	8002774 <PWMC_SetPhaseVoltage+0xfc>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80026c0:	ebbe 0e02 	subs.w	lr, lr, r2
 80026c4:	bf44      	itt	mi
 80026c6:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 80026ca:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80026ce:	2900      	cmp	r1, #0
 80026d0:	bfbc      	itt	lt
 80026d2:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 80026d6:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bfb8      	it	lt
 80026de:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80026e2:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80026e6:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80026ea:	bfb8      	it	lt
 80026ec:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_2;
 80026f0:	f04f 0c01 	mov.w	ip, #1
        wTimePhB = wTimePhA + (wZ / 131072);
 80026f4:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80026f8:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_2;
 80026fc:	f880 c06a 	strb.w	ip, [r0, #106]	; 0x6a

        pHandle->lowDuty = (uint16_t)wTimePhB;
 8002700:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002704:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
        pHandle->highDuty = (uint16_t)wTimePhC;
 8002708:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    CntPhA = pHandle->CntPhA;
 800270c:	4c7f      	ldr	r4, [pc, #508]	; (800290c <PWMC_SetPhaseVoltage+0x294>)
 800270e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002712:	b292      	uxth	r2, r2
 8002714:	8022      	strh	r2, [r4, #0]

    if (1U == pHandle->DTTest)
 8002716:	f8b0 405e 	ldrh.w	r4, [r0, #94]	; 0x5e
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 800271a:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800271c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8002720:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002724:	b289      	uxth	r1, r1
 8002726:	b29b      	uxth	r3, r3
    if (1U == pHandle->DTTest)
 8002728:	2c01      	cmp	r4, #1
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800272a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800272e:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
    if (1U == pHandle->DTTest)
 8002732:	d11a      	bne.n	800276a <PWMC_SetPhaseVoltage+0xf2>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 8002734:	f9b0 4050 	ldrsh.w	r4, [r0, #80]	; 0x50
 8002738:	2c00      	cmp	r4, #0
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 800273a:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
 800273e:	bfcc      	ite	gt
 8002740:	1912      	addgt	r2, r2, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 8002742:	1b12      	suble	r2, r2, r4
 8002744:	b292      	uxth	r2, r2
 8002746:	87c2      	strh	r2, [r0, #62]	; 0x3e
      }

      if (pHandle->Ib > 0)
 8002748:	f9b0 2052 	ldrsh.w	r2, [r0, #82]	; 0x52
 800274c:	2a00      	cmp	r2, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 800274e:	f9b0 2054 	ldrsh.w	r2, [r0, #84]	; 0x54
        pHandle->CntPhB += pHandle->DTCompCnt;
 8002752:	bfcc      	ite	gt
 8002754:	1909      	addgt	r1, r1, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8002756:	1b09      	suble	r1, r1, r4
      if (pHandle->Ic > 0)
 8002758:	2a00      	cmp	r2, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 800275a:	b289      	uxth	r1, r1
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 800275c:	bfcc      	ite	gt
 800275e:	191b      	addgt	r3, r3, r4
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 8002760:	1b1b      	suble	r3, r3, r4
 8002762:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8002766:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      }
    }


    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800276a:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 800276c:	b002      	add	sp, #8
 800276e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002772:	4718      	bx	r3
        if ( wX <= 0 )
 8002774:	f1bc 0f00 	cmp.w	ip, #0
 8002778:	dd4f      	ble.n	800281a <PWMC_SetPhaseVoltage+0x1a2>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800277a:	ebbc 0e02 	subs.w	lr, ip, r2
 800277e:	bf44      	itt	mi
 8002780:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002784:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002788:	2900      	cmp	r1, #0
 800278a:	bfb8      	it	lt
 800278c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_1;
 8002790:	f04f 0300 	mov.w	r3, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8002794:	bfb8      	it	lt
 8002796:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_1;
 800279a:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800279e:	08a2      	lsrs	r2, r4, #2
          wTimePhC = wTimePhB - (wX / 131072);
 80027a0:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80027a4:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80027a8:	bfb8      	it	lt
 80027aa:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 80027ae:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80027b2:	bfb8      	it	lt
 80027b4:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80027b8:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 80027bc:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 80027c0:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhC;
 80027c4:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
 80027c8:	e7a0      	b.n	800270c <PWMC_SetPhaseVoltage+0x94>
      if (wZ < 0)
 80027ca:	f1b1 3fff 	cmp.w	r1, #4294967295
 80027ce:	db75      	blt.n	80028bc <PWMC_SetPhaseVoltage+0x244>
        if (wX <= 0)
 80027d0:	f1bc 0f00 	cmp.w	ip, #0
 80027d4:	dd4a      	ble.n	800286c <PWMC_SetPhaseVoltage+0x1f4>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80027d6:	ebbe 0e0c 	subs.w	lr, lr, ip
 80027da:	bf48      	it	mi
 80027dc:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 80027e0:	f04f 0202 	mov.w	r2, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80027e4:	bf48      	it	mi
 80027e6:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bfb8      	it	lt
 80027ee:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 80027f2:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80027f6:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80027fa:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 80027fe:	bfb8      	it	lt
 8002800:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8002804:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002808:	eb03 416c 	add.w	r1, r3, ip, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhB;
 800280c:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002810:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002814:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 8002818:	e778      	b.n	800270c <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800281a:	ebbe 0e0c 	subs.w	lr, lr, ip
 800281e:	bf44      	itt	mi
 8002820:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002824:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002828:	2b00      	cmp	r3, #0
 800282a:	bfb8      	it	lt
 800282c:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_6;
 8002830:	f04f 0205 	mov.w	r2, #5
          wTimePhC = wTimePhA - (wY / 131072);
 8002834:	bfb8      	it	lt
 8002836:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          pHandle->Sector = SECTOR_6;
 800283a:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
          wTimePhB = wTimePhC + (wX / 131072);
 800283e:	f1bc 0100 	subs.w	r1, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002842:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8002846:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 800284a:	bfb8      	it	lt
 800284c:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
          wTimePhC = wTimePhA - (wY / 131072);
 8002850:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002854:	bfb8      	it	lt
 8002856:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 800285a:	eb03 4161 	add.w	r1, r3, r1, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 800285e:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002862:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhB;
 8002866:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
 800286a:	e74f      	b.n	800270c <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800286c:	ebbc 0e02 	subs.w	lr, ip, r2
 8002870:	bf44      	itt	mi
 8002872:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002876:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 800287a:	2900      	cmp	r1, #0
 800287c:	bfb8      	it	lt
 800287e:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_4;
 8002882:	f04f 0303 	mov.w	r3, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8002886:	bfb8      	it	lt
 8002888:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_4;
 800288c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002890:	08a2      	lsrs	r2, r4, #2
          wTimePhC = wTimePhB - (wX / 131072);
 8002892:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002896:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800289a:	bfb8      	it	lt
 800289c:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 80028a0:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80028a4:	bfb8      	it	lt
 80028a6:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80028aa:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80028ae:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 80028b2:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 80028b6:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 80028ba:	e727      	b.n	800270c <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80028bc:	ebbe 0e02 	subs.w	lr, lr, r2
 80028c0:	bf44      	itt	mi
 80028c2:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 80028c6:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80028ca:	2900      	cmp	r1, #0
 80028cc:	bfbc      	itt	lt
 80028ce:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 80028d2:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	bfb8      	it	lt
 80028da:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80028de:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80028e2:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80028e6:	bfb8      	it	lt
 80028e8:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_5;
 80028ec:	f04f 0c04 	mov.w	ip, #4
        wTimePhB = wTimePhA + (wZ / 131072);
 80028f0:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80028f4:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_5;
 80028f8:	f880 c06a 	strb.w	ip, [r0, #106]	; 0x6a
        pHandle->lowDuty = (uint16_t)wTimePhC;
 80028fc:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002900:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
        pHandle->highDuty = (uint16_t)wTimePhB;
 8002904:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
 8002908:	e700      	b.n	800270c <PWMC_SetPhaseVoltage+0x94>
 800290a:	bf00      	nop
 800290c:	20001934 	.word	0x20001934

08002910 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002910:	6843      	ldr	r3, [r0, #4]
 8002912:	4718      	bx	r3

08002914 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8002914:	6883      	ldr	r3, [r0, #8]
 8002916:	4718      	bx	r3

08002918 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002918:	b510      	push	{r4, lr}
 800291a:	4604      	mov	r4, r0
 800291c:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 800291e:	b199      	cbz	r1, 8002948 <PWMC_CurrentReadingCalibr+0x30>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8002920:	2901      	cmp	r1, #1
 8002922:	d002      	beq.n	800292a <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8002924:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8002926:	b002      	add	sp, #8
 8002928:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 800292a:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
 800292e:	b19b      	cbz	r3, 8002958 <PWMC_CurrentReadingCalibr+0x40>
        pHandle->OffCalibrWaitTimeCounter--;
 8002930:	3b01      	subs	r3, #1
 8002932:	b29b      	uxth	r3, r3
 8002934:	9101      	str	r1, [sp, #4]
 8002936:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f2      	bne.n	8002924 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 800293e:	68c3      	ldr	r3, [r0, #12]
 8002940:	4798      	blx	r3
          retVal = true;
 8002942:	9901      	ldr	r1, [sp, #4]
 8002944:	4608      	mov	r0, r1
 8002946:	e7ee      	b.n	8002926 <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8002948:	f7ff ffe2 	bl	8002910 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 800294c:	4620      	mov	r0, r4
 800294e:	68e3      	ldr	r3, [r4, #12]
 8002950:	4798      	blx	r3
      retVal = true;
 8002952:	2001      	movs	r0, #1
}
 8002954:	b002      	add	sp, #8
 8002956:	bd10      	pop	{r4, pc}
        retVal = true;
 8002958:	4608      	mov	r0, r1
}
 800295a:	b002      	add	sp, #8
 800295c:	bd10      	pop	{r4, pc}
 800295e:	bf00      	nop

08002960 <PWMC_CheckOverCurrent>:
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 8002960:	6983      	ldr	r3, [r0, #24]
 8002962:	4718      	bx	r3

08002964 <RI_SetRegCommandParser>:

static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString(const char_t * srcString, char_t * destString, uint16_t *size, int16_t maxSize);
__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8002968:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    uint16_t size = 0U;
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 800296c:	2300      	movs	r3, #0
    uint8_t accessResult;
    while (rxLength > 0)
 800296e:	429a      	cmp	r2, r3
    uint8_t * txData = pHandle->txBuffer;
 8002970:	e9d0 c501 	ldrd	ip, r5, [r0, #4]
{
 8002974:	b085      	sub	sp, #20
 8002976:	4607      	mov	r7, r0
    pHandle->txLength = 0;
 8002978:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0)
 800297a:	dd65      	ble.n	8002a48 <RI_SetRegCommandParser+0xe4>
              uint32_t torque;
              uint16_t duration;

              torque = *(uint32_t *)rawData; //cstat !MISRAC2012-Rule-11.3
              duration = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 800297c:	f8df a370 	ldr.w	sl, [pc, #880]	; 8002cf0 <RI_SetRegCommandParser+0x38c>
  uint8_t retVal = MCP_CMD_OK;
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	eb05 0901 	add.w	r9, r5, r1
 8002986:	f1c5 0b01 	rsb	fp, r5, #1
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 800298a:	4664      	mov	r4, ip
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800298c:	b296      	uxth	r6, r2
      accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 800298e:	f834 0b02 	ldrh.w	r0, [r4], #2
    switch (typeID)
 8002992:	f000 0138 	and.w	r1, r0, #56	; 0x38
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002996:	1eb2      	subs	r2, r6, #2
    uint16_t regID = dataID & REG_MASK;
 8002998:	f020 0307 	bic.w	r3, r0, #7
    switch (typeID)
 800299c:	3908      	subs	r1, #8
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800299e:	fa1f f882 	uxth.w	r8, r2
    uint16_t regID = dataID & REG_MASK;
 80029a2:	b29b      	uxth	r3, r3
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80029a4:	b212      	sxth	r2, r2
    switch (typeID)
 80029a6:	2920      	cmp	r1, #32
 80029a8:	d812      	bhi.n	80029d0 <RI_SetRegCommandParser+0x6c>
 80029aa:	e8df f001 	tbb	[pc, r1]
 80029ae:	11b1      	.short	0x11b1
 80029b0:	11111111 	.word	0x11111111
 80029b4:	11861111 	.word	0x11861111
 80029b8:	11111111 	.word	0x11111111
 80029bc:	11bd1111 	.word	0x11bd1111
 80029c0:	11111111 	.word	0x11111111
 80029c4:	11651111 	.word	0x11651111
 80029c8:	11111111 	.word	0x11111111
 80029cc:	1111      	.short	0x1111
 80029ce:	27          	.byte	0x27
 80029cf:	00          	.byte	0x00
 80029d0:	2007      	movs	r0, #7
        if ((1U == number_of_item) && (0 == rxLength))
 80029d2:	eb05 030b 	add.w	r3, r5, fp
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d031      	beq.n	8002a40 <RI_SetRegCommandParser+0xdc>
        if (txSyncFreeSpace !=0 )
 80029dc:	454d      	cmp	r5, r9
 80029de:	f000 80b2 	beq.w	8002b46 <RI_SetRegCommandParser+0x1e2>
          *txData = accessResult;
 80029e2:	f805 0b01 	strb.w	r0, [r5], #1
          pHandle->txLength++;
 80029e6:	89fb      	ldrh	r3, [r7, #14]
 80029e8:	3301      	adds	r3, #1
 80029ea:	81fb      	strh	r3, [r7, #14]
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80029ec:	2800      	cmp	r0, #0
 80029ee:	f040 80ae 	bne.w	8002b4e <RI_SetRegCommandParser+0x1ea>
    while (rxLength > 0)
 80029f2:	2a00      	cmp	r2, #0
 80029f4:	f340 8288 	ble.w	8002f08 <RI_SetRegCommandParser+0x5a4>
 80029f8:	46a4      	mov	ip, r4
 80029fa:	e7c6      	b.n	800298a <RI_SetRegCommandParser+0x26>
        *size = rawSize + 2U;
 80029fc:	f8bc 6002 	ldrh.w	r6, [ip, #2]
 8002a00:	3602      	adds	r6, #2
 8002a02:	b2b6      	uxth	r6, r6
        if (*size > dataAvailable )
 8002a04:	4296      	cmp	r6, r2
 8002a06:	f300 81a6 	bgt.w	8002d56 <RI_SetRegCommandParser+0x3f2>
          switch (regID)
 8002a0a:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8002a0e:	f000 81db 	beq.w	8002dc8 <RI_SetRegCommandParser+0x464>
 8002a12:	d91e      	bls.n	8002a52 <RI_SetRegCommandParser+0xee>
 8002a14:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8002a18:	f000 81e3 	beq.w	8002de2 <RI_SetRegCommandParser+0x47e>
 8002a1c:	f5b3 6fa5 	cmp.w	r3, #1320	; 0x528
 8002a20:	f040 8181 	bne.w	8002d26 <RI_SetRegCommandParser+0x3c2>
              break;
            }

            case MC_REG_ASYNC_UARTA:
            {
              retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002a24:	48ae      	ldr	r0, [pc, #696]	; (8002ce0 <RI_SetRegCommandParser+0x37c>)
 8002a26:	f10c 0104 	add.w	r1, ip, #4
 8002a2a:	f006 f833 	bl	8008a94 <MCPA_cfgLog>
        if ((1U == number_of_item) && (0 == rxLength))
 8002a2e:	eb05 030b 	add.w	r3, r5, fp
 8002a32:	b2db      	uxtb	r3, r3
      rxLength = (int16_t) (rxLength - size);
 8002a34:	eba8 0206 	sub.w	r2, r8, r6
        if ((1U == number_of_item) && (0 == rxLength))
 8002a38:	2b01      	cmp	r3, #1
      rxData = rxData+size;
 8002a3a:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8002a3c:	b212      	sxth	r2, r2
        if ((1U == number_of_item) && (0 == rxLength))
 8002a3e:	d1cd      	bne.n	80029dc <RI_SetRegCommandParser+0x78>
 8002a40:	2a00      	cmp	r2, #0
 8002a42:	d1cb      	bne.n	80029dc <RI_SetRegCommandParser+0x78>
      if (MCP_CMD_OK == retVal)
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d17f      	bne.n	8002b48 <RI_SetRegCommandParser+0x1e4>
      pHandle->txLength = 0;
 8002a48:	2000      	movs	r0, #0
 8002a4a:	81f8      	strh	r0, [r7, #14]
}
 8002a4c:	b005      	add	sp, #20
 8002a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a52:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8002a56:	f000 81a4 	beq.w	8002da2 <RI_SetRegCommandParser+0x43e>
 8002a5a:	f200 8164 	bhi.w	8002d26 <RI_SetRegCommandParser+0x3c2>
 8002a5e:	2ba8      	cmp	r3, #168	; 0xa8
 8002a60:	d004      	beq.n	8002a6c <RI_SetRegCommandParser+0x108>
 8002a62:	f240 815b 	bls.w	8002d1c <RI_SetRegCommandParser+0x3b8>
 8002a66:	2be8      	cmp	r3, #232	; 0xe8
 8002a68:	f040 815d 	bne.w	8002d26 <RI_SetRegCommandParser+0x3c2>
      rxLength = (int16_t) (rxLength - size);
 8002a6c:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8002a70:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8002a72:	b212      	sxth	r2, r2
              retVal = MCP_ERROR_RO_REG;
 8002a74:	2004      	movs	r0, #4
 8002a76:	e7ac      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>

  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */

  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002a78:	f99c 3002 	ldrsb.w	r3, [ip, #2]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 81d8 	beq.w	8002e32 <RI_SetRegCommandParser+0x4ce>
 8002a82:	2a01      	cmp	r2, #1
 8002a84:	f340 8161 	ble.w	8002d4a <RI_SetRegCommandParser+0x3e6>
 8002a88:	f10c 0003 	add.w	r0, ip, #3
 8002a8c:	ea6f 0c0c 	mvn.w	ip, ip
 8002a90:	e002      	b.n	8002a98 <RI_SetRegCommandParser+0x134>
 8002a92:	429a      	cmp	r2, r3
 8002a94:	f340 8153 	ble.w	8002d3e <RI_SetRegCommandParser+0x3da>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
 8002a98:	eb0c 0300 	add.w	r3, ip, r0
 8002a9c:	4606      	mov	r6, r0
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002a9e:	f910 1b01 	ldrsb.w	r1, [r0], #1
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2900      	cmp	r1, #0
 8002aa6:	d1f4      	bne.n	8002a92 <RI_SetRegCommandParser+0x12e>
      rxData = rxData+size;
 8002aa8:	461a      	mov	r2, r3
      rxLength = (int16_t) (rxLength - size);
 8002aaa:	eba8 0303 	sub.w	r3, r8, r3
      rxData = rxData+size;
 8002aae:	4414      	add	r4, r2
      rxLength = (int16_t) (rxLength - size);
 8002ab0:	b21a      	sxth	r2, r3
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	7033      	strb	r3, [r6, #0]
        retVal = MCP_ERROR_RO_REG;
 8002ab6:	2004      	movs	r0, #4
 8002ab8:	e78b      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
        uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002aba:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8002abe:	f8bc 1002 	ldrh.w	r1, [ip, #2]
        switch (regID)
 8002ac2:	f000 8211 	beq.w	8002ee8 <RI_SetRegCommandParser+0x584>
 8002ac6:	f200 808e 	bhi.w	8002be6 <RI_SetRegCommandParser+0x282>
 8002aca:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8002ace:	f000 8216 	beq.w	8002efe <RI_SetRegCommandParser+0x59a>
 8002ad2:	d95b      	bls.n	8002b8c <RI_SetRegCommandParser+0x228>
 8002ad4:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8002ad8:	f000 81cd 	beq.w	8002e76 <RI_SetRegCommandParser+0x512>
 8002adc:	d977      	bls.n	8002bce <RI_SetRegCommandParser+0x26a>
 8002ade:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8002ae2:	d046      	beq.n	8002b72 <RI_SetRegCommandParser+0x20e>
 8002ae4:	d93a      	bls.n	8002b5c <RI_SetRegCommandParser+0x1f8>
 8002ae6:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8002aea:	d148      	bne.n	8002b7e <RI_SetRegCommandParser+0x21a>
            currComp = MCI_GetIqdref(pMCIN);
 8002aec:	4650      	mov	r0, sl
 8002aee:	9101      	str	r1, [sp, #4]
      rxData = rxData+size;
 8002af0:	f10c 0404 	add.w	r4, ip, #4
            currComp = MCI_GetIqdref(pMCIN);
 8002af4:	f7ff f8e0 	bl	8001cb8 <MCI_GetIqdref>
            currComp.q = (int16_t)regdata16;
 8002af8:	9901      	ldr	r1, [sp, #4]
            currComp = MCI_GetIqdref(pMCIN);
 8002afa:	9003      	str	r0, [sp, #12]
            currComp.q = (int16_t)regdata16;
 8002afc:	f8ad 100c 	strh.w	r1, [sp, #12]
            MCI_SetCurrentReferences(pMCIN,currComp);
 8002b00:	4650      	mov	r0, sl
 8002b02:	9903      	ldr	r1, [sp, #12]
 8002b04:	f7fe ffee 	bl	8001ae4 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 8002b08:	1f32      	subs	r2, r6, #4
 8002b0a:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	e760      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
        switch (regID)
 8002b10:	2b48      	cmp	r3, #72	; 0x48
 8002b12:	f000 811a 	beq.w	8002d4a <RI_SetRegCommandParser+0x3e6>
 8002b16:	2b88      	cmp	r3, #136	; 0x88
 8002b18:	f000 8125 	beq.w	8002d66 <RI_SetRegCommandParser+0x402>
      rxLength = (int16_t) (rxLength - size);
 8002b1c:	1ef2      	subs	r2, r6, #3
 8002b1e:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002b20:	f10c 0403 	add.w	r4, ip, #3
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002b24:	2005      	movs	r0, #5
            break;
 8002b26:	e754      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
        switch (regID)
 8002b28:	2b58      	cmp	r3, #88	; 0x58
 8002b2a:	f000 8116 	beq.w	8002d5a <RI_SetRegCommandParser+0x3f6>
 8002b2e:	2b98      	cmp	r3, #152	; 0x98
 8002b30:	f000 8125 	beq.w	8002d7e <RI_SetRegCommandParser+0x41a>
 8002b34:	2b18      	cmp	r3, #24
 8002b36:	f000 8110 	beq.w	8002d5a <RI_SetRegCommandParser+0x3f6>
      rxLength = (int16_t) (rxLength - size);
 8002b3a:	1fb2      	subs	r2, r6, #6
 8002b3c:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002b3e:	f10c 0406 	add.w	r4, ip, #6
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002b42:	2005      	movs	r0, #5
            break;
 8002b44:	e745      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002b46:	2008      	movs	r0, #8
}
 8002b48:	b005      	add	sp, #20
 8002b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002b4e:	2807      	cmp	r0, #7
 8002b50:	f040 80ef 	bne.w	8002d32 <RI_SetRegCommandParser+0x3ce>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002b54:	2001      	movs	r0, #1
}
 8002b56:	b005      	add	sp, #20
 8002b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b5c:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8002b60:	d007      	beq.n	8002b72 <RI_SetRegCommandParser+0x20e>
 8002b62:	d930      	bls.n	8002bc6 <RI_SetRegCommandParser+0x262>
 8002b64:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8002b68:	d003      	beq.n	8002b72 <RI_SetRegCommandParser+0x20e>
 8002b6a:	d926      	bls.n	8002bba <RI_SetRegCommandParser+0x256>
 8002b6c:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8002b70:	d106      	bne.n	8002b80 <RI_SetRegCommandParser+0x21c>
      rxLength = (int16_t) (rxLength - size);
 8002b72:	1f32      	subs	r2, r6, #4
 8002b74:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002b76:	f10c 0404 	add.w	r4, ip, #4
            retVal = MCP_ERROR_RO_REG;
 8002b7a:	2004      	movs	r0, #4
            break;
 8002b7c:	e729      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
 8002b7e:	d964      	bls.n	8002c4a <RI_SetRegCommandParser+0x2e6>
      rxLength = (int16_t) (rxLength - size);
 8002b80:	1f32      	subs	r2, r6, #4
 8002b82:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002b84:	f10c 0404 	add.w	r4, ip, #4
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002b88:	2005      	movs	r0, #5
            break;
 8002b8a:	e722      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
 8002b8c:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002b90:	f000 817c 	beq.w	8002e8c <RI_SetRegCommandParser+0x528>
 8002b94:	d94a      	bls.n	8002c2c <RI_SetRegCommandParser+0x2c8>
 8002b96:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002b9a:	f000 8198 	beq.w	8002ece <RI_SetRegCommandParser+0x56a>
 8002b9e:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8002ba2:	d1ed      	bne.n	8002b80 <RI_SetRegCommandParser+0x21c>
            PID_SetKI(pPIDIq[motorID], (int16_t)regdata16);
 8002ba4:	4b4f      	ldr	r3, [pc, #316]	; (8002ce4 <RI_SetRegCommandParser+0x380>)
 8002ba6:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002ba8:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	f006 f843 	bl	8008c38 <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 8002bb2:	1f32      	subs	r2, r6, #4
 8002bb4:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002bb6:	2000      	movs	r0, #0
            break;
 8002bb8:	e70b      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
 8002bba:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002bbe:	f5b0 6ff2 	cmp.w	r0, #1936	; 0x790
 8002bc2:	d1dd      	bne.n	8002b80 <RI_SetRegCommandParser+0x21c>
 8002bc4:	e7d5      	b.n	8002b72 <RI_SetRegCommandParser+0x20e>
 8002bc6:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8002bca:	d0d2      	beq.n	8002b72 <RI_SetRegCommandParser+0x20e>
 8002bcc:	e7d8      	b.n	8002b80 <RI_SetRegCommandParser+0x21c>
 8002bce:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8002bd2:	f000 8145 	beq.w	8002e60 <RI_SetRegCommandParser+0x4fc>
 8002bd6:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8002bda:	d1d1      	bne.n	8002b80 <RI_SetRegCommandParser+0x21c>
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 8002bdc:	4b42      	ldr	r3, [pc, #264]	; (8002ce8 <RI_SetRegCommandParser+0x384>)
 8002bde:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002be0:	f10c 0404 	add.w	r4, ip, #4
 8002be4:	e7e2      	b.n	8002bac <RI_SetRegCommandParser+0x248>
 8002be6:	f241 5210 	movw	r2, #5392	; 0x1510
 8002bea:	4293      	cmp	r3, r2
 8002bec:	f000 8125 	beq.w	8002e3a <RI_SetRegCommandParser+0x4d6>
 8002bf0:	d945      	bls.n	8002c7e <RI_SetRegCommandParser+0x31a>
 8002bf2:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	f000 8152 	beq.w	8002ea0 <RI_SetRegCommandParser+0x53c>
 8002bfc:	d92c      	bls.n	8002c58 <RI_SetRegCommandParser+0x2f4>
 8002bfe:	f241 6250 	movw	r2, #5712	; 0x1650
 8002c02:	4293      	cmp	r3, r2
 8002c04:	f000 8168 	beq.w	8002ed8 <RI_SetRegCommandParser+0x574>
 8002c08:	f641 3258 	movw	r2, #7000	; 0x1b58
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d0b0      	beq.n	8002b72 <RI_SetRegCommandParser+0x20e>
 8002c10:	f241 6210 	movw	r2, #5648	; 0x1610
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d1b3      	bne.n	8002b80 <RI_SetRegCommandParser+0x21c>
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002c18:	4b32      	ldr	r3, [pc, #200]	; (8002ce4 <RI_SetRegCommandParser+0x380>)
      rxData = rxData+size;
 8002c1a:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	f006 f824 	bl	8008c6c <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002c24:	1f32      	subs	r2, r6, #4
 8002c26:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002c28:	2000      	movs	r0, #0
            break;
 8002c2a:	e6d2      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
 8002c2c:	2b90      	cmp	r3, #144	; 0x90
 8002c2e:	f000 8144 	beq.w	8002eba <RI_SetRegCommandParser+0x556>
 8002c32:	2bd0      	cmp	r3, #208	; 0xd0
 8002c34:	d1a4      	bne.n	8002b80 <RI_SetRegCommandParser+0x21c>
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 8002c36:	482d      	ldr	r0, [pc, #180]	; (8002cec <RI_SetRegCommandParser+0x388>)
 8002c38:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002c3a:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 8002c3e:	f005 fffb 	bl	8008c38 <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 8002c42:	1f32      	subs	r2, r6, #4
 8002c44:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002c46:	2000      	movs	r0, #0
            break;
 8002c48:	e6c3      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
 8002c4a:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8002c4e:	d090      	beq.n	8002b72 <RI_SetRegCommandParser+0x20e>
 8002c50:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002c54:	d08d      	beq.n	8002b72 <RI_SetRegCommandParser+0x20e>
 8002c56:	e793      	b.n	8002b80 <RI_SetRegCommandParser+0x21c>
 8002c58:	f241 5250 	movw	r2, #5456	; 0x1550
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	f000 813f 	beq.w	8002ee0 <RI_SetRegCommandParser+0x57c>
 8002c62:	f241 5290 	movw	r2, #5520	; 0x1590
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d18a      	bne.n	8002b80 <RI_SetRegCommandParser+0x21c>
            PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <RI_SetRegCommandParser+0x384>)
      rxData = rxData+size;
 8002c6c:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	f006 f817 	bl	8008ca4 <PID_SetKDDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002c76:	1f32      	subs	r2, r6, #4
 8002c78:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002c7a:	2000      	movs	r0, #0
            break;
 8002c7c:	e6a9      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
 8002c7e:	f241 4250 	movw	r2, #5200	; 0x1450
 8002c82:	4293      	cmp	r3, r2
 8002c84:	f000 8110 	beq.w	8002ea8 <RI_SetRegCommandParser+0x544>
 8002c88:	d912      	bls.n	8002cb0 <RI_SetRegCommandParser+0x34c>
 8002c8a:	f241 4290 	movw	r2, #5264	; 0x1490
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	f000 80dd 	beq.w	8002e4e <RI_SetRegCommandParser+0x4ea>
 8002c94:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	f47f af71 	bne.w	8002b80 <RI_SetRegCommandParser+0x21c>
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002c9e:	4813      	ldr	r0, [pc, #76]	; (8002cec <RI_SetRegCommandParser+0x388>)
      rxData = rxData+size;
 8002ca0:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002ca4:	f005 fffe 	bl	8008ca4 <PID_SetKDDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002ca8:	1f32      	subs	r2, r6, #4
 8002caa:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002cac:	2000      	movs	r0, #0
            break;
 8002cae:	e690      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
 8002cb0:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8002cb4:	d003      	beq.n	8002cbe <RI_SetRegCommandParser+0x35a>
 8002cb6:	d908      	bls.n	8002cca <RI_SetRegCommandParser+0x366>
 8002cb8:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8002cbc:	d11a      	bne.n	8002cf4 <RI_SetRegCommandParser+0x390>
      rxLength = (int16_t) (rxLength - size);
 8002cbe:	1f32      	subs	r2, r6, #4
 8002cc0:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002cc2:	f10c 0404 	add.w	r4, ip, #4
  uint8_t retVal = MCP_CMD_OK;
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	e683      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
 8002cca:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8002cce:	f43f af50 	beq.w	8002b72 <RI_SetRegCommandParser+0x20e>
 8002cd2:	d91a      	bls.n	8002d0a <RI_SetRegCommandParser+0x3a6>
 8002cd4:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8002cd8:	f43f af4b 	beq.w	8002b72 <RI_SetRegCommandParser+0x20e>
 8002cdc:	e750      	b.n	8002b80 <RI_SetRegCommandParser+0x21c>
 8002cde:	bf00      	nop
 8002ce0:	20000364 	.word	0x20000364
 8002ce4:	20000348 	.word	0x20000348
 8002ce8:	20000344 	.word	0x20000344
 8002cec:	20000200 	.word	0x20000200
 8002cf0:	20000744 	.word	0x20000744
 8002cf4:	f4ff af44 	bcc.w	8002b80 <RI_SetRegCommandParser+0x21c>
 8002cf8:	f5b3 6f6d 	cmp.w	r3, #3792	; 0xed0
 8002cfc:	f43f af39 	beq.w	8002b72 <RI_SetRegCommandParser+0x20e>
 8002d00:	f5b3 6f71 	cmp.w	r3, #3856	; 0xf10
 8002d04:	f43f af35 	beq.w	8002b72 <RI_SetRegCommandParser+0x20e>
 8002d08:	e73a      	b.n	8002b80 <RI_SetRegCommandParser+0x21c>
 8002d0a:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8002d0e:	f43f af30 	beq.w	8002b72 <RI_SetRegCommandParser+0x20e>
 8002d12:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8002d16:	f43f af2c 	beq.w	8002b72 <RI_SetRegCommandParser+0x20e>
 8002d1a:	e731      	b.n	8002b80 <RI_SetRegCommandParser+0x21c>
 8002d1c:	f020 0047 	bic.w	r0, r0, #71	; 0x47
 8002d20:	2828      	cmp	r0, #40	; 0x28
 8002d22:	f43f aea3 	beq.w	8002a6c <RI_SetRegCommandParser+0x108>
      rxLength = (int16_t) (rxLength - size);
 8002d26:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8002d2a:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8002d2c:	b212      	sxth	r2, r2
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002d2e:	2005      	movs	r0, #5
              break;
 8002d30:	e64f      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002d32:	280a      	cmp	r0, #10
 8002d34:	f43f af0e 	beq.w	8002b54 <RI_SetRegCommandParser+0x1f0>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	e659      	b.n	80029f2 <RI_SetRegCommandParser+0x8e>
      rxLength = (int16_t) (rxLength - size);
 8002d3e:	eba8 0203 	sub.w	r2, r8, r3
      rxData = rxData+size;
 8002d42:	441c      	add	r4, r3
      rxLength = (int16_t) (rxLength - size);
 8002d44:	b212      	sxth	r2, r2
        retVal = MCP_ERROR_RO_REG;
 8002d46:	2004      	movs	r0, #4
 8002d48:	e643      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
      rxLength = (int16_t) (rxLength - size);
 8002d4a:	1ef2      	subs	r2, r6, #3
 8002d4c:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002d4e:	f10c 0403 	add.w	r4, ip, #3
            retVal = MCP_ERROR_RO_REG;
 8002d52:	2004      	movs	r0, #4
 8002d54:	e63d      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 8002d56:	200a      	movs	r0, #10
 8002d58:	e63b      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
      rxLength = (int16_t) (rxLength - size);
 8002d5a:	1fb2      	subs	r2, r6, #6
 8002d5c:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002d5e:	f10c 0406 	add.w	r4, ip, #6
            retVal = MCP_ERROR_RO_REG;
 8002d62:	2004      	movs	r0, #4
 8002d64:	e635      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
            uint8_t regdata8 = *data;
 8002d66:	f89c 3002 	ldrb.w	r3, [ip, #2]
            if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d045      	beq.n	8002dfa <RI_SetRegCommandParser+0x496>
            if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d051      	beq.n	8002e16 <RI_SetRegCommandParser+0x4b2>
      rxLength = (int16_t) (rxLength - size);
 8002d72:	1ef2      	subs	r2, r6, #3
 8002d74:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002d76:	f10c 0403 	add.w	r4, ip, #3
  uint8_t retVal = MCP_CMD_OK;
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	e629      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002d7e:	f9bc 3002 	ldrsh.w	r3, [ip, #2]
 8002d82:	4a62      	ldr	r2, [pc, #392]	; (8002f0c <RI_SetRegCommandParser+0x5a8>)
 8002d84:	fb82 2103 	smull	r2, r1, r2, r3
 8002d88:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	4650      	mov	r0, sl
 8002d90:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002d92:	f10c 0406 	add.w	r4, ip, #6
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002d96:	f7fe fe91 	bl	8001abc <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002d9a:	1fb2      	subs	r2, r6, #6
 8002d9c:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002d9e:	2000      	movs	r0, #0
            break;
 8002da0:	e617      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002da2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002da6:	4959      	ldr	r1, [pc, #356]	; (8002f0c <RI_SetRegCommandParser+0x5a8>)
 8002da8:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 8002dac:	fb81 0103 	smull	r0, r1, r1, r3
 8002db0:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002db4:	4650      	mov	r0, sl
 8002db6:	b209      	sxth	r1, r1
 8002db8:	f7fe fe80 	bl	8001abc <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002dbc:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8002dc0:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8002dc2:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002dc4:	2000      	movs	r0, #0
              break;
 8002dc6:	e604      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8002dc8:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 8002dcc:	f9bc 1004 	ldrsh.w	r1, [ip, #4]
 8002dd0:	4650      	mov	r0, sl
 8002dd2:	f7fe fe7d 	bl	8001ad0 <MCI_ExecTorqueRamp>
      rxLength = (int16_t) (rxLength - size);
 8002dd6:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8002dda:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8002ddc:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002dde:	2000      	movs	r0, #0
              break;
 8002de0:	e5f7      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002de2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8002de6:	9103      	str	r1, [sp, #12]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8002de8:	4650      	mov	r0, sl
 8002dea:	f7fe fe7b 	bl	8001ae4 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 8002dee:	eba8 0206 	sub.w	r2, r8, r6
      rxData = rxData+size;
 8002df2:	4434      	add	r4, r6
      rxLength = (int16_t) (rxLength - size);
 8002df4:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002df6:	2000      	movs	r0, #0
 8002df8:	e5eb      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8002dfa:	4650      	mov	r0, sl
      rxData = rxData+size;
 8002dfc:	f10c 0403 	add.w	r4, ip, #3
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8002e00:	f7fe ff84 	bl	8001d0c <MCI_GetTeref>
 8002e04:	2200      	movs	r2, #0
 8002e06:	4601      	mov	r1, r0
 8002e08:	4650      	mov	r0, sl
 8002e0a:	f7fe fe61 	bl	8001ad0 <MCI_ExecTorqueRamp>
      rxLength = (int16_t) (rxLength - size);
 8002e0e:	1ef2      	subs	r2, r6, #3
 8002e10:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e12:	2000      	movs	r0, #0
 8002e14:	e5dd      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002e16:	4650      	mov	r0, sl
      rxData = rxData+size;
 8002e18:	f10c 0403 	add.w	r4, ip, #3
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002e1c:	f7fe ff1e 	bl	8001c5c <MCI_GetMecSpeedRefUnit>
 8002e20:	2200      	movs	r2, #0
 8002e22:	4601      	mov	r1, r0
 8002e24:	4650      	mov	r0, sl
 8002e26:	f7fe fe49 	bl	8001abc <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002e2a:	1ef2      	subs	r2, r6, #3
 8002e2c:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e2e:	2000      	movs	r0, #0
 8002e30:	e5cf      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002e32:	2201      	movs	r2, #1
  const char_t *tempsrcString = srcString;
 8002e34:	4626      	mov	r6, r4
  *size= 1U ; /* /0 is the min String size */
 8002e36:	4613      	mov	r3, r2
 8002e38:	e637      	b.n	8002aaa <RI_SetRegCommandParser+0x146>
            PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8002e3a:	4b35      	ldr	r3, [pc, #212]	; (8002f10 <RI_SetRegCommandParser+0x5ac>)
      rxData = rxData+size;
 8002e3c:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	f005 ff07 	bl	8008c54 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002e46:	1f32      	subs	r2, r6, #4
 8002e48:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e4a:	2000      	movs	r0, #0
            break;
 8002e4c:	e5c1      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002e4e:	4831      	ldr	r0, [pc, #196]	; (8002f14 <RI_SetRegCommandParser+0x5b0>)
      rxData = rxData+size;
 8002e50:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002e54:	f005 ff0a 	bl	8008c6c <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002e58:	1f32      	subs	r2, r6, #4
 8002e5a:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e5c:	2000      	movs	r0, #0
            break;
 8002e5e:	e5b8      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 8002e60:	4b2b      	ldr	r3, [pc, #172]	; (8002f10 <RI_SetRegCommandParser+0x5ac>)
 8002e62:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002e64:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	f005 fee3 	bl	8008c34 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8002e6e:	1f32      	subs	r2, r6, #4
 8002e70:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e72:	2000      	movs	r0, #0
            break;
 8002e74:	e5ad      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 8002e76:	4b26      	ldr	r3, [pc, #152]	; (8002f10 <RI_SetRegCommandParser+0x5ac>)
 8002e78:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002e7a:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	f005 ff08 	bl	8008c94 <PID_SetKD>
      rxLength = (int16_t) (rxLength - size);
 8002e84:	1f32      	subs	r2, r6, #4
 8002e86:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e88:	2000      	movs	r0, #0
            break;
 8002e8a:	e5a2      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 8002e8c:	4821      	ldr	r0, [pc, #132]	; (8002f14 <RI_SetRegCommandParser+0x5b0>)
 8002e8e:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002e90:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 8002e94:	f005 fefe 	bl	8008c94 <PID_SetKD>
      rxLength = (int16_t) (rxLength - size);
 8002e98:	1f32      	subs	r2, r6, #4
 8002e9a:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e9c:	2000      	movs	r0, #0
            break;
 8002e9e:	e598      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <RI_SetRegCommandParser+0x5b4>)
      rxData = rxData+size;
 8002ea2:	f10c 0404 	add.w	r4, ip, #4
 8002ea6:	e7cb      	b.n	8002e40 <RI_SetRegCommandParser+0x4dc>
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002ea8:	481a      	ldr	r0, [pc, #104]	; (8002f14 <RI_SetRegCommandParser+0x5b0>)
      rxData = rxData+size;
 8002eaa:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002eae:	f005 fed1 	bl	8008c54 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002eb2:	1f32      	subs	r2, r6, #4
 8002eb4:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002eb6:	2000      	movs	r0, #0
            break;
 8002eb8:	e58b      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8002eba:	4816      	ldr	r0, [pc, #88]	; (8002f14 <RI_SetRegCommandParser+0x5b0>)
 8002ebc:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002ebe:	f10c 0404 	add.w	r4, ip, #4
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8002ec2:	f005 feb7 	bl	8008c34 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8002ec6:	1f32      	subs	r2, r6, #4
 8002ec8:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002eca:	2000      	movs	r0, #0
            break;
 8002ecc:	e581      	b.n	80029d2 <RI_SetRegCommandParser+0x6e>
            PID_SetKP(pPIDIq[motorID], (int16_t)regdata16);
 8002ece:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <RI_SetRegCommandParser+0x5b4>)
 8002ed0:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002ed2:	f10c 0404 	add.w	r4, ip, #4
 8002ed6:	e7c7      	b.n	8002e68 <RI_SetRegCommandParser+0x504>
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <RI_SetRegCommandParser+0x5b4>)
      rxData = rxData+size;
 8002eda:	f10c 0404 	add.w	r4, ip, #4
 8002ede:	e6c7      	b.n	8002c70 <RI_SetRegCommandParser+0x30c>
            PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <RI_SetRegCommandParser+0x5ac>)
      rxData = rxData+size;
 8002ee2:	f10c 0404 	add.w	r4, ip, #4
 8002ee6:	e69a      	b.n	8002c1e <RI_SetRegCommandParser+0x2ba>
            currComp = MCI_GetIqdref(pMCIN);
 8002ee8:	4650      	mov	r0, sl
 8002eea:	9101      	str	r1, [sp, #4]
      rxData = rxData+size;
 8002eec:	f10c 0404 	add.w	r4, ip, #4
            currComp = MCI_GetIqdref(pMCIN);
 8002ef0:	f7fe fee2 	bl	8001cb8 <MCI_GetIqdref>
            currComp.d = (int16_t)regdata16;
 8002ef4:	9901      	ldr	r1, [sp, #4]
            currComp = MCI_GetIqdref(pMCIN);
 8002ef6:	9003      	str	r0, [sp, #12]
            currComp.d = (int16_t)regdata16;
 8002ef8:	f8ad 100e 	strh.w	r1, [sp, #14]
 8002efc:	e600      	b.n	8002b00 <RI_SetRegCommandParser+0x19c>
            PID_SetKD(pPIDIq[motorID], (int16_t)regdata16);
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <RI_SetRegCommandParser+0x5b4>)
 8002f00:	b209      	sxth	r1, r1
      rxData = rxData+size;
 8002f02:	f10c 0404 	add.w	r4, ip, #4
 8002f06:	e7ba      	b.n	8002e7e <RI_SetRegCommandParser+0x51a>
 8002f08:	9800      	ldr	r0, [sp, #0]
 8002f0a:	e59b      	b.n	8002a44 <RI_SetRegCommandParser+0xe0>
 8002f0c:	2aaaaaab 	.word	0x2aaaaaab
 8002f10:	20000344 	.word	0x20000344
 8002f14:	20000200 	.word	0x20000200
 8002f18:	20000348 	.word	0x20000348

08002f1c <RI_GetRegCommandParser>:
{
 8002f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t rxLength = pHandle->rxLength;
 8002f20:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t * rxData = pHandle->rxBuffer;
 8002f24:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8002f28:	6885      	ldr	r5, [r0, #8]
    pHandle->txLength = 0;
 8002f2a:	2300      	movs	r3, #0
{
 8002f2c:	b091      	sub	sp, #68	; 0x44
    pHandle->txLength = 0;
 8002f2e:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0U)
 8002f30:	f1b8 0f00 	cmp.w	r8, #0
 8002f34:	f000 82fd 	beq.w	8003532 <RI_GetRegCommandParser+0x616>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8002f38:	4eaa      	ldr	r6, [pc, #680]	; (80031e4 <RI_GetRegCommandParser+0x2c8>)
 8002f3a:	4607      	mov	r7, r0
 8002f3c:	b209      	sxth	r1, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8002f3e:	464c      	mov	r4, r9
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002f40:	f834 3b02 	ldrh.w	r3, [r4], #2
    switch (typeID)
 8002f44:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f48:	3a08      	subs	r2, #8
    uint16_t regID = dataID & REG_MASK;
 8002f4a:	f023 0307 	bic.w	r3, r3, #7
 8002f4e:	b29b      	uxth	r3, r3
    switch (typeID)
 8002f50:	2a20      	cmp	r2, #32
 8002f52:	d812      	bhi.n	8002f7a <RI_GetRegCommandParser+0x5e>
 8002f54:	e8df f002 	tbb	[pc, r2]
 8002f58:	111111af 	.word	0x111111af
 8002f5c:	11111111 	.word	0x11111111
 8002f60:	11111167 	.word	0x11111167
 8002f64:	11111111 	.word	0x11111111
 8002f68:	111111ba 	.word	0x111111ba
 8002f6c:	11111111 	.word	0x11111111
 8002f70:	1111112b 	.word	0x1111112b
 8002f74:	11111111 	.word	0x11111111
 8002f78:	15          	.byte	0x15
 8002f79:	00          	.byte	0x00
 8002f7a:	2007      	movs	r0, #7
}
 8002f7c:	b011      	add	sp, #68	; 0x44
 8002f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rawData++;
 8002f82:	2be8      	cmp	r3, #232	; 0xe8
 8002f84:	f105 0202 	add.w	r2, r5, #2
        switch (regID)
 8002f88:	f000 82ca 	beq.w	8003520 <RI_GetRegCommandParser+0x604>
 8002f8c:	f200 80cb 	bhi.w	8003126 <RI_GetRegCommandParser+0x20a>
 8002f90:	2b68      	cmp	r3, #104	; 0x68
 8002f92:	f000 827c 	beq.w	800348e <RI_GetRegCommandParser+0x572>
 8002f96:	2ba8      	cmp	r3, #168	; 0xa8
 8002f98:	f040 80b2 	bne.w	8003100 <RI_GetRegCommandParser+0x1e4>
            *rawSize = sizeof(ApplicationConfig_reg_t);
 8002f9c:	230e      	movs	r3, #14
            if ((*rawSize) +2  > freeSpace)
 8002f9e:	290f      	cmp	r1, #15
            *rawSize = sizeof(ApplicationConfig_reg_t);
 8002fa0:	802b      	strh	r3, [r5, #0]
            if ((*rawSize) +2  > freeSpace)
 8002fa2:	f300 8252 	bgt.w	800344a <RI_GetRegCommandParser+0x52e>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002fa6:	2008      	movs	r0, #8
}
 8002fa8:	b011      	add	sp, #68	; 0x44
 8002faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (regID)
 8002fae:	2ba0      	cmp	r3, #160	; 0xa0
 8002fb0:	f000 821b 	beq.w	80033ea <RI_GetRegCommandParser+0x4ce>
 8002fb4:	f200 80d3 	bhi.w	800315e <RI_GetRegCommandParser+0x242>
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	f000 822f 	beq.w	800341c <RI_GetRegCommandParser+0x500>
 8002fbe:	2b60      	cmp	r3, #96	; 0x60
 8002fc0:	f040 8082 	bne.w	80030c8 <RI_GetRegCommandParser+0x1ac>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002fc4:	4b88      	ldr	r3, [pc, #544]	; (80031e8 <RI_GetRegCommandParser+0x2cc>)
 8002fc6:	f993 0000 	ldrsb.w	r0, [r3]
 8002fca:	2800      	cmp	r0, #0
 8002fcc:	f000 8250 	beq.w	8003470 <RI_GetRegCommandParser+0x554>
 8002fd0:	2901      	cmp	r1, #1
 8002fd2:	f340 81ff 	ble.w	80033d4 <RI_GetRegCommandParser+0x4b8>
 8002fd6:	469e      	mov	lr, r3
 8002fd8:	46ac      	mov	ip, r5
 8002fda:	f1c5 0201 	rsb	r2, r5, #1
 8002fde:	e002      	b.n	8002fe6 <RI_GetRegCommandParser+0xca>
 8002fe0:	428b      	cmp	r3, r1
 8002fe2:	f280 81f7 	bge.w	80033d4 <RI_GetRegCommandParser+0x4b8>
    *tempdestString = *tempsrcString;
 8002fe6:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002fea:	f91e 0f01 	ldrsb.w	r0, [lr, #1]!
 8002fee:	eb0c 0302 	add.w	r3, ip, r2
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	d1f3      	bne.n	8002fe0 <RI_GetRegCommandParser+0xc4>
        txData = txData+size;
 8002ff8:	4618      	mov	r0, r3
    *tempdestString = (int8_t)0;
 8002ffa:	2200      	movs	r2, #0
        if (freeSpace >= 2U)
 8002ffc:	fa1f fa81 	uxth.w	sl, r1
    *tempdestString = (int8_t)0;
 8003000:	f88c 2000 	strb.w	r2, [ip]
        pHandle->txLength += size;
 8003004:	f8b7 c00e 	ldrh.w	ip, [r7, #14]
    while (rxLength > 0U)
 8003008:	eb09 0208 	add.w	r2, r9, r8
        pHandle->txLength += size;
 800300c:	449c      	add	ip, r3
        freeSpaceS16 = freeSpaceS16-size;
 800300e:	ebaa 0103 	sub.w	r1, sl, r3
    while (rxLength > 0U)
 8003012:	b292      	uxth	r2, r2
 8003014:	b2a3      	uxth	r3, r4
 8003016:	4293      	cmp	r3, r2
        pHandle->txLength += size;
 8003018:	f8a7 c00e 	strh.w	ip, [r7, #14]
        txData = txData+size;
 800301c:	4405      	add	r5, r0
        freeSpaceS16 = freeSpaceS16-size;
 800301e:	b209      	sxth	r1, r1
    while (rxLength > 0U)
 8003020:	d18e      	bne.n	8002f40 <RI_GetRegCommandParser+0x24>
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8003022:	2000      	movs	r0, #0
 8003024:	e7aa      	b.n	8002f7c <RI_GetRegCommandParser+0x60>
        if (freeSpace >= 2U)
 8003026:	fa1f fa81 	uxth.w	sl, r1
 800302a:	f1ba 0f01 	cmp.w	sl, #1
 800302e:	d9ba      	bls.n	8002fa6 <RI_GetRegCommandParser+0x8a>
          switch (regID)
 8003030:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8003034:	f000 82cd 	beq.w	80035d2 <RI_GetRegCommandParser+0x6b6>
 8003038:	d81d      	bhi.n	8003076 <RI_GetRegCommandParser+0x15a>
 800303a:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 800303e:	f000 82ea 	beq.w	8003616 <RI_GetRegCommandParser+0x6fa>
 8003042:	f240 8150 	bls.w	80032e6 <RI_GetRegCommandParser+0x3ca>
 8003046:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 800304a:	f000 8294 	beq.w	8003576 <RI_GetRegCommandParser+0x65a>
 800304e:	f240 8137 	bls.w	80032c0 <RI_GetRegCommandParser+0x3a4>
 8003052:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8003056:	f000 8286 	beq.w	8003566 <RI_GetRegCommandParser+0x64a>
 800305a:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 800305e:	f040 8121 	bne.w	80032a4 <RI_GetRegCommandParser+0x388>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8003062:	4862      	ldr	r0, [pc, #392]	; (80031ec <RI_GetRegCommandParser+0x2d0>)
 8003064:	f7fe fe1a 	bl	8001c9c <MCI_GetIqd>
 8003068:	900a      	str	r0, [sp, #40]	; 0x28
 800306a:	f3c0 400f 	ubfx	r0, r0, #16, #16
 800306e:	8028      	strh	r0, [r5, #0]
              break;
 8003070:	2002      	movs	r0, #2
          *size = 2;
 8003072:	4603      	mov	r3, r0
              break;
 8003074:	e7c6      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 8003076:	f241 4250 	movw	r2, #5200	; 0x1450
 800307a:	4293      	cmp	r3, r2
 800307c:	f000 82a2 	beq.w	80035c4 <RI_GetRegCommandParser+0x6a8>
 8003080:	f240 80cf 	bls.w	8003222 <RI_GetRegCommandParser+0x306>
 8003084:	f241 5290 	movw	r2, #5520	; 0x1590
 8003088:	4293      	cmp	r3, r2
 800308a:	f000 827e 	beq.w	800358a <RI_GetRegCommandParser+0x66e>
 800308e:	f240 80b5 	bls.w	80031fc <RI_GetRegCommandParser+0x2e0>
 8003092:	f241 6210 	movw	r2, #5648	; 0x1610
 8003096:	4293      	cmp	r3, r2
 8003098:	f000 8275 	beq.w	8003586 <RI_GetRegCommandParser+0x66a>
 800309c:	f241 6250 	movw	r2, #5712	; 0x1650
 80030a0:	4293      	cmp	r3, r2
 80030a2:	f040 8091 	bne.w	80031c8 <RI_GetRegCommandParser+0x2ac>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 80030a6:	4b52      	ldr	r3, [pc, #328]	; (80031f0 <RI_GetRegCommandParser+0x2d4>)
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	f005 fdf9 	bl	8008ca0 <PID_GetKDDivisorPOW2>
 80030ae:	8028      	strh	r0, [r5, #0]
 80030b0:	2002      	movs	r0, #2
          *size = 2;
 80030b2:	4603      	mov	r3, r0
 80030b4:	e7a6      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
        if (freeSpace > 0U)
 80030b6:	2900      	cmp	r1, #0
 80030b8:	f43f af75 	beq.w	8002fa6 <RI_GetRegCommandParser+0x8a>
          switch (regID)
 80030bc:	2b48      	cmp	r3, #72	; 0x48
 80030be:	f000 818b 	beq.w	80033d8 <RI_GetRegCommandParser+0x4bc>
 80030c2:	2b88      	cmp	r3, #136	; 0x88
 80030c4:	f000 817d 	beq.w	80033c2 <RI_GetRegCommandParser+0x4a6>
 80030c8:	2005      	movs	r0, #5
 80030ca:	e757      	b.n	8002f7c <RI_GetRegCommandParser+0x60>
        if (freeSpace >= 4U)
 80030cc:	fa1f fa81 	uxth.w	sl, r1
 80030d0:	f1ba 0f03 	cmp.w	sl, #3
 80030d4:	f67f af67 	bls.w	8002fa6 <RI_GetRegCommandParser+0x8a>
          switch (regID)
 80030d8:	2b98      	cmp	r3, #152	; 0x98
 80030da:	f000 81d4 	beq.w	8003486 <RI_GetRegCommandParser+0x56a>
 80030de:	f200 8160 	bhi.w	80033a2 <RI_GetRegCommandParser+0x486>
 80030e2:	2b18      	cmp	r3, #24
 80030e4:	f000 81c8 	beq.w	8003478 <RI_GetRegCommandParser+0x55c>
 80030e8:	2b58      	cmp	r3, #88	; 0x58
 80030ea:	d1ed      	bne.n	80030c8 <RI_GetRegCommandParser+0x1ac>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80030ec:	483f      	ldr	r0, [pc, #252]	; (80031ec <RI_GetRegCommandParser+0x2d0>)
 80030ee:	f7fe fdad 	bl	8001c4c <MCI_GetAvrgMecSpeedUnit>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80030f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80030f6:	0040      	lsls	r0, r0, #1
 80030f8:	6028      	str	r0, [r5, #0]
 80030fa:	2004      	movs	r0, #4
          *size = 4;
 80030fc:	4603      	mov	r3, r0
 80030fe:	e781      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 8003100:	2b28      	cmp	r3, #40	; 0x28
 8003102:	d1e1      	bne.n	80030c8 <RI_GetRegCommandParser+0x1ac>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003104:	230a      	movs	r3, #10
            if (((*rawSize) + 2U) > freeSpace)
 8003106:	290b      	cmp	r1, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003108:	802b      	strh	r3, [r5, #0]
            if (((*rawSize) + 2U) > freeSpace)
 800310a:	f67f af4c 	bls.w	8002fa6 <RI_GetRegCommandParser+0x8a>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 800310e:	4b39      	ldr	r3, [pc, #228]	; (80031f4 <RI_GetRegCommandParser+0x2d8>)
        if (freeSpace >= 2U)
 8003110:	fa1f fa81 	uxth.w	sl, r1
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003114:	6819      	ldr	r1, [r3, #0]
 8003116:	6011      	str	r1, [r2, #0]
        if (freeSpace >= 2U)
 8003118:	200c      	movs	r0, #12
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	891b      	ldrh	r3, [r3, #8]
 800311e:	8113      	strh	r3, [r2, #8]
 8003120:	6051      	str	r1, [r2, #4]
        *size = (*rawSize) + 2U;
 8003122:	4603      	mov	r3, r0
 8003124:	e76e      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 8003126:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 800312a:	f000 81ed 	beq.w	8003508 <RI_GetRegCommandParser+0x5ec>
 800312e:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8003132:	d133      	bne.n	800319c <RI_GetRegCommandParser+0x280>
            *rawSize = 4;
 8003134:	2304      	movs	r3, #4
 8003136:	802b      	strh	r3, [r5, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8003138:	482c      	ldr	r0, [pc, #176]	; (80031ec <RI_GetRegCommandParser+0x2d0>)
        if (freeSpace >= 2U)
 800313a:	fa1f fa81 	uxth.w	sl, r1
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 800313e:	f7fe fdbb 	bl	8001cb8 <MCI_GetIqdref>
 8003142:	8068      	strh	r0, [r5, #2]
 8003144:	9003      	str	r0, [sp, #12]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003146:	4829      	ldr	r0, [pc, #164]	; (80031ec <RI_GetRegCommandParser+0x2d0>)
 8003148:	f7fe fdb6 	bl	8001cb8 <MCI_GetIqdref>
 800314c:	9002      	str	r0, [sp, #8]
 800314e:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 8003152:	882b      	ldrh	r3, [r5, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003154:	80a8      	strh	r0, [r5, #4]
        *size = (*rawSize) + 2U;
 8003156:	3302      	adds	r3, #2
 8003158:	b29b      	uxth	r3, r3
        txData = txData+size;
 800315a:	4618      	mov	r0, r3
 800315c:	e752      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 800315e:	2be0      	cmp	r3, #224	; 0xe0
 8003160:	d1b2      	bne.n	80030c8 <RI_GetRegCommandParser+0x1ac>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8003162:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <RI_GetRegCommandParser+0x2dc>)
 8003164:	681b      	ldr	r3, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003166:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
 800316a:	2800      	cmp	r0, #0
 800316c:	f000 8180 	beq.w	8003470 <RI_GetRegCommandParser+0x554>
 8003170:	2901      	cmp	r1, #1
 8003172:	f340 812f 	ble.w	80033d4 <RI_GetRegCommandParser+0x4b8>
 8003176:	f103 0e24 	add.w	lr, r3, #36	; 0x24
 800317a:	46ac      	mov	ip, r5
 800317c:	f1c5 0201 	rsb	r2, r5, #1
 8003180:	e002      	b.n	8003188 <RI_GetRegCommandParser+0x26c>
 8003182:	428b      	cmp	r3, r1
 8003184:	f280 8126 	bge.w	80033d4 <RI_GetRegCommandParser+0x4b8>
    *tempdestString = *tempsrcString;
 8003188:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800318c:	f91e 0f01 	ldrsb.w	r0, [lr, #1]!
 8003190:	eb0c 0302 	add.w	r3, ip, r2
 8003194:	b29b      	uxth	r3, r3
 8003196:	2800      	cmp	r0, #0
 8003198:	d1f3      	bne.n	8003182 <RI_GetRegCommandParser+0x266>
 800319a:	e72d      	b.n	8002ff8 <RI_GetRegCommandParser+0xdc>
 800319c:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 80031a0:	d192      	bne.n	80030c8 <RI_GetRegCommandParser+0x1ac>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 80031a2:	4812      	ldr	r0, [pc, #72]	; (80031ec <RI_GetRegCommandParser+0x2d0>)
        if (freeSpace >= 2U)
 80031a4:	fa1f fa81 	uxth.w	sl, r1
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 80031a8:	f7fe fd42 	bl	8001c30 <MCI_GetLastRampFinalSpeed>
 80031ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80031b0:	0040      	lsls	r0, r0, #1
 80031b2:	f8c5 0002 	str.w	r0, [r5, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80031b6:	480d      	ldr	r0, [pc, #52]	; (80031ec <RI_GetRegCommandParser+0x2d0>)
 80031b8:	f7fe fd42 	bl	8001c40 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 80031bc:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80031be:	80e8      	strh	r0, [r5, #6]
        if (freeSpace >= 2U)
 80031c0:	2008      	movs	r0, #8
            *rawSize = 6;
 80031c2:	802b      	strh	r3, [r5, #0]
        *size = (*rawSize) + 2U;
 80031c4:	4603      	mov	r3, r0
 80031c6:	e71d      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 80031c8:	f241 52d0 	movw	r2, #5584	; 0x15d0
 80031cc:	4293      	cmp	r3, r2
 80031ce:	f47f af7b 	bne.w	80030c8 <RI_GetRegCommandParser+0x1ac>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 80031d2:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <RI_GetRegCommandParser+0x2d4>)
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	f005 fd3b 	bl	8008c50 <PID_GetKPDivisorPOW2>
 80031da:	8028      	strh	r0, [r5, #0]
 80031dc:	2002      	movs	r0, #2
          *size = 2;
 80031de:	4603      	mov	r3, r0
 80031e0:	e710      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 80031e2:	bf00      	nop
 80031e4:	20000358 	.word	0x20000358
 80031e8:	0800a230 	.word	0x0800a230
 80031ec:	20000744 	.word	0x20000744
 80031f0:	20000348 	.word	0x20000348
 80031f4:	0800a2c4 	.word	0x0800a2c4
 80031f8:	2000035c 	.word	0x2000035c
 80031fc:	f241 5210 	movw	r2, #5392	; 0x1510
 8003200:	4293      	cmp	r3, r2
 8003202:	f000 820a 	beq.w	800361a <RI_GetRegCommandParser+0x6fe>
 8003206:	d921      	bls.n	800324c <RI_GetRegCommandParser+0x330>
 8003208:	f241 5250 	movw	r2, #5456	; 0x1550
 800320c:	4293      	cmp	r3, r2
 800320e:	f47f af5b 	bne.w	80030c8 <RI_GetRegCommandParser+0x1ac>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8003212:	4bb2      	ldr	r3, [pc, #712]	; (80034dc <RI_GetRegCommandParser+0x5c0>)
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	f005 fd23 	bl	8008c60 <PID_GetKIDivisorPOW2>
 800321a:	8028      	strh	r0, [r5, #0]
 800321c:	2002      	movs	r0, #2
          *size = 2;
 800321e:	4603      	mov	r3, r0
 8003220:	e6f0      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 8003222:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003226:	f000 81b9 	beq.w	800359c <RI_GetRegCommandParser+0x680>
 800322a:	d92a      	bls.n	8003282 <RI_GetRegCommandParser+0x366>
 800322c:	f5b3 6f6d 	cmp.w	r3, #3792	; 0xed0
 8003230:	f000 81ad 	beq.w	800358e <RI_GetRegCommandParser+0x672>
 8003234:	d91b      	bls.n	800326e <RI_GetRegCommandParser+0x352>
 8003236:	f5b3 6f71 	cmp.w	r3, #3856	; 0xf10
 800323a:	f47f af45 	bne.w	80030c8 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) pHallSensor[motorID]);
 800323e:	48a8      	ldr	r0, [pc, #672]	; (80034e0 <RI_GetRegCommandParser+0x5c4>)
 8003240:	f006 fe46 	bl	8009ed0 <SPD_GetS16Speed>
 8003244:	8028      	strh	r0, [r5, #0]
 8003246:	2002      	movs	r0, #2
          *size = 2;
 8003248:	4603      	mov	r3, r0
 800324a:	e6db      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 800324c:	f241 4290 	movw	r2, #5264	; 0x1490
 8003250:	4293      	cmp	r3, r2
 8003252:	f000 8181 	beq.w	8003558 <RI_GetRegCommandParser+0x63c>
 8003256:	f241 42d0 	movw	r2, #5328	; 0x14d0
 800325a:	4293      	cmp	r3, r2
 800325c:	f47f af34 	bne.w	80030c8 <RI_GetRegCommandParser+0x1ac>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 8003260:	48a0      	ldr	r0, [pc, #640]	; (80034e4 <RI_GetRegCommandParser+0x5c8>)
 8003262:	f005 fd1d 	bl	8008ca0 <PID_GetKDDivisorPOW2>
 8003266:	8028      	strh	r0, [r5, #0]
 8003268:	2002      	movs	r0, #2
          *size = 2;
 800326a:	4603      	mov	r3, r0
 800326c:	e6ca      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 800326e:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8003272:	d003      	beq.n	800327c <RI_GetRegCommandParser+0x360>
 8003274:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8003278:	f47f af26 	bne.w	80030c8 <RI_GetRegCommandParser+0x1ac>
 800327c:	2002      	movs	r0, #2
 800327e:	4603      	mov	r3, r0
 8003280:	e6c0      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 8003282:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8003286:	f000 815d 	beq.w	8003544 <RI_GetRegCommandParser+0x628>
 800328a:	d940      	bls.n	800330e <RI_GetRegCommandParser+0x3f2>
 800328c:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8003290:	f47f af1a 	bne.w	80030c8 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8003294:	4894      	ldr	r0, [pc, #592]	; (80034e8 <RI_GetRegCommandParser+0x5cc>)
 8003296:	f7fe fd2b 	bl	8001cf0 <MCI_GetValphabeta>
 800329a:	9005      	str	r0, [sp, #20]
 800329c:	8028      	strh	r0, [r5, #0]
 800329e:	2002      	movs	r0, #2
          *size = 2;
 80032a0:	4603      	mov	r3, r0
 80032a2:	e6af      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 80032a4:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 80032a8:	f47f af0e 	bne.w	80030c8 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 80032ac:	488e      	ldr	r0, [pc, #568]	; (80034e8 <RI_GetRegCommandParser+0x5cc>)
 80032ae:	f7fe fce7 	bl	8001c80 <MCI_GetIalphabeta>
 80032b2:	900c      	str	r0, [sp, #48]	; 0x30
 80032b4:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80032b8:	8028      	strh	r0, [r5, #0]
              break;
 80032ba:	2002      	movs	r0, #2
          *size = 2;
 80032bc:	4603      	mov	r3, r0
              break;
 80032be:	e6a1      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 80032c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80032c4:	f000 8176 	beq.w	80035b4 <RI_GetRegCommandParser+0x698>
 80032c8:	d931      	bls.n	800332e <RI_GetRegCommandParser+0x412>
 80032ca:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80032ce:	f47f aefb 	bne.w	80030c8 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = MCI_GetIab(pMCIN).b;
 80032d2:	4885      	ldr	r0, [pc, #532]	; (80034e8 <RI_GetRegCommandParser+0x5cc>)
 80032d4:	f7fe fcc6 	bl	8001c64 <MCI_GetIab>
 80032d8:	900e      	str	r0, [sp, #56]	; 0x38
 80032da:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80032de:	8028      	strh	r0, [r5, #0]
              break;
 80032e0:	2002      	movs	r0, #2
          *size = 2;
 80032e2:	4603      	mov	r3, r0
              break;
 80032e4:	e68e      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 80032e6:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 80032ea:	f000 8161 	beq.w	80035b0 <RI_GetRegCommandParser+0x694>
 80032ee:	d93a      	bls.n	8003366 <RI_GetRegCommandParser+0x44a>
 80032f0:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 80032f4:	f000 817c 	beq.w	80035f0 <RI_GetRegCommandParser+0x6d4>
 80032f8:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 80032fc:	d127      	bne.n	800334e <RI_GetRegCommandParser+0x432>
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 80032fe:	4b77      	ldr	r3, [pc, #476]	; (80034dc <RI_GetRegCommandParser+0x5c0>)
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	f005 fc9f 	bl	8008c44 <PID_GetKI>
 8003306:	8028      	strh	r0, [r5, #0]
              break;
 8003308:	2002      	movs	r0, #2
          *size = 2;
 800330a:	4603      	mov	r3, r0
              break;
 800330c:	e67a      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 800330e:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8003312:	f000 8176 	beq.w	8003602 <RI_GetRegCommandParser+0x6e6>
 8003316:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 800331a:	f47f aed5 	bne.w	80030c8 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 800331e:	4872      	ldr	r0, [pc, #456]	; (80034e8 <RI_GetRegCommandParser+0x5cc>)
 8003320:	f7fe fcd8 	bl	8001cd4 <MCI_GetVqd>
 8003324:	9007      	str	r0, [sp, #28]
 8003326:	8028      	strh	r0, [r5, #0]
 8003328:	2002      	movs	r0, #2
          *size = 2;
 800332a:	4603      	mov	r3, r0
 800332c:	e66a      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 800332e:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8003332:	f000 815f 	beq.w	80035f4 <RI_GetRegCommandParser+0x6d8>
 8003336:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 800333a:	f47f aec5 	bne.w	80030c8 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 800333e:	4b6b      	ldr	r3, [pc, #428]	; (80034ec <RI_GetRegCommandParser+0x5d0>)
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	f005 fc5d 	bl	8008c00 <NTC_GetAvTemp_C>
 8003346:	8028      	strh	r0, [r5, #0]
              break;
 8003348:	2002      	movs	r0, #2
          *size = 2;
 800334a:	4603      	mov	r3, r0
              break;
 800334c:	e65a      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 800334e:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8003352:	f47f aeb9 	bne.w	80030c8 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8003356:	4b66      	ldr	r3, [pc, #408]	; (80034f0 <RI_GetRegCommandParser+0x5d4>)
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	f005 fc9d 	bl	8008c98 <PID_GetKD>
 800335e:	8028      	strh	r0, [r5, #0]
              break;
 8003360:	2002      	movs	r0, #2
          *size = 2;
 8003362:	4603      	mov	r3, r0
              break;
 8003364:	e64e      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 8003366:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800336a:	f000 813a 	beq.w	80035e2 <RI_GetRegCommandParser+0x6c6>
 800336e:	d90b      	bls.n	8003388 <RI_GetRegCommandParser+0x46c>
 8003370:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003374:	f47f aea8 	bne.w	80030c8 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 8003378:	4b5d      	ldr	r3, [pc, #372]	; (80034f0 <RI_GetRegCommandParser+0x5d4>)
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	f005 fc5e 	bl	8008c3c <PID_GetKP>
 8003380:	8028      	strh	r0, [r5, #0]
              break;
 8003382:	2002      	movs	r0, #2
          *size = 2;
 8003384:	4603      	mov	r3, r0
              break;
 8003386:	e63d      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 8003388:	2b90      	cmp	r3, #144	; 0x90
 800338a:	f000 80d4 	beq.w	8003536 <RI_GetRegCommandParser+0x61a>
 800338e:	2bd0      	cmp	r3, #208	; 0xd0
 8003390:	f47f ae9a 	bne.w	80030c8 <RI_GetRegCommandParser+0x1ac>
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8003394:	4853      	ldr	r0, [pc, #332]	; (80034e4 <RI_GetRegCommandParser+0x5c8>)
 8003396:	f005 fc55 	bl	8008c44 <PID_GetKI>
 800339a:	8028      	strh	r0, [r5, #0]
              break;
 800339c:	2002      	movs	r0, #2
          *size = 2;
 800339e:	4603      	mov	r3, r0
              break;
 80033a0:	e630      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 80033a2:	f641 3258 	movw	r2, #7000	; 0x1b58
 80033a6:	4293      	cmp	r3, r2
 80033a8:	f47f ae8e 	bne.w	80030c8 <RI_GetRegCommandParser+0x1ac>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 80033ac:	4b51      	ldr	r3, [pc, #324]	; (80034f4 <RI_GetRegCommandParser+0x5d8>)
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	f005 fce2 	bl	8008d78 <PQD_GetAvrgElMotorPowerW>
 80033b4:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 80033b8:	9b01      	ldr	r3, [sp, #4]
 80033ba:	602b      	str	r3, [r5, #0]
 80033bc:	2004      	movs	r0, #4
          *size = 4;
 80033be:	4603      	mov	r3, r0
 80033c0:	e620      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80033c2:	4849      	ldr	r0, [pc, #292]	; (80034e8 <RI_GetRegCommandParser+0x5cc>)
        if (freeSpace >= 2U)
 80033c4:	fa1f fa81 	uxth.w	sl, r1
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80033c8:	f7fe fc30 	bl	8001c2c <MCI_GetControlMode>
 80033cc:	7028      	strb	r0, [r5, #0]
              break;
 80033ce:	2001      	movs	r0, #1
          *size = 1;
 80033d0:	4603      	mov	r3, r0
              break;
 80033d2:	e617      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
    retVal = MCP_ERROR_STRING_FORMAT;
 80033d4:	2006      	movs	r0, #6
 80033d6:	e5d1      	b.n	8002f7c <RI_GetRegCommandParser+0x60>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 80033d8:	4843      	ldr	r0, [pc, #268]	; (80034e8 <RI_GetRegCommandParser+0x5cc>)
        if (freeSpace >= 2U)
 80033da:	fa1f fa81 	uxth.w	sl, r1
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 80033de:	f7fe fbd1 	bl	8001b84 <MCI_GetSTMState>
 80033e2:	7028      	strb	r0, [r5, #0]
        if (freeSpace >= 2U)
 80033e4:	2001      	movs	r0, #1
          *size = 1;
 80033e6:	4603      	mov	r3, r0
 80033e8:	e60c      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 80033ea:	4b43      	ldr	r3, [pc, #268]	; (80034f8 <RI_GetRegCommandParser+0x5dc>)
 80033ec:	681b      	ldr	r3, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80033ee:	f993 0000 	ldrsb.w	r0, [r3]
 80033f2:	2800      	cmp	r0, #0
 80033f4:	d03c      	beq.n	8003470 <RI_GetRegCommandParser+0x554>
 80033f6:	2901      	cmp	r1, #1
 80033f8:	ddec      	ble.n	80033d4 <RI_GetRegCommandParser+0x4b8>
 80033fa:	469e      	mov	lr, r3
 80033fc:	46ac      	mov	ip, r5
 80033fe:	f1c5 0201 	rsb	r2, r5, #1
 8003402:	e001      	b.n	8003408 <RI_GetRegCommandParser+0x4ec>
 8003404:	428b      	cmp	r3, r1
 8003406:	dae5      	bge.n	80033d4 <RI_GetRegCommandParser+0x4b8>
    *tempdestString = *tempsrcString;
 8003408:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800340c:	f91e 0f01 	ldrsb.w	r0, [lr, #1]!
 8003410:	eb0c 0302 	add.w	r3, ip, r2
 8003414:	b29b      	uxth	r3, r3
 8003416:	2800      	cmp	r0, #0
 8003418:	d1f4      	bne.n	8003404 <RI_GetRegCommandParser+0x4e8>
 800341a:	e5ed      	b.n	8002ff8 <RI_GetRegCommandParser+0xdc>
 800341c:	4b37      	ldr	r3, [pc, #220]	; (80034fc <RI_GetRegCommandParser+0x5e0>)
 800341e:	f993 0000 	ldrsb.w	r0, [r3]
 8003422:	b328      	cbz	r0, 8003470 <RI_GetRegCommandParser+0x554>
 8003424:	2901      	cmp	r1, #1
 8003426:	ddd5      	ble.n	80033d4 <RI_GetRegCommandParser+0x4b8>
 8003428:	469e      	mov	lr, r3
 800342a:	46ac      	mov	ip, r5
 800342c:	f1c5 0201 	rsb	r2, r5, #1
 8003430:	e001      	b.n	8003436 <RI_GetRegCommandParser+0x51a>
 8003432:	428b      	cmp	r3, r1
 8003434:	dace      	bge.n	80033d4 <RI_GetRegCommandParser+0x4b8>
    *tempdestString = *tempsrcString;
 8003436:	f80c 0b01 	strb.w	r0, [ip], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800343a:	f91e 0f01 	ldrsb.w	r0, [lr, #1]!
 800343e:	eb0c 0302 	add.w	r3, ip, r2
 8003442:	b29b      	uxth	r3, r3
 8003444:	2800      	cmp	r0, #0
 8003446:	d1f4      	bne.n	8003432 <RI_GetRegCommandParser+0x516>
 8003448:	e5d6      	b.n	8002ff8 <RI_GetRegCommandParser+0xdc>
              memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 800344a:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <RI_GetRegCommandParser+0x5e4>)
 800344c:	681b      	ldr	r3, [r3, #0]
        if (freeSpace >= 2U)
 800344e:	fa1f fa81 	uxth.w	sl, r1
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8003452:	f8d3 c000 	ldr.w	ip, [r3]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800345c:	f8c2 e008 	str.w	lr, [r2, #8]
 8003460:	f8c2 c000 	str.w	ip, [r2]
 8003464:	6051      	str	r1, [r2, #4]
 8003466:	899b      	ldrh	r3, [r3, #12]
 8003468:	8193      	strh	r3, [r2, #12]
        if (freeSpace >= 2U)
 800346a:	2010      	movs	r0, #16
        *size = (*rawSize) + 2U;
 800346c:	4603      	mov	r3, r0
 800346e:	e5c9      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003470:	2001      	movs	r0, #1
 8003472:	46ac      	mov	ip, r5
  *size= 1U ; /* /0 is the min String size */
 8003474:	4603      	mov	r3, r0
 8003476:	e5c0      	b.n	8002ffa <RI_GetRegCommandParser+0xde>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8003478:	481b      	ldr	r0, [pc, #108]	; (80034e8 <RI_GetRegCommandParser+0x5cc>)
 800347a:	f7fe fbd1 	bl	8001c20 <MCI_GetFaultState>
 800347e:	6028      	str	r0, [r5, #0]
 8003480:	2004      	movs	r0, #4
          *size = 4;
 8003482:	4603      	mov	r3, r0
 8003484:	e5be      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003486:	4818      	ldr	r0, [pc, #96]	; (80034e8 <RI_GetRegCommandParser+0x5cc>)
 8003488:	f7fe fbe8 	bl	8001c5c <MCI_GetMecSpeedRefUnit>
 800348c:	e631      	b.n	80030f2 <RI_GetRegCommandParser+0x1d6>
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 800348e:	233c      	movs	r3, #60	; 0x3c
            if (((*rawSize) + 2U) > freeSpace)
 8003490:	293d      	cmp	r1, #61	; 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003492:	802b      	strh	r3, [r5, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003494:	f67f ad87 	bls.w	8002fa6 <RI_GetRegCommandParser+0x8a>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8003498:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <RI_GetRegCommandParser+0x5e8>)
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f103 0b30 	add.w	fp, r3, #48	; 0x30
 80034a0:	f8d3 e000 	ldr.w	lr, [r3]
 80034a4:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80034a8:	6898      	ldr	r0, [r3, #8]
 80034aa:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 80034ae:	f8c2 a00c 	str.w	sl, [r2, #12]
 80034b2:	3310      	adds	r3, #16
 80034b4:	455b      	cmp	r3, fp
 80034b6:	f8c2 e000 	str.w	lr, [r2]
 80034ba:	f8c2 c004 	str.w	ip, [r2, #4]
 80034be:	6090      	str	r0, [r2, #8]
 80034c0:	f102 0210 	add.w	r2, r2, #16
 80034c4:	d1ec      	bne.n	80034a0 <RI_GetRegCommandParser+0x584>
 80034c6:	6818      	ldr	r0, [r3, #0]
        if (freeSpace >= 2U)
 80034c8:	fa1f fa81 	uxth.w	sl, r1
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80034cc:	6859      	ldr	r1, [r3, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	6010      	str	r0, [r2, #0]
        if (freeSpace >= 2U)
 80034d2:	203e      	movs	r0, #62	; 0x3e
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80034d4:	6093      	str	r3, [r2, #8]
 80034d6:	6051      	str	r1, [r2, #4]
        *size = (*rawSize) + 2U;
 80034d8:	4603      	mov	r3, r0
 80034da:	e593      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
 80034dc:	20000344 	.word	0x20000344
 80034e0:	200000e0 	.word	0x200000e0
 80034e4:	20000200 	.word	0x20000200
 80034e8:	20000744 	.word	0x20000744
 80034ec:	20000350 	.word	0x20000350
 80034f0:	20000348 	.word	0x20000348
 80034f4:	20000340 	.word	0x20000340
 80034f8:	20000360 	.word	0x20000360
 80034fc:	0800a240 	.word	0x0800a240
 8003500:	20000354 	.word	0x20000354
 8003504:	2000035c 	.word	0x2000035c
            *rawSize = 4;
 8003508:	2304      	movs	r3, #4
 800350a:	802b      	strh	r3, [r5, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 800350c:	4844      	ldr	r0, [pc, #272]	; (8003620 <RI_GetRegCommandParser+0x704>)
        if (freeSpace >= 2U)
 800350e:	fa1f fa81 	uxth.w	sl, r1
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8003512:	f7fe fb91 	bl	8001c38 <MCI_GetLastRampFinalTorque>
 8003516:	8068      	strh	r0, [r5, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003518:	4841      	ldr	r0, [pc, #260]	; (8003620 <RI_GetRegCommandParser+0x704>)
 800351a:	f7fe fb91 	bl	8001c40 <MCI_GetLastRampFinalDuration>
 800351e:	e618      	b.n	8003152 <RI_GetRegCommandParser+0x236>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003520:	230e      	movs	r3, #14
            if (((*rawSize) + 2U) > freeSpace)
 8003522:	290f      	cmp	r1, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003524:	802b      	strh	r3, [r5, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003526:	f67f ad3e 	bls.w	8002fa6 <RI_GetRegCommandParser+0x8a>
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 800352a:	6833      	ldr	r3, [r6, #0]
        if (freeSpace >= 2U)
 800352c:	fa1f fa81 	uxth.w	sl, r1
 8003530:	e78f      	b.n	8003452 <RI_GetRegCommandParser+0x536>
  uint8_t retVal = MCP_CMD_NOK;
 8003532:	2001      	movs	r0, #1
 8003534:	e522      	b.n	8002f7c <RI_GetRegCommandParser+0x60>
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 8003536:	483b      	ldr	r0, [pc, #236]	; (8003624 <RI_GetRegCommandParser+0x708>)
 8003538:	f005 fb80 	bl	8008c3c <PID_GetKP>
 800353c:	8028      	strh	r0, [r5, #0]
 800353e:	2002      	movs	r0, #2
          *size = 2;
 8003540:	4603      	mov	r3, r0
 8003542:	e55f      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8003544:	4836      	ldr	r0, [pc, #216]	; (8003620 <RI_GetRegCommandParser+0x704>)
 8003546:	f7fe fbc5 	bl	8001cd4 <MCI_GetVqd>
 800354a:	9006      	str	r0, [sp, #24]
 800354c:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8003550:	8028      	strh	r0, [r5, #0]
 8003552:	2002      	movs	r0, #2
          *size = 2;
 8003554:	4603      	mov	r3, r0
 8003556:	e555      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8003558:	4832      	ldr	r0, [pc, #200]	; (8003624 <RI_GetRegCommandParser+0x708>)
 800355a:	f005 fb81 	bl	8008c60 <PID_GetKIDivisorPOW2>
 800355e:	8028      	strh	r0, [r5, #0]
 8003560:	2002      	movs	r0, #2
          *size = 2;
 8003562:	4603      	mov	r3, r0
 8003564:	e54e      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003566:	482e      	ldr	r0, [pc, #184]	; (8003620 <RI_GetRegCommandParser+0x704>)
 8003568:	f7fe fb98 	bl	8001c9c <MCI_GetIqd>
 800356c:	900b      	str	r0, [sp, #44]	; 0x2c
 800356e:	8028      	strh	r0, [r5, #0]
              break;
 8003570:	2002      	movs	r0, #2
          *size = 2;
 8003572:	4603      	mov	r3, r0
              break;
 8003574:	e546      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003576:	482a      	ldr	r0, [pc, #168]	; (8003620 <RI_GetRegCommandParser+0x704>)
 8003578:	f7fe fb82 	bl	8001c80 <MCI_GetIalphabeta>
 800357c:	900d      	str	r0, [sp, #52]	; 0x34
 800357e:	8028      	strh	r0, [r5, #0]
              break;
 8003580:	2002      	movs	r0, #2
          *size = 2;
 8003582:	4603      	mov	r3, r0
              break;
 8003584:	e53e      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 8003586:	4b28      	ldr	r3, [pc, #160]	; (8003628 <RI_GetRegCommandParser+0x70c>)
 8003588:	e644      	b.n	8003214 <RI_GetRegCommandParser+0x2f8>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 800358a:	4b28      	ldr	r3, [pc, #160]	; (800362c <RI_GetRegCommandParser+0x710>)
 800358c:	e58c      	b.n	80030a8 <RI_GetRegCommandParser+0x18c>
              *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) pHallSensor[motorID]);
 800358e:	4828      	ldr	r0, [pc, #160]	; (8003630 <RI_GetRegCommandParser+0x714>)
 8003590:	f006 fc5c 	bl	8009e4c <SPD_GetElAngle>
 8003594:	8028      	strh	r0, [r5, #0]
 8003596:	2002      	movs	r0, #2
          *size = 2;
 8003598:	4603      	mov	r3, r0
 800359a:	e533      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 800359c:	4820      	ldr	r0, [pc, #128]	; (8003620 <RI_GetRegCommandParser+0x704>)
 800359e:	f7fe fba7 	bl	8001cf0 <MCI_GetValphabeta>
 80035a2:	9004      	str	r0, [sp, #16]
 80035a4:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80035a8:	8028      	strh	r0, [r5, #0]
 80035aa:	2002      	movs	r0, #2
          *size = 2;
 80035ac:	4603      	mov	r3, r0
 80035ae:	e529      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 80035b0:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <RI_GetRegCommandParser+0x70c>)
 80035b2:	e6a5      	b.n	8003300 <RI_GetRegCommandParser+0x3e4>
              *regdata16 = MCI_GetIab(pMCIN).a;
 80035b4:	481a      	ldr	r0, [pc, #104]	; (8003620 <RI_GetRegCommandParser+0x704>)
 80035b6:	f7fe fb55 	bl	8001c64 <MCI_GetIab>
 80035ba:	900f      	str	r0, [sp, #60]	; 0x3c
 80035bc:	8028      	strh	r0, [r5, #0]
              break;
 80035be:	2002      	movs	r0, #2
          *size = 2;
 80035c0:	4603      	mov	r3, r0
              break;
 80035c2:	e51f      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 80035c4:	4817      	ldr	r0, [pc, #92]	; (8003624 <RI_GetRegCommandParser+0x708>)
 80035c6:	f005 fb43 	bl	8008c50 <PID_GetKPDivisorPOW2>
 80035ca:	8028      	strh	r0, [r5, #0]
 80035cc:	2002      	movs	r0, #2
          *size = 2;
 80035ce:	4603      	mov	r3, r0
 80035d0:	e518      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 80035d2:	4813      	ldr	r0, [pc, #76]	; (8003620 <RI_GetRegCommandParser+0x704>)
 80035d4:	f7fe fb70 	bl	8001cb8 <MCI_GetIqdref>
 80035d8:	9009      	str	r0, [sp, #36]	; 0x24
 80035da:	8028      	strh	r0, [r5, #0]
              break;
 80035dc:	2002      	movs	r0, #2
          *size = 2;
 80035de:	4603      	mov	r3, r0
              break;
 80035e0:	e510      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 80035e2:	4810      	ldr	r0, [pc, #64]	; (8003624 <RI_GetRegCommandParser+0x708>)
 80035e4:	f005 fb58 	bl	8008c98 <PID_GetKD>
 80035e8:	8028      	strh	r0, [r5, #0]
              break;
 80035ea:	2002      	movs	r0, #2
          *size = 2;
 80035ec:	4603      	mov	r3, r0
              break;
 80035ee:	e509      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 80035f0:	4b0e      	ldr	r3, [pc, #56]	; (800362c <RI_GetRegCommandParser+0x710>)
 80035f2:	e6c2      	b.n	800337a <RI_GetRegCommandParser+0x45e>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 80035f4:	480f      	ldr	r0, [pc, #60]	; (8003634 <RI_GetRegCommandParser+0x718>)
 80035f6:	f005 f861 	bl	80086bc <VBS_GetAvBusVoltage_V>
 80035fa:	8028      	strh	r0, [r5, #0]
              break;
 80035fc:	2002      	movs	r0, #2
          *size = 2;
 80035fe:	4603      	mov	r3, r0
              break;
 8003600:	e500      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8003602:	4807      	ldr	r0, [pc, #28]	; (8003620 <RI_GetRegCommandParser+0x704>)
 8003604:	f7fe fb58 	bl	8001cb8 <MCI_GetIqdref>
 8003608:	9008      	str	r0, [sp, #32]
 800360a:	f3c0 400f 	ubfx	r0, r0, #16, #16
 800360e:	8028      	strh	r0, [r5, #0]
 8003610:	2002      	movs	r0, #2
          *size = 2;
 8003612:	4603      	mov	r3, r0
 8003614:	e4f6      	b.n	8003004 <RI_GetRegCommandParser+0xe8>
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <RI_GetRegCommandParser+0x710>)
 8003618:	e69e      	b.n	8003358 <RI_GetRegCommandParser+0x43c>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 800361a:	4b04      	ldr	r3, [pc, #16]	; (800362c <RI_GetRegCommandParser+0x710>)
 800361c:	e5da      	b.n	80031d4 <RI_GetRegCommandParser+0x2b8>
 800361e:	bf00      	nop
 8003620:	20000744 	.word	0x20000744
 8003624:	20000200 	.word	0x20000200
 8003628:	20000348 	.word	0x20000348
 800362c:	20000344 	.word	0x20000344
 8003630:	200000e0 	.word	0x200000e0
 8003634:	20000000 	.word	0x20000000

08003638 <RI_GetIDSize>:

  return (retVal);
}
uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8003638:	f000 0038 	and.w	r0, r0, #56	; 0x38
 800363c:	3808      	subs	r0, #8
 800363e:	b2c0      	uxtb	r0, r0
 8003640:	2810      	cmp	r0, #16
 8003642:	bf9a      	itte	ls
 8003644:	4b01      	ldrls	r3, [pc, #4]	; (800364c <RI_GetIDSize+0x14>)
 8003646:	5c18      	ldrbls	r0, [r3, r0]
 8003648:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 800364a:	4770      	bx	lr
 800364c:	0800a39c 	.word	0x0800a39c

08003650 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[vmotorID];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8003650:	f000 0338 	and.w	r3, r0, #56	; 0x38
 8003654:	2b10      	cmp	r3, #16
 8003656:	d003      	beq.n	8003660 <RI_GetPtrReg+0x10>
            break;
          }

          default:
          {
            *dataPtr = &nullData16;
 8003658:	4b41      	ldr	r3, [pc, #260]	; (8003760 <RI_GetPtrReg+0x110>)
 800365a:	600b      	str	r3, [r1, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 800365c:	2005      	movs	r0, #5
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
}
 800365e:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8003660:	f020 0007 	bic.w	r0, r0, #7
 8003664:	f5b0 6f19 	cmp.w	r0, #2448	; 0x990
 8003668:	b283      	uxth	r3, r0
 800366a:	d050      	beq.n	800370e <RI_GetPtrReg+0xbe>
 800366c:	d80f      	bhi.n	800368e <RI_GetPtrReg+0x3e>
 800366e:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8003672:	d052      	beq.n	800371a <RI_GetPtrReg+0xca>
 8003674:	d922      	bls.n	80036bc <RI_GetPtrReg+0x6c>
 8003676:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 800367a:	d054      	beq.n	8003726 <RI_GetPtrReg+0xd6>
 800367c:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8003680:	d113      	bne.n	80036aa <RI_GetPtrReg+0x5a>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8003682:	4b38      	ldr	r3, [pc, #224]	; (8003764 <RI_GetPtrReg+0x114>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	3310      	adds	r3, #16
  uint8_t retVal = MCP_CMD_OK;
 8003688:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 800368a:	600b      	str	r3, [r1, #0]
            break;
 800368c:	4770      	bx	lr
 800368e:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003692:	d04e      	beq.n	8003732 <RI_GetPtrReg+0xe2>
 8003694:	d91e      	bls.n	80036d4 <RI_GetPtrReg+0x84>
 8003696:	f5b3 6f6d 	cmp.w	r3, #3792	; 0xed0
 800369a:	d05c      	beq.n	8003756 <RI_GetPtrReg+0x106>
 800369c:	f5b3 6f71 	cmp.w	r3, #3856	; 0xf10
 80036a0:	d1da      	bne.n	8003658 <RI_GetPtrReg+0x8>
            *dataPtr = &(pHallSensor[vmotorID]->_Super.hAvrMecSpeedUnit);
 80036a2:	4b31      	ldr	r3, [pc, #196]	; (8003768 <RI_GetPtrReg+0x118>)
 80036a4:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80036a6:	2000      	movs	r0, #0
            break;
 80036a8:	4770      	bx	lr
 80036aa:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 80036ae:	d1d3      	bne.n	8003658 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80036b0:	4b2c      	ldr	r3, [pc, #176]	; (8003764 <RI_GetPtrReg+0x114>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	330c      	adds	r3, #12
  uint8_t retVal = MCP_CMD_OK;
 80036b6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80036b8:	600b      	str	r3, [r1, #0]
            break;
 80036ba:	4770      	bx	lr
 80036bc:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80036c0:	d03d      	beq.n	800373e <RI_GetPtrReg+0xee>
 80036c2:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 80036c6:	d111      	bne.n	80036ec <RI_GetPtrReg+0x9c>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80036c8:	4b26      	ldr	r3, [pc, #152]	; (8003764 <RI_GetPtrReg+0x114>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	3304      	adds	r3, #4
  uint8_t retVal = MCP_CMD_OK;
 80036ce:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80036d0:	600b      	str	r3, [r1, #0]
            break;
 80036d2:	4770      	bx	lr
 80036d4:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 80036d8:	d037      	beq.n	800374a <RI_GetPtrReg+0xfa>
 80036da:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 80036de:	d10d      	bne.n	80036fc <RI_GetPtrReg+0xac>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 80036e0:	4b20      	ldr	r3, [pc, #128]	; (8003764 <RI_GetPtrReg+0x114>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	331a      	adds	r3, #26
  uint8_t retVal = MCP_CMD_OK;
 80036e6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 80036e8:	600b      	str	r3, [r1, #0]
            break;
 80036ea:	4770      	bx	lr
 80036ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80036f0:	d1b2      	bne.n	8003658 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80036f2:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <RI_GetPtrReg+0x114>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80036f8:	2000      	movs	r0, #0
             break;
 80036fa:	4770      	bx	lr
 80036fc:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8003700:	d1aa      	bne.n	8003658 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003702:	4b18      	ldr	r3, [pc, #96]	; (8003764 <RI_GetPtrReg+0x114>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	3316      	adds	r3, #22
  uint8_t retVal = MCP_CMD_OK;
 8003708:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 800370a:	600b      	str	r3, [r1, #0]
            break;
 800370c:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <RI_GetPtrReg+0x114>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	3312      	adds	r3, #18
  uint8_t retVal = MCP_CMD_OK;
 8003714:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003716:	600b      	str	r3, [r1, #0]
            break;
 8003718:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <RI_GetPtrReg+0x114>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	3306      	adds	r3, #6
  uint8_t retVal = MCP_CMD_OK;
 8003720:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003722:	600b      	str	r3, [r1, #0]
            break;
 8003724:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003726:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <RI_GetPtrReg+0x114>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	330e      	adds	r3, #14
  uint8_t retVal = MCP_CMD_OK;
 800372c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 800372e:	600b      	str	r3, [r1, #0]
            break;
 8003730:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8003732:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <RI_GetPtrReg+0x114>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	331c      	adds	r3, #28
  uint8_t retVal = MCP_CMD_OK;
 8003738:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 800373a:	600b      	str	r3, [r1, #0]
            break;
 800373c:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <RI_GetPtrReg+0x114>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	3302      	adds	r3, #2
  uint8_t retVal = MCP_CMD_OK;
 8003744:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003746:	600b      	str	r3, [r1, #0]
            break;
 8003748:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <RI_GetPtrReg+0x114>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	3318      	adds	r3, #24
  uint8_t retVal = MCP_CMD_OK;
 8003750:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003752:	600b      	str	r3, [r1, #0]
            break;
 8003754:	4770      	bx	lr
            *dataPtr = &(pHallSensor[vmotorID]->_Super.hElAngle);
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <RI_GetPtrReg+0x11c>)
 8003758:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800375a:	2000      	movs	r0, #0
            break;
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20001936 	.word	0x20001936
 8003764:	20000744 	.word	0x20000744
 8003768:	200000ec 	.word	0x200000ec
 800376c:	200000e4 	.word	0x200000e4

08003770 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003770:	4a6f      	ldr	r2, [pc, #444]	; (8003930 <RCM_RegisterRegConv+0x1c0>)
{
 8003772:	b530      	push	{r4, r5, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003774:	6814      	ldr	r4, [r2, #0]
{
 8003776:	4601      	mov	r1, r0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003778:	2c00      	cmp	r4, #0
 800377a:	f000 8088 	beq.w	800388e <RCM_RegisterRegConv+0x11e>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800377e:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003782:	7923      	ldrb	r3, [r4, #4]
 8003784:	459c      	cmp	ip, r3
 8003786:	d01f      	beq.n	80037c8 <RCM_RegisterRegConv+0x58>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003788:	6853      	ldr	r3, [r2, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8097 	beq.w	80038be <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003790:	791c      	ldrb	r4, [r3, #4]
 8003792:	4564      	cmp	r4, ip
  uint8_t handle = 255U;
 8003794:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003798:	f000 8083 	beq.w	80038a2 <RCM_RegisterRegConv+0x132>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800379c:	6894      	ldr	r4, [r2, #8]
 800379e:	2c00      	cmp	r4, #0
 80037a0:	f000 80ad 	beq.w	80038fe <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80037a4:	7923      	ldrb	r3, [r4, #4]
 80037a6:	4563      	cmp	r3, ip
 80037a8:	f000 8082 	beq.w	80038b0 <RCM_RegisterRegConv+0x140>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80037ac:	68d3      	ldr	r3, [r2, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80ae 	beq.w	8003910 <RCM_RegisterRegConv+0x1a0>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80037b4:	791c      	ldrb	r4, [r3, #4]
 80037b6:	4564      	cmp	r4, ip
 80037b8:	f000 808c 	beq.w	80038d4 <RCM_RegisterRegConv+0x164>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80037bc:	2803      	cmp	r0, #3
 80037be:	bf88      	it	hi
 80037c0:	20ff      	movhi	r0, #255	; 0xff
 80037c2:	f240 80b1 	bls.w	8003928 <RCM_RegisterRegConv+0x1b8>
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 80037c6:	bd30      	pop	{r4, r5, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80037c8:	6803      	ldr	r3, [r0, #0]
 80037ca:	6820      	ldr	r0, [r4, #0]
 80037cc:	4283      	cmp	r3, r0
 80037ce:	d1db      	bne.n	8003788 <RCM_RegisterRegConv+0x18>
    uint8_t i = 0;
 80037d0:	2000      	movs	r0, #0
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80037d2:	4c58      	ldr	r4, [pc, #352]	; (8003934 <RCM_RegisterRegConv+0x1c4>)
      RCM_handle_array [handle] = regConv;
 80037d4:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037d8:	689a      	ldr	r2, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80037da:	2500      	movs	r5, #0
 80037dc:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 80037e0:	07d5      	lsls	r5, r2, #31
 80037e2:	d422      	bmi.n	800382a <RCM_RegisterRegConv+0xba>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80037e4:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80037e6:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80037e8:	f022 0204 	bic.w	r2, r2, #4
 80037ec:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80037ee:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80037f0:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80037f2:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80037f4:	f022 0220 	bic.w	r2, r2, #32
 80037f8:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80037fa:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003802:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003806:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800380a:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	2a00      	cmp	r2, #0
 8003810:	dbfc      	blt.n	800380c <RCM_RegisterRegConv+0x9c>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003812:	681a      	ldr	r2, [r3, #0]
        while (0U == LL_ADC_IsActiveFlag_ADRDY(regConv->regADC))
 8003814:	07d4      	lsls	r4, r2, #31
 8003816:	d408      	bmi.n	800382a <RCM_RegisterRegConv+0xba>
  MODIFY_REG(ADCx->CR,
 8003818:	4c47      	ldr	r4, [pc, #284]	; (8003938 <RCM_RegisterRegConv+0x1c8>)
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	4022      	ands	r2, r4
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	07d2      	lsls	r2, r2, #31
 8003828:	d5f7      	bpl.n	800381a <RCM_RegisterRegConv+0xaa>
      RCM_NoInj_array[handle].enable = false;
 800382a:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800382e:	4c43      	ldr	r4, [pc, #268]	; (800393c <RCM_RegisterRegConv+0x1cc>)
 8003830:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003834:	2200      	movs	r2, #0
 8003836:	f804 200c 	strb.w	r2, [r4, ip]
      RCM_NoInj_array[handle].prev = handle;
 800383a:	4464      	add	r4, ip
 800383c:	f360 0207 	bfi	r2, r0, #0, #8
 8003840:	f360 220f 	bfi	r2, r0, #8, #8
 8003844:	80a2      	strh	r2, [r4, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003848:	f022 020f 	bic.w	r2, r2, #15
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 800384e:	790c      	ldrb	r4, [r1, #4]
 8003850:	2c09      	cmp	r4, #9
 8003852:	d846      	bhi.n	80038e2 <RCM_RegisterRegConv+0x172>
 8003854:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8003858:	06a2      	lsls	r2, r4, #26
 800385a:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 800385e:	2501      	movs	r5, #1
 8003860:	fa05 f404 	lsl.w	r4, r5, r4
 8003864:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003866:	0dd4      	lsrs	r4, r2, #23
  MODIFY_REG(*preg,
 8003868:	6889      	ldr	r1, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800386a:	f004 0404 	and.w	r4, r4, #4
 800386e:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8003870:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003874:	fa01 fc02 	lsl.w	ip, r1, r2
 8003878:	f04f 0e07 	mov.w	lr, #7
 800387c:	58e1      	ldr	r1, [r4, r3]
 800387e:	fa0e f202 	lsl.w	r2, lr, r2
 8003882:	ea21 0202 	bic.w	r2, r1, r2
 8003886:	ea42 020c 	orr.w	r2, r2, ip
 800388a:	50e2      	str	r2, [r4, r3]
}
 800388c:	bd30      	pop	{r4, r5, pc}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800388e:	6853      	ldr	r3, [r2, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d041      	beq.n	8003918 <RCM_RegisterRegConv+0x1a8>
 8003894:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 8003898:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800389a:	791c      	ldrb	r4, [r3, #4]
 800389c:	4564      	cmp	r4, ip
 800389e:	f47f af7d 	bne.w	800379c <RCM_RegisterRegConv+0x2c>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80038a2:	681c      	ldr	r4, [r3, #0]
 80038a4:	680b      	ldr	r3, [r1, #0]
 80038a6:	429c      	cmp	r4, r3
 80038a8:	f47f af78 	bne.w	800379c <RCM_RegisterRegConv+0x2c>
      i++;
 80038ac:	2001      	movs	r0, #1
 80038ae:	e790      	b.n	80037d2 <RCM_RegisterRegConv+0x62>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80038b0:	6824      	ldr	r4, [r4, #0]
 80038b2:	680b      	ldr	r3, [r1, #0]
 80038b4:	429c      	cmp	r4, r3
 80038b6:	f47f af79 	bne.w	80037ac <RCM_RegisterRegConv+0x3c>
      i++;
 80038ba:	2002      	movs	r0, #2
 80038bc:	e789      	b.n	80037d2 <RCM_RegisterRegConv+0x62>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80038be:	6894      	ldr	r4, [r2, #8]
      i++;
 80038c0:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80038c2:	2c00      	cmp	r4, #0
 80038c4:	f47f af6e 	bne.w	80037a4 <RCM_RegisterRegConv+0x34>
 80038c8:	68d3      	ldr	r3, [r2, #12]
 80038ca:	b36b      	cbz	r3, 8003928 <RCM_RegisterRegConv+0x1b8>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80038cc:	791d      	ldrb	r5, [r3, #4]
 80038ce:	790c      	ldrb	r4, [r1, #4]
 80038d0:	42a5      	cmp	r5, r4
 80038d2:	d129      	bne.n	8003928 <RCM_RegisterRegConv+0x1b8>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80038d4:	681c      	ldr	r4, [r3, #0]
 80038d6:	680b      	ldr	r3, [r1, #0]
 80038d8:	429c      	cmp	r4, r3
 80038da:	f47f af6f 	bne.w	80037bc <RCM_RegisterRegConv+0x4c>
      i++;
 80038de:	2003      	movs	r0, #3
 80038e0:	e777      	b.n	80037d2 <RCM_RegisterRegConv+0x62>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80038e2:	2203      	movs	r2, #3
 80038e4:	f06f 051d 	mvn.w	r5, #29
 80038e8:	fb12 5504 	smlabb	r5, r2, r4, r5
 80038ec:	2201      	movs	r2, #1
 80038ee:	40a2      	lsls	r2, r4
 80038f0:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 80038f4:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 80038f8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80038fc:	e7b3      	b.n	8003866 <RCM_RegisterRegConv+0xf6>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80038fe:	2804      	cmp	r0, #4
 8003900:	d910      	bls.n	8003924 <RCM_RegisterRegConv+0x1b4>
 8003902:	68d3      	ldr	r3, [r2, #12]
 8003904:	b113      	cbz	r3, 800390c <RCM_RegisterRegConv+0x19c>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003906:	7918      	ldrb	r0, [r3, #4]
 8003908:	4584      	cmp	ip, r0
 800390a:	d00f      	beq.n	800392c <RCM_RegisterRegConv+0x1bc>
 800390c:	680b      	ldr	r3, [r1, #0]
 800390e:	e7d4      	b.n	80038ba <RCM_RegisterRegConv+0x14a>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003910:	2804      	cmp	r0, #4
 8003912:	680b      	ldr	r3, [r1, #0]
 8003914:	d8e3      	bhi.n	80038de <RCM_RegisterRegConv+0x16e>
 8003916:	e75c      	b.n	80037d2 <RCM_RegisterRegConv+0x62>
 8003918:	6894      	ldr	r4, [r2, #8]
 800391a:	b11c      	cbz	r4, 8003924 <RCM_RegisterRegConv+0x1b4>
 800391c:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 8003920:	4618      	mov	r0, r3
 8003922:	e73f      	b.n	80037a4 <RCM_RegisterRegConv+0x34>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003924:	4620      	mov	r0, r4
 8003926:	e7cf      	b.n	80038c8 <RCM_RegisterRegConv+0x158>
 8003928:	680b      	ldr	r3, [r1, #0]
 800392a:	e752      	b.n	80037d2 <RCM_RegisterRegConv+0x62>
      i++;
 800392c:	2002      	movs	r0, #2
 800392e:	e7d1      	b.n	80038d4 <RCM_RegisterRegConv+0x164>
 8003930:	20001978 	.word	0x20001978
 8003934:	20001938 	.word	0x20001938
 8003938:	7fffffc0 	.word	0x7fffffc0
 800393c:	20001958 	.word	0x20001958

08003940 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8003940:	4b5e      	ldr	r3, [pc, #376]	; (8003abc <RCM_ExecRegularConv+0x17c>)
 8003942:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 8003946:	b510      	push	{r4, lr}
  if (false == RCM_NoInj_array [handle].enable)
 8003948:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800394c:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 8003950:	2a00      	cmp	r2, #0
 8003952:	d13c      	bne.n	80039ce <RCM_ExecRegularConv+0x8e>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8003954:	7819      	ldrb	r1, [r3, #0]
 8003956:	b9a9      	cbnz	r1, 8003984 <RCM_ExecRegularConv+0x44>
  uint8_t LastEnable = RCM_MAX_CONV;
 8003958:	2204      	movs	r2, #4
      if (true == RCM_NoInj_array [i].enable)
 800395a:	7999      	ldrb	r1, [r3, #6]
 800395c:	2900      	cmp	r1, #0
 800395e:	d07e      	beq.n	8003a5e <RCM_ExecRegularConv+0x11e>
      {
        if (RCM_NoInj_array[i].next > handle)
 8003960:	7ad9      	ldrb	r1, [r3, #11]
 8003962:	4288      	cmp	r0, r1
 8003964:	f0c0 809a 	bcc.w	8003a9c <RCM_ExecRegularConv+0x15c>
      if (true == RCM_NoInj_array [i].enable)
 8003968:	7b1a      	ldrb	r2, [r3, #12]
 800396a:	2a00      	cmp	r2, #0
 800396c:	f000 8099 	beq.w	8003aa2 <RCM_ExecRegularConv+0x162>
        if (RCM_NoInj_array[i].next > handle)
 8003970:	7c59      	ldrb	r1, [r3, #17]
 8003972:	4288      	cmp	r0, r1
 8003974:	f0c0 809f 	bcc.w	8003ab6 <RCM_ExecRegularConv+0x176>
      if (true == RCM_NoInj_array [i].enable)
 8003978:	7c9a      	ldrb	r2, [r3, #18]
 800397a:	2a00      	cmp	r2, #0
 800397c:	f040 8095 	bne.w	8003aaa <RCM_ExecRegularConv+0x16a>
      }
      else
      {
        /* nothing to do */
      }
      i++;
 8003980:	2202      	movs	r2, #2
 8003982:	e073      	b.n	8003a6c <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array[i].next > handle)
 8003984:	7959      	ldrb	r1, [r3, #5]
 8003986:	4281      	cmp	r1, r0
 8003988:	d9e7      	bls.n	800395a <RCM_ExecRegularConv+0x1a>
      if (true == RCM_NoInj_array [i].enable)
 800398a:	4696      	mov	lr, r2
          RCM_NoInj_array[handle].next = formerNext;
 800398c:	eb0c 0400 	add.w	r4, ip, r0
 8003990:	eb03 0444 	add.w	r4, r3, r4, lsl #1
          RCM_NoInj_array[i].next = handle;
 8003994:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
          RCM_NoInj_array[handle].prev = i;
 8003998:	7122      	strb	r2, [r4, #4]
          RCM_NoInj_array[handle].next = formerNext;
 800399a:	7161      	strb	r1, [r4, #5]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800399c:	4c48      	ldr	r4, [pc, #288]	; (8003ac0 <RCM_ExecRegularConv+0x180>)
          RCM_NoInj_array[formerNext].prev = handle;
 800399e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[i].next = handle;
 80039a2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 80039a6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80039aa:	7822      	ldrb	r2, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 80039ac:	f88e 0005 	strb.w	r0, [lr, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 80039b0:	7108      	strb	r0, [r1, #4]
    RCM_NoInj_array[handle].enable = true;
 80039b2:	eb0c 0100 	add.w	r1, ip, r0
 80039b6:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80039ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array[handle].enable = true;
 80039be:	f823 e011 	strh.w	lr, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80039c2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80039c6:	7852      	ldrb	r2, [r2, #1]
 80039c8:	4572      	cmp	r2, lr
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 80039ca:	bf18      	it	ne
 80039cc:	7020      	strbne	r0, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 80039ce:	4a3d      	ldr	r2, [pc, #244]	; (8003ac4 <RCM_ExecRegularConv+0x184>)
 80039d0:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 80039d4:	2a00      	cmp	r2, #0
 80039d6:	d132      	bne.n	8003a3e <RCM_ExecRegularConv+0xfe>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80039d8:	4a3b      	ldr	r2, [pc, #236]	; (8003ac8 <RCM_ExecRegularConv+0x188>)
 80039da:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80039de:	7914      	ldrb	r4, [r2, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80039e0:	6811      	ldr	r1, [r2, #0]
 80039e2:	2c09      	cmp	r4, #9
 80039e4:	d930      	bls.n	8003a48 <RCM_ExecRegularConv+0x108>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80039e6:	2203      	movs	r2, #3
 80039e8:	f06f 0e1d 	mvn.w	lr, #29
 80039ec:	fb12 ee04 	smlabb	lr, r2, r4, lr
 80039f0:	2201      	movs	r2, #1
 80039f2:	40a2      	lsls	r2, r4
 80039f4:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 80039f8:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80039fc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8003a00:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8003a02:	0d12      	lsrs	r2, r2, #20
 8003a04:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8003a08:	f424 64f8 	bic.w	r4, r4, #1984	; 0x7c0
 8003a0c:	4322      	orrs	r2, r4
 8003a0e:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003a10:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8003a12:	688a      	ldr	r2, [r1, #8]
 8003a14:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a18:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003a1c:	f042 0204 	orr.w	r2, r2, #4
 8003a20:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003a22:	680a      	ldr	r2, [r1, #0]
 8003a24:	0752      	lsls	r2, r2, #29
 8003a26:	d5fc      	bpl.n	8003a22 <RCM_ExecRegularConv+0xe2>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
 8003a28:	eb0c 0200 	add.w	r2, ip, r0
 8003a2c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003a30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a32:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8003a34:	4922      	ldr	r1, [pc, #136]	; (8003ac0 <RCM_ExecRegularConv+0x180>)
 8003a36:	7954      	ldrb	r4, [r2, #5]
 8003a38:	700c      	strb	r4, [r1, #0]
    RCM_NoInj_array[handle].status = valid;
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	7051      	strb	r1, [r2, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8003a3e:	4460      	add	r0, ip
 8003a40:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  return retVal;
}
 8003a44:	8858      	ldrh	r0, [r3, #2]
 8003a46:	bd10      	pop	{r4, pc}
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003a48:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8003a4c:	06a2      	lsls	r2, r4, #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003a4e:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003a52:	f04f 0e01 	mov.w	lr, #1
 8003a56:	fa0e f404 	lsl.w	r4, lr, r4
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003a5a:	4322      	orrs	r2, r4
 8003a5c:	e7d0      	b.n	8003a00 <RCM_ExecRegularConv+0xc0>
      if (true == RCM_NoInj_array [i].enable)
 8003a5e:	7b19      	ldrb	r1, [r3, #12]
 8003a60:	2900      	cmp	r1, #0
 8003a62:	d185      	bne.n	8003970 <RCM_ExecRegularConv+0x30>
 8003a64:	7c99      	ldrb	r1, [r3, #18]
 8003a66:	bb01      	cbnz	r1, 8003aaa <RCM_ExecRegularConv+0x16a>
       if (LastEnable != RCM_MAX_CONV )
 8003a68:	2a04      	cmp	r2, #4
 8003a6a:	d013      	beq.n	8003a94 <RCM_ExecRegularConv+0x154>
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003a6c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8003a70:	eb0c 0400 	add.w	r4, ip, r0
 8003a74:	eb03 0444 	add.w	r4, r3, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003a78:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8003a7c:	7122      	strb	r2, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003a7e:	794a      	ldrb	r2, [r1, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8003a80:	7162      	strb	r2, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8003a82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003a86:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003a8a:	4c0d      	ldr	r4, [pc, #52]	; (8003ac0 <RCM_ExecRegularConv+0x180>)
         RCM_NoInj_array[formerNext].prev = handle;
 8003a8c:	7110      	strb	r0, [r2, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8003a8e:	7148      	strb	r0, [r1, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003a90:	7822      	ldrb	r2, [r4, #0]
 8003a92:	e78e      	b.n	80039b2 <RCM_ExecRegularConv+0x72>
         RCM_currentHandle = handle;
 8003a94:	4c0a      	ldr	r4, [pc, #40]	; (8003ac0 <RCM_ExecRegularConv+0x180>)
 8003a96:	4602      	mov	r2, r0
 8003a98:	7020      	strb	r0, [r4, #0]
    while (i < RCM_MAX_CONV)
 8003a9a:	e78a      	b.n	80039b2 <RCM_ExecRegularConv+0x72>
      i++;
 8003a9c:	2201      	movs	r2, #1
      if (true == RCM_NoInj_array [i].enable)
 8003a9e:	4696      	mov	lr, r2
 8003aa0:	e774      	b.n	800398c <RCM_ExecRegularConv+0x4c>
 8003aa2:	7c9a      	ldrb	r2, [r3, #18]
 8003aa4:	b90a      	cbnz	r2, 8003aaa <RCM_ExecRegularConv+0x16a>
      i++;
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	e7e0      	b.n	8003a6c <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array[i].next > handle)
 8003aaa:	7dd9      	ldrb	r1, [r3, #23]
 8003aac:	4281      	cmp	r1, r0
      i++;
 8003aae:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array[i].next > handle)
 8003ab2:	d9db      	bls.n	8003a6c <RCM_ExecRegularConv+0x12c>
 8003ab4:	e769      	b.n	800398a <RCM_ExecRegularConv+0x4a>
      i++;
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	e767      	b.n	800398a <RCM_ExecRegularConv+0x4a>
 8003aba:	bf00      	nop
 8003abc:	20001958 	.word	0x20001958
 8003ac0:	20001974 	.word	0x20001974
 8003ac4:	2000023c 	.word	0x2000023c
 8003ac8:	20001978 	.word	0x20001978

08003acc <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 8003acc:	b570      	push	{r4, r5, r6, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003ace:	4c12      	ldr	r4, [pc, #72]	; (8003b18 <RCM_ExecUserConv+0x4c>)
 8003ad0:	7823      	ldrb	r3, [r4, #0]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d000      	beq.n	8003ad8 <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003ad8:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <RCM_ExecUserConv+0x50>)
 8003ada:	781d      	ldrb	r5, [r3, #0]
 8003adc:	4628      	mov	r0, r5
 8003ade:	f7ff ff2f 	bl	8003940 <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003ae2:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <RCM_ExecUserConv+0x54>)
 8003ae4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8003ae8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003aec:	4a0d      	ldr	r2, [pc, #52]	; (8003b24 <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003aee:	785b      	ldrb	r3, [r3, #1]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003af0:	8010      	strh	r0, [r2, #0]
 8003af2:	4601      	mov	r1, r0
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8003af4:	b10b      	cbz	r3, 8003afa <RCM_ExecUserConv+0x2e>
      RCM_UserConvState = RCM_USERCONV_EOC;
 8003af6:	2302      	movs	r3, #2
 8003af8:	7023      	strb	r3, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8003afa:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <RCM_ExecUserConv+0x5c>)
 8003afc:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
 8003b00:	2e00      	cmp	r6, #0
 8003b02:	d0e8      	beq.n	8003ad6 <RCM_ExecUserConv+0xa>
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003b04:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003b08:	4628      	mov	r0, r5
 8003b0a:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	7023      	strb	r3, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003b10:	4633      	mov	r3, r6
}
 8003b12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003b16:	4718      	bx	r3
 8003b18:	20001971 	.word	0x20001971
 8003b1c:	20001970 	.word	0x20001970
 8003b20:	20001958 	.word	0x20001958
 8003b24:	20001972 	.word	0x20001972
 8003b28:	20001938 	.word	0x20001938

08003b2c <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8003b2c:	4b24      	ldr	r3, [pc, #144]	; (8003bc0 <RCM_ExecNextConv+0x94>)
 8003b2e:	4825      	ldr	r0, [pc, #148]	; (8003bc4 <RCM_ExecNextConv+0x98>)
 8003b30:	781a      	ldrb	r2, [r3, #0]
 8003b32:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003b36:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8003b3a:	b3a3      	cbz	r3, 8003ba6 <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003b3c:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <RCM_ExecNextConv+0x9c>)
{
 8003b3e:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b44:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003b46:	2404      	movs	r4, #4
 8003b48:	600c      	str	r4, [r1, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003b4a:	f893 c004 	ldrb.w	ip, [r3, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003b4e:	f1bc 0f09 	cmp.w	ip, #9
 8003b52:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8003b56:	d927      	bls.n	8003ba8 <RCM_ExecNextConv+0x7c>
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003b58:	2303      	movs	r3, #3
 8003b5a:	f06f 041d 	mvn.w	r4, #29
 8003b5e:	fb13 440c 	smlabb	r4, r3, ip, r4
 8003b62:	2301      	movs	r3, #1
 8003b64:	fa03 f30c 	lsl.w	r3, r3, ip
 8003b68:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8003b6c:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003b70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000

    (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8003b74:	4472      	add	r2, lr
 8003b76:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  MODIFY_REG(*preg,
 8003b7a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8003b7c:	0d1b      	lsrs	r3, r3, #20
 8003b7e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003b82:	f422 62f8 	bic.w	r2, r2, #1984	; 0x7c0
 8003b86:	4313      	orrs	r3, r2
 8003b88:	630b      	str	r3, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003b8a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8003b8c:	688b      	ldr	r3, [r1, #8]
 8003b8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b92:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b96:	f04f 0c01 	mov.w	ip, #1
 8003b9a:	f043 0304 	orr.w	r3, r3, #4
 8003b9e:	608b      	str	r3, [r1, #8]
 8003ba0:	f880 c001 	strb.w	ip, [r0, #1]
  }
  else
  {
    /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8003ba4:	bd10      	pop	{r4, pc}
 8003ba6:	4770      	bx	lr
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003ba8:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8003bac:	ea4f 638c 	mov.w	r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003bb0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003bb4:	2401      	movs	r4, #1
 8003bb6:	fa04 fc0c 	lsl.w	ip, r4, ip
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003bba:	ea43 030c 	orr.w	r3, r3, ip
 8003bbe:	e7d9      	b.n	8003b74 <RCM_ExecNextConv+0x48>
 8003bc0:	20001974 	.word	0x20001974
 8003bc4:	20001958 	.word	0x20001958
 8003bc8:	20001978 	.word	0x20001978

08003bcc <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8003bcc:	b510      	push	{r4, lr}
  uint32_t result;
  RCM_status_t status;

  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003bce:	4814      	ldr	r0, [pc, #80]	; (8003c20 <RCM_ReadOngoingConv+0x54>)
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003bd0:	4a14      	ldr	r2, [pc, #80]	; (8003c24 <RCM_ReadOngoingConv+0x58>)
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003bd2:	7803      	ldrb	r3, [r0, #0]
  result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003bd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003bd8:	6814      	ldr	r4, [r2, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003bda:	6822      	ldr	r2, [r4, #0]
 8003bdc:	f012 0f04 	tst.w	r2, #4
  status = RCM_NoInj_array[RCM_currentHandle].status;
 8003be0:	ea4f 0143 	mov.w	r1, r3, lsl #1
 8003be4:	4a10      	ldr	r2, [pc, #64]	; (8003c28 <RCM_ReadOngoingConv+0x5c>)
 8003be6:	d008      	beq.n	8003bfa <RCM_ReadOngoingConv+0x2e>
 8003be8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8003bec:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
  if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003bf0:	f89c e001 	ldrb.w	lr, [ip, #1]
 8003bf4:	f01e 0ffd 	tst.w	lr, #253	; 0xfd
 8003bf8:	d105      	bne.n	8003c06 <RCM_ReadOngoingConv+0x3a>
    RCM_NoInj_array[RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003bfa:	440b      	add	r3, r1
 8003bfc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003c00:	7953      	ldrb	r3, [r2, #5]
 8003c02:	7003      	strb	r3, [r0, #0]
}
 8003c04:	bd10      	pop	{r4, pc}
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003c06:	440b      	add	r3, r1
 8003c08:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8003c0c:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8003c0e:	7953      	ldrb	r3, [r2, #5]
 8003c10:	f8ac 4002 	strh.w	r4, [ip, #2]
    RCM_NoInj_array[RCM_currentHandle].status = valid;
 8003c14:	2402      	movs	r4, #2
 8003c16:	f88c 4001 	strb.w	r4, [ip, #1]
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003c1a:	7003      	strb	r3, [r0, #0]
}
 8003c1c:	bd10      	pop	{r4, pc}
 8003c1e:	bf00      	nop
 8003c20:	20001974 	.word	0x20001974
 8003c24:	20001978 	.word	0x20001978
 8003c28:	20001958 	.word	0x20001958

08003c2c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c2c:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <HAL_MspInit+0x40>)
{
 8003c2e:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c30:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8003c32:	f040 0001 	orr.w	r0, r0, #1
 8003c36:	6618      	str	r0, [r3, #96]	; 0x60
 8003c38:	6e1c      	ldr	r4, [r3, #96]	; 0x60
{
 8003c3a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3c:	f004 0401 	and.w	r4, r4, #1
 8003c40:	9400      	str	r4, [sp, #0]
 8003c42:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c44:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8003c46:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8003c4a:	659c      	str	r4, [r3, #88]	; 0x58
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c54:	2200      	movs	r2, #0
 8003c56:	210f      	movs	r1, #15
 8003c58:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c5c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c5e:	f001 fae5 	bl	800522c <HAL_NVIC_SetPriority>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c62:	b002      	add	sp, #8
 8003c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_PWREx_DisableUCPDDeadBattery();
 8003c68:	f001 bd52 	b.w	8005710 <HAL_PWREx_DisableUCPDDeadBattery>
 8003c6c:	40021000 	.word	0x40021000

08003c70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c70:	b510      	push	{r4, lr}
 8003c72:	4604      	mov	r4, r0
 8003c74:	b09c      	sub	sp, #112	; 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c76:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c78:	2244      	movs	r2, #68	; 0x44
 8003c7a:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c7c:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8003c80:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8003c84:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c86:	f006 fa17 	bl	800a0b8 <memset>
  if(hadc->Instance==ADC1)
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c90:	d004      	beq.n	8003c9c <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003c92:	4a41      	ldr	r2, [pc, #260]	; (8003d98 <HAL_ADC_MspInit+0x128>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d045      	beq.n	8003d24 <HAL_ADC_MspInit+0xb4>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003c98:	b01c      	add	sp, #112	; 0x70
 8003c9a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003c9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003ca0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ca4:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003ca6:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003ca8:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003caa:	f002 f923 	bl	8005ef4 <HAL_RCCEx_PeriphCLKConfig>
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d168      	bne.n	8003d84 <HAL_ADC_MspInit+0x114>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003cb2:	4a3a      	ldr	r2, [pc, #232]	; (8003d9c <HAL_ADC_MspInit+0x12c>)
 8003cb4:	6813      	ldr	r3, [r2, #0]
 8003cb6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003cb8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003cba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003cbc:	d109      	bne.n	8003cd2 <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003cbe:	4b38      	ldr	r3, [pc, #224]	; (8003da0 <HAL_ADC_MspInit+0x130>)
 8003cc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cc6:	64da      	str	r2, [r3, #76]	; 0x4c
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cce:	9301      	str	r3, [sp, #4]
 8003cd0:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd2:	4b33      	ldr	r3, [pc, #204]	; (8003da0 <HAL_ADC_MspInit+0x130>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cd4:	4833      	ldr	r0, [pc, #204]	; (8003da4 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cd8:	f042 0204 	orr.w	r2, r2, #4
 8003cdc:	64da      	str	r2, [r3, #76]	; 0x4c
 8003cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ce0:	f002 0204 	and.w	r2, r2, #4
 8003ce4:	9202      	str	r2, [sp, #8]
 8003ce6:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	64da      	str	r2, [r3, #76]	; 0x4c
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf8:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cfa:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8003cfc:	2206      	movs	r2, #6
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d04:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d06:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d08:	f001 fb8c 	bl	8005424 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d10:	a906      	add	r1, sp, #24
 8003d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8003d16:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d1c:	f001 fb82 	bl	8005424 <HAL_GPIO_Init>
}
 8003d20:	b01c      	add	sp, #112	; 0x70
 8003d22:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003d24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003d28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d2c:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003d2e:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003d30:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d32:	f002 f8df 	bl	8005ef4 <HAL_RCCEx_PeriphCLKConfig>
 8003d36:	bb40      	cbnz	r0, 8003d8a <HAL_ADC_MspInit+0x11a>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003d38:	4a18      	ldr	r2, [pc, #96]	; (8003d9c <HAL_ADC_MspInit+0x12c>)
 8003d3a:	6813      	ldr	r3, [r2, #0]
 8003d3c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003d3e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003d40:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003d42:	d109      	bne.n	8003d58 <HAL_ADC_MspInit+0xe8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003d44:	4b16      	ldr	r3, [pc, #88]	; (8003da0 <HAL_ADC_MspInit+0x130>)
 8003d46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d4c:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d54:	9304      	str	r3, [sp, #16]
 8003d56:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d58:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <HAL_ADC_MspInit+0x130>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d5a:	4812      	ldr	r0, [pc, #72]	; (8003da4 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d5e:	f042 0204 	orr.w	r2, r2, #4
 8003d62:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8003d66:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8003d90 <HAL_ADC_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d6a:	f003 0304 	and.w	r3, r3, #4
 8003d6e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d70:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d72:	2300      	movs	r3, #0
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 8003d74:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d78:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d7c:	f001 fb52 	bl	8005424 <HAL_GPIO_Init>
}
 8003d80:	b01c      	add	sp, #112	; 0x70
 8003d82:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003d84:	f7fd fe6e 	bl	8001a64 <Error_Handler>
 8003d88:	e793      	b.n	8003cb2 <HAL_ADC_MspInit+0x42>
      Error_Handler();
 8003d8a:	f7fd fe6b 	bl	8001a64 <Error_Handler>
 8003d8e:	e7d3      	b.n	8003d38 <HAL_ADC_MspInit+0xc8>
 8003d90:	00000003 	.word	0x00000003
 8003d94:	00000003 	.word	0x00000003
 8003d98:	50000100 	.word	0x50000100
 8003d9c:	20001988 	.word	0x20001988
 8003da0:	40021000 	.word	0x40021000
 8003da4:	48000800 	.word	0x48000800

08003da8 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8003da8:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_CORDIC_MspInit+0x2c>)
 8003daa:	6802      	ldr	r2, [r0, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d000      	beq.n	8003db2 <HAL_CORDIC_MspInit+0xa>
 8003db0:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003db2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 8003db6:	f042 0208 	orr.w	r2, r2, #8
 8003dba:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8003dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 8003dc2:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8003dce:	b002      	add	sp, #8
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40020c00 	.word	0x40020c00

08003dd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003dd8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8003dda:	6802      	ldr	r2, [r0, #0]
 8003ddc:	4938      	ldr	r1, [pc, #224]	; (8003ec0 <HAL_TIM_Base_MspInit+0xe8>)
{
 8003dde:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de0:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8003de2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de4:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003de8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8003dec:	930a      	str	r3, [sp, #40]	; 0x28
  if(htim_base->Instance==TIM1)
 8003dee:	d004      	beq.n	8003dfa <HAL_TIM_Base_MspInit+0x22>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8003df0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003df4:	d026      	beq.n	8003e44 <HAL_TIM_Base_MspInit+0x6c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003df6:	b00c      	add	sp, #48	; 0x30
 8003df8:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003dfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dfe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8003e02:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8003eb8 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e0c:	661a      	str	r2, [r3, #96]	; 0x60
 8003e0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e10:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e14:	9201      	str	r2, [sp, #4]
 8003e16:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e28:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003e2a:	2306      	movs	r3, #6
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003e2c:	a906      	add	r1, sp, #24
 8003e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8003e32:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e36:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e38:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003e3a:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003e3c:	f001 faf2 	bl	8005424 <HAL_GPIO_Init>
}
 8003e40:	b00c      	add	sp, #48	; 0x30
 8003e42:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e44:	4b1f      	ldr	r3, [pc, #124]	; (8003ec4 <HAL_TIM_Base_MspInit+0xec>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e46:	4820      	ldr	r0, [pc, #128]	; (8003ec8 <HAL_TIM_Base_MspInit+0xf0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	659a      	str	r2, [r3, #88]	; 0x58
 8003e50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e52:	f002 0201 	and.w	r2, r2, #1
 8003e56:	9203      	str	r2, [sp, #12]
 8003e58:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e5c:	f042 0202 	orr.w	r2, r2, #2
 8003e60:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e64:	f002 0202 	and.w	r2, r2, #2
 8003e68:	9204      	str	r2, [sp, #16]
 8003e6a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 8003e7c:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8003e80:	2302      	movs	r3, #2
 8003e82:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e86:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e88:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e8a:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e8c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e90:	9a05      	ldr	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e92:	f001 fac7 	bl	8005424 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8003e96:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8003ea0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8003ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8003eaa:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003eae:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8003eb0:	f001 fab8 	bl	8005424 <HAL_GPIO_Init>
}
 8003eb4:	b00c      	add	sp, #48	; 0x30
 8003eb6:	bd10      	pop	{r4, pc}
 8003eb8:	00000040 	.word	0x00000040
 8003ebc:	00000012 	.word	0x00000012
 8003ec0:	40012c00 	.word	0x40012c00
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	48000400 	.word	0x48000400

08003ecc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ecc:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8003ece:	4a27      	ldr	r2, [pc, #156]	; (8003f6c <HAL_TIM_MspPostInit+0xa0>)
 8003ed0:	6801      	ldr	r1, [r0, #0]
{
 8003ed2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed4:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003ed6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003edc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003ee0:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8003ee2:	d001      	beq.n	8003ee8 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003ee4:	b008      	add	sp, #32
 8003ee6:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003eec:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003ef0:	2406      	movs	r4, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ef4:	f042 0201 	orr.w	r2, r2, #1
 8003ef8:	64da      	str	r2, [r3, #76]	; 0x4c
 8003efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003efc:	f002 0201 	and.w	r2, r2, #1
 8003f00:	9200      	str	r2, [sp, #0]
 8003f02:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f06:	f042 0202 	orr.w	r2, r2, #2
 8003f0a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003f0e:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003f16:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003f18:	2280      	movs	r2, #128	; 0x80
 8003f1a:	2601      	movs	r6, #1
 8003f1c:	2702      	movs	r7, #2
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003f22:	2302      	movs	r3, #2
 8003f24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f28:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f2c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003f2e:	f001 fa79 	bl	8005424 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f32:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003f34:	2203      	movs	r2, #3
 8003f36:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f38:	480d      	ldr	r0, [pc, #52]	; (8003f70 <HAL_TIM_MspPostInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003f3a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003f3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f40:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f44:	f001 fa6e 	bl	8005424 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003f48:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f52:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003f54:	2202      	movs	r2, #2
 8003f56:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003f5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003f60:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f62:	f001 fa5f 	bl	8005424 <HAL_GPIO_Init>
}
 8003f66:	b008      	add	sp, #32
 8003f68:	bdd0      	pop	{r4, r6, r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	48000400 	.word	0x48000400

08003f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f74:	b570      	push	{r4, r5, r6, lr}
 8003f76:	4604      	mov	r4, r0
 8003f78:	b098      	sub	sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f7a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f7c:	2244      	movs	r2, #68	; 0x44
 8003f7e:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f80:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003f84:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003f88:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f8a:	f006 f895 	bl	800a0b8 <memset>
  if(huart->Instance==USART2)
 8003f8e:	4b31      	ldr	r3, [pc, #196]	; (8004054 <HAL_UART_MspInit+0xe0>)
 8003f90:	6822      	ldr	r2, [r4, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d001      	beq.n	8003f9a <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003f96:	b018      	add	sp, #96	; 0x60
 8003f98:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003f9a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f9c:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003f9e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fa0:	f001 ffa8 	bl	8005ef4 <HAL_RCCEx_PeriphCLKConfig>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	d14c      	bne.n	8004042 <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <HAL_UART_MspInit+0xe4>)
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003faa:	4e2c      	ldr	r6, [pc, #176]	; (800405c <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003fb2:	659a      	str	r2, [r3, #88]	; 0x58
 8003fb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fb6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003fba:	9200      	str	r2, [sp, #0]
 8003fbc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fc0:	f042 0201 	orr.w	r2, r2, #1
 8003fc4:	64da      	str	r2, [r3, #76]	; 0x4c
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003fce:	220c      	movs	r2, #12
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fd6:	2200      	movs	r2, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fe2:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fe8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fea:	f001 fa1b 	bl	8005424 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003fee:	491c      	ldr	r1, [pc, #112]	; (8004060 <HAL_UART_MspInit+0xec>)
 8003ff0:	221a      	movs	r2, #26
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ff2:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003ff4:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003ff8:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ffa:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ffc:	e9c6 3302 	strd	r3, r3, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004000:	e9c6 2304 	strd	r2, r3, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004004:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004008:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800400a:	f001 f975 	bl	80052f8 <HAL_DMA_Init>
 800400e:	b9f0      	cbnz	r0, 800404e <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004010:	4d14      	ldr	r5, [pc, #80]	; (8004064 <HAL_UART_MspInit+0xf0>)
 8004012:	4915      	ldr	r1, [pc, #84]	; (8004068 <HAL_UART_MspInit+0xf4>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004014:	67e6      	str	r6, [r4, #124]	; 0x7c
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004016:	221b      	movs	r2, #27
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004018:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800401a:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800401e:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004020:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004022:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004024:	e9c5 1302 	strd	r1, r3, [r5, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004028:	e9c5 3305 	strd	r3, r3, [r5, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800402c:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004030:	62b4      	str	r4, [r6, #40]	; 0x28
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004032:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004034:	f001 f960 	bl	80052f8 <HAL_DMA_Init>
 8004038:	b930      	cbnz	r0, 8004048 <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800403a:	67a5      	str	r5, [r4, #120]	; 0x78
 800403c:	62ac      	str	r4, [r5, #40]	; 0x28
}
 800403e:	b018      	add	sp, #96	; 0x60
 8004040:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004042:	f7fd fd0f 	bl	8001a64 <Error_Handler>
 8004046:	e7af      	b.n	8003fa8 <HAL_UART_MspInit+0x34>
      Error_Handler();
 8004048:	f7fd fd0c 	bl	8001a64 <Error_Handler>
 800404c:	e7f5      	b.n	800403a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800404e:	f7fd fd09 	bl	8001a64 <Error_Handler>
 8004052:	e7dd      	b.n	8004010 <HAL_UART_MspInit+0x9c>
 8004054:	40004400 	.word	0x40004400
 8004058:	40021000 	.word	0x40021000
 800405c:	20000554 	.word	0x20000554
 8004060:	40020008 	.word	0x40020008
 8004064:	200005b4 	.word	0x200005b4
 8004068:	4002001c 	.word	0x4002001c

0800406c <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800406c:	4b1f      	ldr	r3, [pc, #124]	; (80040ec <HAL_InitTick+0x80>)
{
 800406e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004070:	6d9a      	ldr	r2, [r3, #88]	; 0x58

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004072:	4c1f      	ldr	r4, [pc, #124]	; (80040f0 <HAL_InitTick+0x84>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004074:	f042 0210 	orr.w	r2, r2, #16
 8004078:	659a      	str	r2, [r3, #88]	; 0x58
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
{
 800407c:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 800407e:	f003 0310 	and.w	r3, r3, #16
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004082:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004084:	9302      	str	r3, [sp, #8]
{
 8004086:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004088:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800408a:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800408c:	f001 ff08 	bl	8005ea0 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004090:	f001 fee2 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004094:	4a17      	ldr	r2, [pc, #92]	; (80040f4 <HAL_InitTick+0x88>)
  htim6.Instance = TIM6;
 8004096:	4918      	ldr	r1, [pc, #96]	; (80040f8 <HAL_InitTick+0x8c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004098:	fba2 2300 	umull	r2, r3, r2, r0
 800409c:	0c9b      	lsrs	r3, r3, #18
 800409e:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 80040a0:	2200      	movs	r2, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80040a2:	e9c4 1300 	strd	r1, r3, [r4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  status = HAL_TIM_Base_Init(&htim6);
 80040a6:	4620      	mov	r0, r4
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80040a8:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim6.Init.ClockDivision = 0;
 80040ac:	6122      	str	r2, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ae:	60a2      	str	r2, [r4, #8]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80040b0:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim6);
 80040b2:	f002 f927 	bl	8006304 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80040b6:	4605      	mov	r5, r0
 80040b8:	b110      	cbz	r0, 80040c0 <HAL_InitTick+0x54>
    }
  }

 /* Return function status */
  return status;
}
 80040ba:	4628      	mov	r0, r5
 80040bc:	b008      	add	sp, #32
 80040be:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIM_Base_Start_IT(&htim6);
 80040c0:	4620      	mov	r0, r4
 80040c2:	f002 f9a7 	bl	8006414 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80040c6:	4605      	mov	r5, r0
 80040c8:	2800      	cmp	r0, #0
 80040ca:	d1f6      	bne.n	80040ba <HAL_InitTick+0x4e>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80040cc:	2036      	movs	r0, #54	; 0x36
 80040ce:	f001 f8eb 	bl	80052a8 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040d2:	2e0f      	cmp	r6, #15
 80040d4:	d901      	bls.n	80040da <HAL_InitTick+0x6e>
        status = HAL_ERROR;
 80040d6:	2501      	movs	r5, #1
 80040d8:	e7ef      	b.n	80040ba <HAL_InitTick+0x4e>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80040da:	462a      	mov	r2, r5
 80040dc:	4631      	mov	r1, r6
 80040de:	2036      	movs	r0, #54	; 0x36
 80040e0:	f001 f8a4 	bl	800522c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <HAL_InitTick+0x90>)
 80040e6:	601e      	str	r6, [r3, #0]
 80040e8:	e7e7      	b.n	80040ba <HAL_InitTick+0x4e>
 80040ea:	bf00      	nop
 80040ec:	40021000 	.word	0x40021000
 80040f0:	2000198c 	.word	0x2000198c
 80040f4:	431bde83 	.word	0x431bde83
 80040f8:	40001000 	.word	0x40001000
 80040fc:	20000430 	.word	0x20000430

08004100 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004100:	4801      	ldr	r0, [pc, #4]	; (8004108 <TIM6_DAC_IRQHandler+0x8>)
 8004102:	f002 bbcd 	b.w	80068a0 <HAL_TIM_IRQHandler>
 8004106:	bf00      	nop
 8004108:	2000198c 	.word	0x2000198c

0800410c <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800410c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004110:	2240      	movs	r2, #64	; 0x40
 8004112:	601a      	str	r2, [r3, #0]
  /* USER CODE END ADC1_2_IRQn 0 */

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  (void)TSK_HighFrequencyTask();
 8004114:	f7fe b8dc 	b.w	80022d0 <TSK_HighFrequencyTask>

08004118 <TIM1_UP_TIM16_IRQHandler>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004118:	4b03      	ldr	r3, [pc, #12]	; (8004128 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    ( void )R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 800411a:	4804      	ldr	r0, [pc, #16]	; (800412c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800411c:	f06f 0201 	mvn.w	r2, #1
 8004120:	611a      	str	r2, [r3, #16]
 8004122:	f005 bc2d 	b.w	8009980 <R3_2_TIMx_UP_IRQHandler>
 8004126:	bf00      	nop
 8004128:	40012c00 	.word	0x40012c00
 800412c:	2000023c 	.word	0x2000023c

08004130 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8004130:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8004132:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	0611      	lsls	r1, r2, #24
 8004138:	d505      	bpl.n	8004146 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800413a:	f06f 0280 	mvn.w	r2, #128	; 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    ( void )R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 800413e:	480a      	ldr	r0, [pc, #40]	; (8004168 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004140:	611a      	str	r2, [r3, #16]
 8004142:	f005 fc89 	bl	8009a58 <R3_2_BRK_IRQHandler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8004146:	4b07      	ldr	r3, [pc, #28]	; (8004164 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	05d2      	lsls	r2, r2, #23
 800414c:	d505      	bpl.n	800415a <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800414e:	f46f 7280 	mvn.w	r2, #256	; 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    ( void )R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 8004152:	4805      	ldr	r0, [pc, #20]	; (8004168 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004154:	611a      	str	r2, [r3, #16]
 8004156:	f005 fc5b 	bl	8009a10 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 800415a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 800415e:	f7fe b867 	b.w	8002230 <MC_Scheduler>
 8004162:	bf00      	nop
 8004164:	40012c00 	.word	0x40012c00
 8004168:	2000023c 	.word	0x2000023c

0800416c <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 800416c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (0U == LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 800416e:	4c0c      	ldr	r4, [pc, #48]	; (80041a0 <TIM2_IRQHandler+0x34>)
 8004170:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	07d1      	lsls	r1, r2, #31
 8004176:	d40b      	bmi.n	8004190 <TIM2_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	0792      	lsls	r2, r2, #30
 800417c:	d507      	bpl.n	800418e <TIM2_IRQHandler+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800417e:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8004182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (void)HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8004186:	4806      	ldr	r0, [pc, #24]	; (80041a0 <TIM2_IRQHandler+0x34>)
 8004188:	611a      	str	r2, [r3, #16]
 800418a:	f7fc bef1 	b.w	8000f70 <HALL_TIMx_CC_IRQHandler>
}
 800418e:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004190:	f06f 0201 	mvn.w	r2, #1
 8004194:	611a      	str	r2, [r3, #16]
    (void)HALL_TIMx_UP_IRQHandler(&HALL_M1);
 8004196:	4620      	mov	r0, r4
 8004198:	f7fd f894 	bl	80012c4 <HALL_TIMx_UP_IRQHandler>
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx) != 0U)
 800419c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800419e:	e7eb      	b.n	8004178 <TIM2_IRQHandler+0xc>
 80041a0:	200000e0 	.word	0x200000e0

080041a4 <DMA1_Channel1_IRQHandler>:
  }
}

__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC(DMA_TypeDef *DMAx, uint32_t Channel )
{
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR, (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2) )) == (DMA_ISR_TCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2))) ? 1UL : 0UL));
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <DMA1_Channel1_IRQHandler+0x14>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	0792      	lsls	r2, r2, #30
 80041aa:	d400      	bmi.n	80041ae <DMA1_Channel1_IRQHandler+0xa>
  }
  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

  /* USER CODE BEGIN DMA1_Channel1_IRQHandler 1 */

}
 80041ac:	4770      	bx	lr
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80041ae:	2202      	movs	r2, #2
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 80041b0:	4802      	ldr	r0, [pc, #8]	; (80041bc <DMA1_Channel1_IRQHandler+0x18>)
 80041b2:	605a      	str	r2, [r3, #4]
 80041b4:	f7fc bce4 	b.w	8000b80 <ASPEP_HWDataReceivedIT>
 80041b8:	40020000 	.word	0x40020000
 80041bc:	200003b4 	.word	0x200003b4

080041c0 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80041c0:	4b33      	ldr	r3, [pc, #204]	; (8004290 <USART2_IRQHandler+0xd0>)
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	0650      	lsls	r0, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART2_IRQHandler(void)
{
 80041c6:	b510      	push	{r4, lr}
 80041c8:	d509      	bpl.n	80041de <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80041ca:	4932      	ldr	r1, [pc, #200]	; (8004294 <USART2_IRQHandler+0xd4>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel( DMA_TX_A, DMACH_TX_A );
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 80041cc:	4832      	ldr	r0, [pc, #200]	; (8004298 <USART2_IRQHandler+0xd8>)
 80041ce:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80041d0:	2440      	movs	r4, #64	; 0x40
 80041d2:	f022 0201 	bic.w	r2, r2, #1
 80041d6:	61ca      	str	r2, [r1, #28]
 80041d8:	621c      	str	r4, [r3, #32]
 80041da:	f7fc fb31 	bl	8000840 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80041de:	492c      	ldr	r1, [pc, #176]	; (8004290 <USART2_IRQHandler+0xd0>)
 80041e0:	69ca      	ldr	r2, [r1, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80041e2:	69cb      	ldr	r3, [r1, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80041e4:	69c8      	ldr	r0, [r1, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80041e6:	f002 0c08 	and.w	ip, r2, #8
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80041ea:	f003 0302 	and.w	r3, r3, #2
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 80041ee:	688a      	ldr	r2, [r1, #8]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80041f0:	ea43 030c 	orr.w	r3, r3, ip
 80041f4:	f000 0004 	and.w	r0, r0, #4
 80041f8:	4303      	orrs	r3, r0
  test2 = LL_USART_IsActiveFlag_FE (USARTA);
  test3 = LL_USART_IsActiveFlag_NE (USARTA);
  mask = LL_USART_IsEnabledIT_ERROR (USARTA);

  test1 = ( ( test1 | test2 | test3 ) & mask );
  if ( 0U == test1 )
 80041fa:	f002 0201 	and.w	r2, r2, #1
 80041fe:	bf08      	it	eq
 8004200:	2200      	moveq	r2, #0
 8004202:	b19a      	cbz	r2, 800422c <USART2_IRQHandler+0x6c>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF|USART_ICR_ORECF|USART_ICR_NECF);
 8004204:	230e      	movs	r3, #14
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004206:	4a25      	ldr	r2, [pc, #148]	; (800429c <USART2_IRQHandler+0xdc>)
 8004208:	620b      	str	r3, [r1, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	e852 3f00 	ldrex	r3, [r2]
 800420e:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	e842 3100 	strex	r1, r3, [r2]
 8004216:	2900      	cmp	r1, #0
 8004218:	d1f7      	bne.n	800420a <USART2_IRQHandler+0x4a>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800421a:	4a1d      	ldr	r2, [pc, #116]	; (8004290 <USART2_IRQHandler+0xd0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	e852 3f00 	ldrex	r3, [r2]
 8004220:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	e842 3100 	strex	r1, r3, [r2]
 8004228:	2900      	cmp	r1, #0
 800422a:	d1f7      	bne.n	800421c <USART2_IRQHandler+0x5c>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800422c:	4a18      	ldr	r2, [pc, #96]	; (8004290 <USART2_IRQHandler+0xd0>)
 800422e:	69d3      	ldr	r3, [r2, #28]
 8004230:	06d9      	lsls	r1, r3, #27
 8004232:	d52a      	bpl.n	800428a <USART2_IRQHandler+0xca>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004234:	6813      	ldr	r3, [r2, #0]
 8004236:	06db      	lsls	r3, r3, #27
 8004238:	d528      	bpl.n	800428c <USART2_IRQHandler+0xcc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800423e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	e842 3100 	strex	r1, r3, [r2]
 8004246:	2900      	cmp	r1, #0
 8004248:	d1f7      	bne.n	800423a <USART2_IRQHandler+0x7a>
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 800424a:	4b14      	ldr	r3, [pc, #80]	; (800429c <USART2_IRQHandler+0xdc>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004250:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	e843 2100 	strex	r1, r2, [r3]
 8004258:	2900      	cmp	r1, #0
 800425a:	d1f7      	bne.n	800424c <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	e853 2f00 	ldrex	r2, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	e843 2100 	strex	r1, r2, [r3]
 8004268:	2900      	cmp	r1, #0
 800426a:	d1f7      	bne.n	800425c <USART2_IRQHandler+0x9c>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800426c:	4a08      	ldr	r2, [pc, #32]	; (8004290 <USART2_IRQHandler+0xd0>)
 800426e:	6a52      	ldr	r2, [r2, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	e843 2100 	strex	r1, r2, [r3]
 800427c:	2900      	cmp	r1, #0
 800427e:	d1f7      	bne.n	8004270 <USART2_IRQHandler+0xb0>
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8004280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 8004284:	4804      	ldr	r0, [pc, #16]	; (8004298 <USART2_IRQHandler+0xd8>)
 8004286:	f7fc bcc9 	b.w	8000c1c <ASPEP_HWDMAReset>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 800428a:	6813      	ldr	r3, [r2, #0]
}
 800428c:	bd10      	pop	{r4, pc}
 800428e:	bf00      	nop
 8004290:	40004400 	.word	0x40004400
 8004294:	40020000 	.word	0x40020000
 8004298:	200003b4 	.word	0x200003b4
 800429c:	40004408 	.word	0x40004408

080042a0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80042a0:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80042a2:	f7fe f90f 	bl	80024c4 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 80042a6:	e7fe      	b.n	80042a6 <HardFault_Handler+0x6>

080042a8 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 80042a8:	4b04      	ldr	r3, [pc, #16]	; (80042bc <EXTI15_10_IRQHandler+0x14>)
 80042aa:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if (  0U == LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 80042ac:	0492      	lsls	r2, r2, #18
 80042ae:	d400      	bmi.n	80042b2 <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    ( void )UI_HandleStartStopButton_cb ();
  }

}
 80042b0:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 80042b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042b6:	615a      	str	r2, [r3, #20]
    ( void )UI_HandleStartStopButton_cb ();
 80042b8:	f7fe b924 	b.w	8002504 <UI_HandleStartStopButton_cb>
 80042bc:	40010400 	.word	0x40010400

080042c0 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 80042c0:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80042c2:	2340      	movs	r3, #64	; 0x40
{
 80042c4:	b470      	push	{r4, r5, r6}
 80042c6:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80042cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	e842 3100 	strex	r1, r3, [r2]
 80042d4:	2900      	cmp	r1, #0
 80042d6:	d1f7      	bne.n	80042c8 <UASPEP_INIT+0x8>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80042d8:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	e851 3f00 	ldrex	r3, [r1]
 80042e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	e841 3400 	strex	r4, r3, [r1]
 80042e8:	2c00      	cmp	r4, #0
 80042ea:	d1f7      	bne.n	80042dc <UASPEP_INIT+0x1c>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 80042ec:	6901      	ldr	r1, [r0, #16]
 80042ee:	4e17      	ldr	r6, [pc, #92]	; (800434c <UASPEP_INIT+0x8c>)
 80042f0:	6883      	ldr	r3, [r0, #8]
 80042f2:	5c74      	ldrb	r4, [r6, r1]
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 80042f4:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 80042f6:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 80042f8:	f102 0128 	add.w	r1, r2, #40	; 0x28
 80042fc:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 80042fe:	68c3      	ldr	r3, [r0, #12]
 8004300:	5cf1      	ldrb	r1, [r6, r3]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004302:	2340      	movs	r3, #64	; 0x40
 8004304:	6213      	str	r3, [r2, #32]
 8004306:	586b      	ldr	r3, [r5, r1]
 8004308:	f043 0302 	orr.w	r3, r3, #2
 800430c:	506b      	str	r3, [r5, r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800430e:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	e851 3f00 	ldrex	r3, [r1]
 8004316:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	e841 3400 	strex	r4, r3, [r1]
 800431e:	2c00      	cmp	r4, #0
 8004320:	d1f7      	bne.n	8004312 <UASPEP_INIT+0x52>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8004322:	68c3      	ldr	r3, [r0, #12]
 8004324:	5cf0      	ldrb	r0, [r6, r3]
 8004326:	4405      	add	r5, r0
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8004328:	f102 0124 	add.w	r1, r2, #36	; 0x24
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800432c:	2340      	movs	r3, #64	; 0x40
 800432e:	60a9      	str	r1, [r5, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004330:	f102 0108 	add.w	r1, r2, #8
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004334:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800433a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	e841 3200 	strex	r2, r3, [r1]
 8004342:	2a00      	cmp	r2, #0
 8004344:	d1f7      	bne.n	8004336 <UASPEP_INIT+0x76>
}
 8004346:	bc70      	pop	{r4, r5, r6}
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	0800a3b0 	.word	0x0800a3b0

08004350 <UASPEP_SEND_PACKET>:
  }
#endif
}

bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8004350:	b430      	push	{r4, r5}
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004352:	6903      	ldr	r3, [r0, #16]
 8004354:	4d0c      	ldr	r5, [pc, #48]	; (8004388 <UASPEP_SEND_PACKET+0x38>)
 8004356:	6884      	ldr	r4, [r0, #8]
 8004358:	5ceb      	ldrb	r3, [r5, r3]
 800435a:	58e0      	ldr	r0, [r4, r3]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledChannel(pHandle->txDMA, pHandle->txChannel))
 800435c:	07c0      	lsls	r0, r0, #31
 800435e:	eb04 0c03 	add.w	ip, r4, r3
 8004362:	d40e      	bmi.n	8004382 <UASPEP_SEND_PACKET+0x32>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8004364:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8004368:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800436c:	0c09      	lsrs	r1, r1, #16
 800436e:	0409      	lsls	r1, r1, #16
 8004370:	4311      	orrs	r1, r2
 8004372:	f8cc 1004 	str.w	r1, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004376:	58e2      	ldr	r2, [r4, r3]
  {
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_EnableChannel(pHandle->txDMA, pHandle->txChannel);
    result = true;
 8004378:	2001      	movs	r0, #1
 800437a:	4302      	orrs	r2, r0
 800437c:	50e2      	str	r2, [r4, r3]
  else
  {
    result = false;
  }
  return result;
}
 800437e:	bc30      	pop	{r4, r5}
 8004380:	4770      	bx	lr
    result = false;
 8004382:	2000      	movs	r0, #0
}
 8004384:	bc30      	pop	{r4, r5}
 8004386:	4770      	bx	lr
 8004388:	0800a3b0 	.word	0x0800a3b0

0800438c <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 800438c:	b430      	push	{r4, r5}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800438e:	68c3      	ldr	r3, [r0, #12]
 8004390:	4d0b      	ldr	r5, [pc, #44]	; (80043c0 <UASPEP_RECEIVE_BUFFER+0x34>)
 8004392:	6844      	ldr	r4, [r0, #4]
 8004394:	5ce8      	ldrb	r0, [r5, r3]
 8004396:	5825      	ldr	r5, [r4, r0]
 8004398:	eb04 0c00 	add.w	ip, r4, r0
 800439c:	f025 0501 	bic.w	r5, r5, #1
 80043a0:	5025      	str	r5, [r4, r0]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80043a2:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80043a6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80043aa:	0c1b      	lsrs	r3, r3, #16
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	431a      	orrs	r2, r3
 80043b0:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80043b4:	5823      	ldr	r3, [r4, r0]
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	5023      	str	r3, [r4, r0]
  LL_DMA_DisableChannel(pHandle->rxDMA, pHandle->rxChannel);
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 80043bc:	bc30      	pop	{r4, r5}
 80043be:	4770      	bx	lr
 80043c0:	0800a3b0 	.word	0x0800a3b0

080043c4 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 80043c4:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80043c6:	2310      	movs	r3, #16
 80043c8:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80043ce:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d2:	e842 3100 	strex	r1, r3, [r2]
 80043d6:	2900      	cmp	r1, #0
 80043d8:	d1f7      	bne.n	80043ca <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 80043da:	4770      	bx	lr

080043dc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80043dc:	4a03      	ldr	r2, [pc, #12]	; (80043ec <SystemInit+0x10>)
 80043de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80043e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043ea:	4770      	bx	lr
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043f0:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043f2:	2003      	movs	r0, #3
 80043f4:	f000 ff08 	bl	8005208 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043f8:	2000      	movs	r0, #0
 80043fa:	f7ff fe37 	bl	800406c <HAL_InitTick>
 80043fe:	b110      	cbz	r0, 8004406 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 8004400:	2401      	movs	r4, #1
  }

  /* Return function status */
  return status;

}
 8004402:	4620      	mov	r0, r4
 8004404:	bd10      	pop	{r4, pc}
 8004406:	4604      	mov	r4, r0
    HAL_MspInit();
 8004408:	f7ff fc10 	bl	8003c2c <HAL_MspInit>
}
 800440c:	4620      	mov	r0, r4
 800440e:	bd10      	pop	{r4, pc}

08004410 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004410:	4a03      	ldr	r2, [pc, #12]	; (8004420 <HAL_IncTick+0x10>)
 8004412:	4904      	ldr	r1, [pc, #16]	; (8004424 <HAL_IncTick+0x14>)
 8004414:	6813      	ldr	r3, [r2, #0]
 8004416:	6809      	ldr	r1, [r1, #0]
 8004418:	440b      	add	r3, r1
 800441a:	6013      	str	r3, [r2, #0]
}
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	200019d8 	.word	0x200019d8
 8004424:	2000042c 	.word	0x2000042c

08004428 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004428:	4b01      	ldr	r3, [pc, #4]	; (8004430 <HAL_GetTick+0x8>)
 800442a:	6818      	ldr	r0, [r3, #0]
}
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	200019d8 	.word	0x200019d8

08004434 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004434:	b530      	push	{r4, r5, lr}
 8004436:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004438:	2300      	movs	r3, #0
 800443a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800443c:	2800      	cmp	r0, #0
 800443e:	f000 80c9 	beq.w	80045d4 <HAL_ADC_Init+0x1a0>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004442:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8004444:	4604      	mov	r4, r0
 8004446:	2d00      	cmp	r5, #0
 8004448:	f000 8092 	beq.w	8004570 <HAL_ADC_Init+0x13c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800444c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800444e:	6893      	ldr	r3, [r2, #8]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	d505      	bpl.n	8004460 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004454:	6893      	ldr	r3, [r2, #8]
 8004456:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800445a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800445e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004460:	6893      	ldr	r3, [r2, #8]
 8004462:	00dd      	lsls	r5, r3, #3
 8004464:	d419      	bmi.n	800449a <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004466:	4b70      	ldr	r3, [pc, #448]	; (8004628 <HAL_ADC_Init+0x1f4>)
 8004468:	4870      	ldr	r0, [pc, #448]	; (800462c <HAL_ADC_Init+0x1f8>)
 800446a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800446c:	6891      	ldr	r1, [r2, #8]
 800446e:	099b      	lsrs	r3, r3, #6
 8004470:	fba0 0303 	umull	r0, r3, r0, r3
 8004474:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8004478:	099b      	lsrs	r3, r3, #6
 800447a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800447e:	3301      	adds	r3, #1
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004486:	6091      	str	r1, [r2, #8]
 8004488:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800448a:	9b01      	ldr	r3, [sp, #4]
 800448c:	b12b      	cbz	r3, 800449a <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 800448e:	9b01      	ldr	r3, [sp, #4]
 8004490:	3b01      	subs	r3, #1
 8004492:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004494:	9b01      	ldr	r3, [sp, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f9      	bne.n	800448e <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800449a:	6893      	ldr	r3, [r2, #8]
 800449c:	00d8      	lsls	r0, r3, #3
 800449e:	d459      	bmi.n	8004554 <HAL_ADC_Init+0x120>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80044a2:	f043 0310 	orr.w	r3, r3, #16
 80044a6:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a8:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80044aa:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ac:	4303      	orrs	r3, r0
 80044ae:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044b0:	6893      	ldr	r3, [r2, #8]
 80044b2:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044b6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80044b8:	d153      	bne.n	8004562 <HAL_ADC_Init+0x12e>
 80044ba:	06d9      	lsls	r1, r3, #27
 80044bc:	d451      	bmi.n	8004562 <HAL_ADC_Init+0x12e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80044c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044c4:	f043 0302 	orr.w	r3, r3, #2
 80044c8:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044ca:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044cc:	07db      	lsls	r3, r3, #31
 80044ce:	d40e      	bmi.n	80044ee <HAL_ADC_Init+0xba>
 80044d0:	4b57      	ldr	r3, [pc, #348]	; (8004630 <HAL_ADC_Init+0x1fc>)
 80044d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80044d6:	6889      	ldr	r1, [r1, #8]
 80044d8:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044da:	430b      	orrs	r3, r1
 80044dc:	07dd      	lsls	r5, r3, #31
 80044de:	d406      	bmi.n	80044ee <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80044e0:	4954      	ldr	r1, [pc, #336]	; (8004634 <HAL_ADC_Init+0x200>)
 80044e2:	6865      	ldr	r5, [r4, #4]
 80044e4:	688b      	ldr	r3, [r1, #8]
 80044e6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80044ea:	432b      	orrs	r3, r5
 80044ec:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80044ee:	68e5      	ldr	r5, [r4, #12]
 80044f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80044f2:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 80044f6:	432b      	orrs	r3, r5
 80044f8:	68a5      	ldr	r5, [r4, #8]
 80044fa:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044fc:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044fe:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8004500:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004504:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004508:	d05f      	beq.n	80045ca <HAL_ADC_Init+0x196>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800450a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800450c:	b121      	cbz	r1, 8004518 <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 800450e:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004510:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004514:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004516:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004518:	68d5      	ldr	r5, [r2, #12]
 800451a:	4947      	ldr	r1, [pc, #284]	; (8004638 <HAL_ADC_Init+0x204>)
 800451c:	4029      	ands	r1, r5
 800451e:	430b      	orrs	r3, r1
 8004520:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004522:	6913      	ldr	r3, [r2, #16]
 8004524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004526:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800452a:	430b      	orrs	r3, r1
 800452c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800452e:	6893      	ldr	r3, [r2, #8]
 8004530:	0759      	lsls	r1, r3, #29
 8004532:	d523      	bpl.n	800457c <HAL_ADC_Init+0x148>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004534:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004536:	6963      	ldr	r3, [r4, #20]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d04e      	beq.n	80045da <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800453c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800453e:	f023 030f 	bic.w	r3, r3, #15
 8004542:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004544:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8004550:	b003      	add	sp, #12
 8004552:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004554:	6893      	ldr	r3, [r2, #8]
 8004556:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800455a:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800455e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004560:	d0ab      	beq.n	80044ba <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004562:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004564:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004566:	f043 0310 	orr.w	r3, r3, #16
 800456a:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800456c:	b003      	add	sp, #12
 800456e:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8004570:	f7ff fb7e 	bl	8003c70 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004574:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8004576:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 800457a:	e767      	b.n	800444c <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800457c:	6893      	ldr	r3, [r2, #8]
 800457e:	071b      	lsls	r3, r3, #28
 8004580:	d4d9      	bmi.n	8004536 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004582:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004584:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004588:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800458a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800458e:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004590:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004594:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004598:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 800459a:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800459c:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800459e:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80045a0:	bb19      	cbnz	r1, 80045ea <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80045a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a6:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80045a8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80045ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045b4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80045b8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d021      	beq.n	8004604 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80045c0:	6913      	ldr	r3, [r2, #16]
 80045c2:	f023 0301 	bic.w	r3, r3, #1
 80045c6:	6113      	str	r3, [r2, #16]
 80045c8:	e7b5      	b.n	8004536 <HAL_ADC_Init+0x102>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80045cc:	3901      	subs	r1, #1
 80045ce:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80045d2:	e79a      	b.n	800450a <HAL_ADC_Init+0xd6>
    return HAL_ERROR;
 80045d4:	2001      	movs	r0, #1
}
 80045d6:	b003      	add	sp, #12
 80045d8:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045da:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80045dc:	6a23      	ldr	r3, [r4, #32]
 80045de:	f021 010f 	bic.w	r1, r1, #15
 80045e2:	3b01      	subs	r3, #1
 80045e4:	430b      	orrs	r3, r1
 80045e6:	6313      	str	r3, [r2, #48]	; 0x30
 80045e8:	e7ac      	b.n	8004544 <HAL_ADC_Init+0x110>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80045ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ee:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80045f0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80045f4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80045f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045fc:	430b      	orrs	r3, r1
 80045fe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004602:	e7d9      	b.n	80045b8 <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 8004604:	6911      	ldr	r1, [r2, #16]
 8004606:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004608:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800460a:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 800460e:	f021 0104 	bic.w	r1, r1, #4
 8004612:	432b      	orrs	r3, r5
 8004614:	430b      	orrs	r3, r1
 8004616:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004618:	430b      	orrs	r3, r1
 800461a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800461c:	430b      	orrs	r3, r1
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	6113      	str	r3, [r2, #16]
 8004624:	e787      	b.n	8004536 <HAL_ADC_Init+0x102>
 8004626:	bf00      	nop
 8004628:	20000428 	.word	0x20000428
 800462c:	053e2d63 	.word	0x053e2d63
 8004630:	50000100 	.word	0x50000100
 8004634:	50000300 	.word	0x50000300
 8004638:	fff04007 	.word	0xfff04007

0800463c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800463c:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800463e:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8004642:	b083      	sub	sp, #12
 8004644:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8004646:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004648:	f04f 0000 	mov.w	r0, #0
 800464c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800464e:	f000 8145 	beq.w	80048dc <HAL_ADC_ConfigChannel+0x2a0>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004652:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8004654:	2001      	movs	r0, #1
 8004656:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800465a:	68a2      	ldr	r2, [r4, #8]
 800465c:	0755      	lsls	r5, r2, #29
 800465e:	d44c      	bmi.n	80046fa <HAL_ADC_ConfigChannel+0xbe>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004660:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(*preg,
 8004662:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004664:	ea4f 1e90 	mov.w	lr, r0, lsr #6
 8004668:	f00e 0e0c 	and.w	lr, lr, #12
 800466c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8004670:	f000 001f 	and.w	r0, r0, #31
 8004674:	f85e 500c 	ldr.w	r5, [lr, ip]
 8004678:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800467c:	261f      	movs	r6, #31
 800467e:	4082      	lsls	r2, r0
 8004680:	fa06 f000 	lsl.w	r0, r6, r0
 8004684:	ea25 0000 	bic.w	r0, r5, r0
 8004688:	4302      	orrs	r2, r0
 800468a:	f84e 200c 	str.w	r2, [lr, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800468e:	68a2      	ldr	r2, [r4, #8]
 8004690:	0750      	lsls	r0, r2, #29
 8004692:	d543      	bpl.n	800471c <HAL_ADC_ConfigChannel+0xe0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004694:	68a2      	ldr	r2, [r4, #8]
 8004696:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004698:	68a2      	ldr	r2, [r4, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800469a:	f012 0f01 	tst.w	r2, #1
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800469e:	4602      	mov	r2, r0
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046a0:	d10c      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x80>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80046a2:	4dc2      	ldr	r5, [pc, #776]	; (80049ac <HAL_ADC_ConfigChannel+0x370>)
 80046a4:	68ce      	ldr	r6, [r1, #12]
 80046a6:	42ae      	cmp	r6, r5
 80046a8:	f000 80c1 	beq.w	800482e <HAL_ADC_ConfigChannel+0x1f2>
    CLEAR_BIT(ADCx->DIFSEL,
 80046ac:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80046b0:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80046b4:	ea21 0100 	bic.w	r1, r1, r0
 80046b8:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80046bc:	49bc      	ldr	r1, [pc, #752]	; (80049b0 <HAL_ADC_ConfigChannel+0x374>)
 80046be:	420a      	tst	r2, r1
 80046c0:	d02a      	beq.n	8004718 <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80046c2:	49bc      	ldr	r1, [pc, #752]	; (80049b4 <HAL_ADC_ConfigChannel+0x378>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80046c4:	4dbc      	ldr	r5, [pc, #752]	; (80049b8 <HAL_ADC_ConfigChannel+0x37c>)
 80046c6:	6888      	ldr	r0, [r1, #8]
 80046c8:	42aa      	cmp	r2, r5
 80046ca:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80046ce:	d01d      	beq.n	800470c <HAL_ADC_ConfigChannel+0xd0>
 80046d0:	4dba      	ldr	r5, [pc, #744]	; (80049bc <HAL_ADC_ConfigChannel+0x380>)
 80046d2:	42aa      	cmp	r2, r5
 80046d4:	d01a      	beq.n	800470c <HAL_ADC_ConfigChannel+0xd0>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046d6:	4dba      	ldr	r5, [pc, #744]	; (80049c0 <HAL_ADC_ConfigChannel+0x384>)
 80046d8:	42aa      	cmp	r2, r5
 80046da:	f040 8131 	bne.w	8004940 <HAL_ADC_ConfigChannel+0x304>
 80046de:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80046e2:	d119      	bne.n	8004718 <HAL_ADC_ConfigChannel+0xdc>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046e4:	4ab7      	ldr	r2, [pc, #732]	; (80049c4 <HAL_ADC_ConfigChannel+0x388>)
 80046e6:	4294      	cmp	r4, r2
 80046e8:	d016      	beq.n	8004718 <HAL_ADC_ConfigChannel+0xdc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80046ea:	688a      	ldr	r2, [r1, #8]
 80046ec:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80046f0:	4316      	orrs	r6, r2
 80046f2:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 80046f6:	608e      	str	r6, [r1, #8]
}
 80046f8:	e003      	b.n	8004702 <HAL_ADC_ConfigChannel+0xc6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046fc:	f042 0220 	orr.w	r2, r2, #32
 8004700:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004708:	b003      	add	sp, #12
 800470a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800470c:	0202      	lsls	r2, r0, #8
 800470e:	d403      	bmi.n	8004718 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004710:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8004714:	f000 80f5 	beq.w	8004902 <HAL_ADC_ConfigChannel+0x2c6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004718:	2000      	movs	r0, #0
 800471a:	e7f2      	b.n	8004702 <HAL_ADC_ConfigChannel+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800471c:	68a2      	ldr	r2, [r4, #8]
 800471e:	f012 0208 	ands.w	r2, r2, #8
 8004722:	f040 8082 	bne.w	800482a <HAL_ADC_ConfigChannel+0x1ee>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004726:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004728:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800472a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800472e:	f000 811b 	beq.w	8004968 <HAL_ADC_ConfigChannel+0x32c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004732:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8004736:	f104 0714 	add.w	r7, r4, #20
 800473a:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 800473e:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8004742:	f85c 5007 	ldr.w	r5, [ip, r7]
 8004746:	f04f 0e07 	mov.w	lr, #7
 800474a:	40b0      	lsls	r0, r6
 800474c:	fa0e f606 	lsl.w	r6, lr, r6
 8004750:	ea25 0506 	bic.w	r5, r5, r6
 8004754:	4328      	orrs	r0, r5
 8004756:	f84c 0007 	str.w	r0, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800475a:	6960      	ldr	r0, [r4, #20]
 800475c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004760:	6160      	str	r0, [r4, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004762:	690f      	ldr	r7, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004764:	68e5      	ldr	r5, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004766:	2f04      	cmp	r7, #4
 8004768:	d02f      	beq.n	80047ca <HAL_ADC_ConfigChannel+0x18e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800476a:	f104 0060 	add.w	r0, r4, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800476e:	f3c5 05c1 	ubfx	r5, r5, #3, #2
  MODIFY_REG(*preg,
 8004772:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
 8004776:	f8df c25c 	ldr.w	ip, [pc, #604]	; 80049d4 <HAL_ADC_ConfigChannel+0x398>
 800477a:	006e      	lsls	r6, r5, #1
 800477c:	680d      	ldr	r5, [r1, #0]
 800477e:	ea0e 0c0c 	and.w	ip, lr, ip
 8004782:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004786:	ea45 0c0c 	orr.w	ip, r5, ip
 800478a:	694d      	ldr	r5, [r1, #20]
 800478c:	40b5      	lsls	r5, r6
 800478e:	ea45 050c 	orr.w	r5, r5, ip
 8004792:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8004796:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800479a:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 800479c:	698e      	ldr	r6, [r1, #24]
 800479e:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 80047a2:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 80047a6:	4335      	orrs	r5, r6
 80047a8:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80047ac:	7f0d      	ldrb	r5, [r1, #28]
 80047ae:	690e      	ldr	r6, [r1, #16]
 80047b0:	2d01      	cmp	r5, #1
  MODIFY_REG(*preg,
 80047b2:	f850 5026 	ldr.w	r5, [r0, r6, lsl #2]
 80047b6:	bf08      	it	eq
 80047b8:	f04f 7200 	moveq.w	r2, #33554432	; 0x2000000
 80047bc:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 80047c0:	432a      	orrs	r2, r5
 80047c2:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 80047c6:	6808      	ldr	r0, [r1, #0]
}
 80047c8:	e766      	b.n	8004698 <HAL_ADC_ConfigChannel+0x5c>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047ca:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80047cc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80047ce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80047d0:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047d4:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047d8:	2d00      	cmp	r5, #0
 80047da:	f040 80fd 	bne.w	80049d8 <HAL_ADC_ConfigChannel+0x39c>
 80047de:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047e2:	42aa      	cmp	r2, r5
 80047e4:	f000 8171 	beq.w	8004aca <HAL_ADC_ConfigChannel+0x48e>
 80047e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80047ea:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047ec:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047f0:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80047f4:	f104 0764 	add.w	r7, r4, #100	; 0x64
 80047f8:	42ae      	cmp	r6, r5
 80047fa:	f000 8154 	beq.w	8004aa6 <HAL_ADC_ConfigChannel+0x46a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80047fe:	6896      	ldr	r6, [r2, #8]
 8004800:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004802:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004806:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800480a:	42ae      	cmp	r6, r5
 800480c:	f000 8139 	beq.w	8004a82 <HAL_ADC_ConfigChannel+0x446>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004810:	68d6      	ldr	r6, [r2, #12]
 8004812:	68d6      	ldr	r6, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004814:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004818:	f3c6 6284 	ubfx	r2, r6, #26, #5
 800481c:	4295      	cmp	r5, r2
 800481e:	f47f af3b 	bne.w	8004698 <HAL_ADC_ConfigChannel+0x5c>
  MODIFY_REG(*preg,
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004828:	603a      	str	r2, [r7, #0]
 800482a:	6808      	ldr	r0, [r1, #0]
}
 800482c:	e734      	b.n	8004698 <HAL_ADC_ConfigChannel+0x5c>
    SET_BIT(ADCx->DIFSEL,
 800482e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004832:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8004836:	432a      	orrs	r2, r5
 8004838:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800483c:	2d00      	cmp	r5, #0
 800483e:	d050      	beq.n	80048e2 <HAL_ADC_ConfigChannel+0x2a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004840:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8004844:	2a00      	cmp	r2, #0
 8004846:	f000 80f8 	beq.w	8004a3a <HAL_ADC_ConfigChannel+0x3fe>
  return __builtin_clz(value);
 800484a:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800484e:	3201      	adds	r2, #1
 8004850:	f002 021f 	and.w	r2, r2, #31
 8004854:	2a09      	cmp	r2, #9
 8004856:	f240 80f0 	bls.w	8004a3a <HAL_ADC_ConfigChannel+0x3fe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800485e:	2a00      	cmp	r2, #0
 8004860:	f000 814f 	beq.w	8004b02 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8004864:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004868:	3201      	adds	r2, #1
 800486a:	0692      	lsls	r2, r2, #26
 800486c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004870:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004874:	2d00      	cmp	r5, #0
 8004876:	f000 8149 	beq.w	8004b0c <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 800487a:	fab5 f585 	clz	r5, r5
 800487e:	3501      	adds	r5, #1
 8004880:	f005 051f 	and.w	r5, r5, #31
 8004884:	2601      	movs	r6, #1
 8004886:	fa06 f505 	lsl.w	r5, r6, r5
 800488a:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004890:	2800      	cmp	r0, #0
 8004892:	f000 8139 	beq.w	8004b08 <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 8004896:	fab0 f080 	clz	r0, r0
 800489a:	1c42      	adds	r2, r0, #1
 800489c:	f002 001f 	and.w	r0, r2, #31
 80048a0:	f06f 061d 	mvn.w	r6, #29
 80048a4:	2203      	movs	r2, #3
 80048a6:	fb12 6200 	smlabb	r2, r2, r0, r6
 80048aa:	0512      	lsls	r2, r2, #20
 80048ac:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048b0:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80048b2:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 80048b4:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80048b6:	f006 0604 	and.w	r6, r6, #4
 80048ba:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 80048be:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80048c2:	fa00 f702 	lsl.w	r7, r0, r2
 80048c6:	f04f 0c07 	mov.w	ip, #7
 80048ca:	5970      	ldr	r0, [r6, r5]
 80048cc:	fa0c f202 	lsl.w	r2, ip, r2
 80048d0:	ea20 0202 	bic.w	r2, r0, r2
 80048d4:	433a      	orrs	r2, r7
 80048d6:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048d8:	680a      	ldr	r2, [r1, #0]
}
 80048da:	e6ef      	b.n	80046bc <HAL_ADC_ConfigChannel+0x80>
  __HAL_LOCK(hadc);
 80048dc:	2002      	movs	r0, #2
}
 80048de:	b003      	add	sp, #12
 80048e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048e2:	0e80      	lsrs	r0, r0, #26
 80048e4:	3001      	adds	r0, #1
 80048e6:	f000 061f 	and.w	r6, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048ea:	2e09      	cmp	r6, #9
 80048ec:	d850      	bhi.n	8004990 <HAL_ADC_ConfigChannel+0x354>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048ee:	0685      	lsls	r5, r0, #26
 80048f0:	2201      	movs	r2, #1
 80048f2:	40b2      	lsls	r2, r6
 80048f4:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80048f8:	4315      	orrs	r5, r2
 80048fa:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80048fe:	0512      	lsls	r2, r2, #20
 8004900:	e7d6      	b.n	80048b0 <HAL_ADC_ConfigChannel+0x274>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004902:	492c      	ldr	r1, [pc, #176]	; (80049b4 <HAL_ADC_ConfigChannel+0x378>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004904:	4830      	ldr	r0, [pc, #192]	; (80049c8 <HAL_ADC_ConfigChannel+0x38c>)
 8004906:	688a      	ldr	r2, [r1, #8]
 8004908:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800490c:	4316      	orrs	r6, r2
 800490e:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8004912:	608e      	str	r6, [r1, #8]
 8004914:	6802      	ldr	r2, [r0, #0]
 8004916:	492d      	ldr	r1, [pc, #180]	; (80049cc <HAL_ADC_ConfigChannel+0x390>)
 8004918:	0992      	lsrs	r2, r2, #6
 800491a:	fba1 1202 	umull	r1, r2, r1, r2
 800491e:	0992      	lsrs	r2, r2, #6
 8004920:	3201      	adds	r2, #1
 8004922:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004926:	0092      	lsls	r2, r2, #2
 8004928:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800492a:	9a01      	ldr	r2, [sp, #4]
 800492c:	2a00      	cmp	r2, #0
 800492e:	f43f aef3 	beq.w	8004718 <HAL_ADC_ConfigChannel+0xdc>
            wait_loop_index--;
 8004932:	9a01      	ldr	r2, [sp, #4]
 8004934:	3a01      	subs	r2, #1
 8004936:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004938:	9a01      	ldr	r2, [sp, #4]
 800493a:	2a00      	cmp	r2, #0
 800493c:	d1f9      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x2f6>
 800493e:	e6eb      	b.n	8004718 <HAL_ADC_ConfigChannel+0xdc>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004940:	4d23      	ldr	r5, [pc, #140]	; (80049d0 <HAL_ADC_ConfigChannel+0x394>)
 8004942:	42aa      	cmp	r2, r5
 8004944:	f47f aee8 	bne.w	8004718 <HAL_ADC_ConfigChannel+0xdc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004948:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 800494c:	f47f aee4 	bne.w	8004718 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_VREFINT_INSTANCE(hadc))
 8004950:	4a1c      	ldr	r2, [pc, #112]	; (80049c4 <HAL_ADC_ConfigChannel+0x388>)
 8004952:	4294      	cmp	r4, r2
 8004954:	f43f aee0 	beq.w	8004718 <HAL_ADC_ConfigChannel+0xdc>
 8004958:	688a      	ldr	r2, [r1, #8]
 800495a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800495e:	4332      	orrs	r2, r6
 8004960:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004964:	608a      	str	r2, [r1, #8]
}
 8004966:	e6cc      	b.n	8004702 <HAL_ADC_ConfigChannel+0xc6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004968:	0df5      	lsrs	r5, r6, #23
 800496a:	f104 0014 	add.w	r0, r4, #20
 800496e:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8004972:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8004976:	582f      	ldr	r7, [r5, r0]
 8004978:	f04f 0c07 	mov.w	ip, #7
 800497c:	fa0c f606 	lsl.w	r6, ip, r6
 8004980:	ea27 0606 	bic.w	r6, r7, r6
 8004984:	502e      	str	r6, [r5, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004986:	6960      	ldr	r0, [r4, #20]
 8004988:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800498c:	6160      	str	r0, [r4, #20]
}
 800498e:	e6e8      	b.n	8004762 <HAL_ADC_ConfigChannel+0x126>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004990:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8004994:	0685      	lsls	r5, r0, #26
 8004996:	3a1e      	subs	r2, #30
 8004998:	2001      	movs	r0, #1
 800499a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800499e:	0512      	lsls	r2, r2, #20
 80049a0:	fa00 f606 	lsl.w	r6, r0, r6
 80049a4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80049a8:	4335      	orrs	r5, r6
 80049aa:	e781      	b.n	80048b0 <HAL_ADC_ConfigChannel+0x274>
 80049ac:	407f0000 	.word	0x407f0000
 80049b0:	80080000 	.word	0x80080000
 80049b4:	50000300 	.word	0x50000300
 80049b8:	c3210000 	.word	0xc3210000
 80049bc:	90c00010 	.word	0x90c00010
 80049c0:	c7520000 	.word	0xc7520000
 80049c4:	50000100 	.word	0x50000100
 80049c8:	20000428 	.word	0x20000428
 80049cc:	053e2d63 	.word	0x053e2d63
 80049d0:	cb840000 	.word	0xcb840000
 80049d4:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80049dc:	b11d      	cbz	r5, 80049e6 <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 80049de:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049e2:	42aa      	cmp	r2, r5
 80049e4:	d071      	beq.n	8004aca <HAL_ADC_ConfigChannel+0x48e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80049e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049e8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049ea:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049ee:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80049f2:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80049fa:	b11d      	cbz	r5, 8004a04 <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 80049fc:	fab5 f585 	clz	r5, r5
 8004a00:	42ae      	cmp	r6, r5
 8004a02:	d050      	beq.n	8004aa6 <HAL_ADC_ConfigChannel+0x46a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a04:	6895      	ldr	r5, [r2, #8]
 8004a06:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a08:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a0c:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a10:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004a14:	b11d      	cbz	r5, 8004a1e <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8004a16:	fab5 f585 	clz	r5, r5
 8004a1a:	42ae      	cmp	r6, r5
 8004a1c:	d031      	beq.n	8004a82 <HAL_ADC_ConfigChannel+0x446>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a1e:	68d5      	ldr	r5, [r2, #12]
 8004a20:	68d5      	ldr	r5, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a22:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a26:	f3c5 6284 	ubfx	r2, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004a2e:	2d00      	cmp	r5, #0
 8004a30:	f43f ae32 	beq.w	8004698 <HAL_ADC_ConfigChannel+0x5c>
  return __builtin_clz(value);
 8004a34:	fab5 f585 	clz	r5, r5
 8004a38:	e6f0      	b.n	800481c <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3a:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8004a3e:	2a00      	cmp	r2, #0
 8004a40:	d059      	beq.n	8004af6 <HAL_ADC_ConfigChannel+0x4ba>
  return __builtin_clz(value);
 8004a42:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a46:	3201      	adds	r2, #1
 8004a48:	0692      	lsls	r2, r2, #26
 8004a4a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004a52:	2d00      	cmp	r5, #0
 8004a54:	d04d      	beq.n	8004af2 <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 8004a56:	fab5 f585 	clz	r5, r5
 8004a5a:	3501      	adds	r5, #1
 8004a5c:	f005 051f 	and.w	r5, r5, #31
 8004a60:	2601      	movs	r6, #1
 8004a62:	fa06 f505 	lsl.w	r5, r6, r5
 8004a66:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a68:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d045      	beq.n	8004afc <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8004a70:	fab0 f080 	clz	r0, r0
 8004a74:	3001      	adds	r0, #1
 8004a76:	f000 001f 	and.w	r0, r0, #31
 8004a7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004a7e:	0502      	lsls	r2, r0, #20
 8004a80:	e716      	b.n	80048b0 <HAL_ADC_ConfigChannel+0x274>
  MODIFY_REG(*preg,
 8004a82:	6838      	ldr	r0, [r7, #0]
 8004a84:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004a88:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a8a:	68d0      	ldr	r0, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a8c:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a8e:	f102 070c 	add.w	r7, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004a92:	68d2      	ldr	r2, [r2, #12]
 8004a94:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a98:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a9c:	2d00      	cmp	r5, #0
 8004a9e:	d1c4      	bne.n	8004a2a <HAL_ADC_ConfigChannel+0x3ee>
 8004aa0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004aa4:	e6ba      	b.n	800481c <HAL_ADC_ConfigChannel+0x1e0>
  MODIFY_REG(*preg,
 8004aa6:	6838      	ldr	r0, [r7, #0]
 8004aa8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004aac:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004aae:	6890      	ldr	r0, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ab0:	6808      	ldr	r0, [r1, #0]
 8004ab2:	6896      	ldr	r6, [r2, #8]
 8004ab4:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ab8:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004abc:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ac0:	2d00      	cmp	r5, #0
 8004ac2:	d1a5      	bne.n	8004a10 <HAL_ADC_ConfigChannel+0x3d4>
 8004ac4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004ac8:	e69f      	b.n	800480a <HAL_ADC_ConfigChannel+0x1ce>
  MODIFY_REG(*preg,
 8004aca:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004acc:	4622      	mov	r2, r4
 8004ace:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004ad2:	f842 0f60 	str.w	r0, [r2, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ad6:	6e60      	ldr	r0, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ad8:	6808      	ldr	r0, [r1, #0]
 8004ada:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8004adc:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ae0:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ae4:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ae8:	2d00      	cmp	r5, #0
 8004aea:	d184      	bne.n	80049f6 <HAL_ADC_ConfigChannel+0x3ba>
 8004aec:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8004af0:	e682      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x1bc>
 8004af2:	2502      	movs	r5, #2
 8004af4:	e7b7      	b.n	8004a66 <HAL_ADC_ConfigChannel+0x42a>
 8004af6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004afa:	e7a8      	b.n	8004a4e <HAL_ADC_ConfigChannel+0x412>
 8004afc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004b00:	e6d6      	b.n	80048b0 <HAL_ADC_ConfigChannel+0x274>
 8004b02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004b06:	e6b3      	b.n	8004870 <HAL_ADC_ConfigChannel+0x234>
 8004b08:	4a01      	ldr	r2, [pc, #4]	; (8004b10 <HAL_ADC_ConfigChannel+0x4d4>)
 8004b0a:	e6d1      	b.n	80048b0 <HAL_ADC_ConfigChannel+0x274>
 8004b0c:	2502      	movs	r5, #2
 8004b0e:	e6bc      	b.n	800488a <HAL_ADC_ConfigChannel+0x24e>
 8004b10:	fe500000 	.word	0xfe500000

08004b14 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b18:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8004b1c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8004b1e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004b20:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8004b22:	9201      	str	r2, [sp, #4]
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b24:	6942      	ldr	r2, [r0, #20]
  __HAL_LOCK(hadc);
 8004b26:	f000 8166 	beq.w	8004df6 <HAL_ADCEx_InjectedConfigChannel+0x2e2>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004b30:	b1e2      	cbz	r2, 8004b6c <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8004b32:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d019      	beq.n	8004b6c <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004b38:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8004b3a:	2c00      	cmp	r4, #0
 8004b3c:	f040 8119 	bne.w	8004d72 <HAL_ADCEx_InjectedConfigChannel+0x25e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004b40:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004b42:	2a00      	cmp	r2, #0
 8004b44:	f000 8222 	beq.w	8004f8c <HAL_ADCEx_InjectedConfigChannel+0x478>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004b48:	1e5d      	subs	r5, r3, #1
 8004b4a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004b4c:	f002 037c 	and.w	r3, r2, #124	; 0x7c
 8004b50:	432b      	orrs	r3, r5
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004b52:	4323      	orrs	r3, r4
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004b54:	e9d1 2400 	ldrd	r2, r4, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004b58:	6685      	str	r5, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004b5a:	f004 051f 	and.w	r5, r4, #31
 8004b5e:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8004b62:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004b64:	431c      	orrs	r4, r3
 8004b66:	6644      	str	r4, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004b68:	6803      	ldr	r3, [r0, #0]
 8004b6a:	e005      	b.n	8004b78 <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004b6c:	684b      	ldr	r3, [r1, #4]
 8004b6e:	2b09      	cmp	r3, #9
 8004b70:	f000 80eb 	beq.w	8004d4a <HAL_ADCEx_InjectedConfigChannel+0x236>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004b74:	680a      	ldr	r2, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004b76:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b78:	689c      	ldr	r4, [r3, #8]
 8004b7a:	0727      	lsls	r7, r4, #28
 8004b7c:	d410      	bmi.n	8004ba0 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004b7e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004b82:	2c00      	cmp	r4, #0
 8004b84:	f040 80d8 	bne.w	8004d38 <HAL_ADCEx_InjectedConfigChannel+0x224>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004b88:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8004b8c:	68dd      	ldr	r5, [r3, #12]
 8004b8e:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8004b92:	0524      	lsls	r4, r4, #20
 8004b94:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8004b98:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8004b9c:	432c      	orrs	r4, r5
 8004b9e:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ba0:	689c      	ldr	r4, [r3, #8]
 8004ba2:	f014 0404 	ands.w	r4, r4, #4
 8004ba6:	d058      	beq.n	8004c5a <HAL_ADCEx_InjectedConfigChannel+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ba8:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004baa:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bac:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bae:	07ee      	lsls	r6, r5, #31
 8004bb0:	d40c      	bmi.n	8004bcc <HAL_ADCEx_InjectedConfigChannel+0xb8>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004bb2:	4dac      	ldr	r5, [pc, #688]	; (8004e64 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8004bb4:	68ce      	ldr	r6, [r1, #12]
 8004bb6:	42ae      	cmp	r6, r5
 8004bb8:	f000 8100 	beq.w	8004dbc <HAL_ADCEx_InjectedConfigChannel+0x2a8>
    CLEAR_BIT(ADCx->DIFSEL,
 8004bbc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004bc0:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8004bc4:	ea21 0105 	bic.w	r1, r1, r5
 8004bc8:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004bcc:	49a6      	ldr	r1, [pc, #664]	; (8004e68 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8004bce:	420a      	tst	r2, r1
 8004bd0:	d019      	beq.n	8004c06 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004bd2:	4ea6      	ldr	r6, [pc, #664]	; (8004e6c <HAL_ADCEx_InjectedConfigChannel+0x358>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004bd4:	4da6      	ldr	r5, [pc, #664]	; (8004e70 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8004bd6:	68b1      	ldr	r1, [r6, #8]
 8004bd8:	42aa      	cmp	r2, r5
 8004bda:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8004bde:	d019      	beq.n	8004c14 <HAL_ADCEx_InjectedConfigChannel+0x100>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004be0:	4da4      	ldr	r5, [pc, #656]	; (8004e74 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8004be2:	42aa      	cmp	r2, r5
 8004be4:	d016      	beq.n	8004c14 <HAL_ADCEx_InjectedConfigChannel+0x100>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004be6:	4da4      	ldr	r5, [pc, #656]	; (8004e78 <HAL_ADCEx_InjectedConfigChannel+0x364>)
 8004be8:	42aa      	cmp	r2, r5
 8004bea:	f040 810d 	bne.w	8004e08 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004bee:	01cd      	lsls	r5, r1, #7
 8004bf0:	d409      	bmi.n	8004c06 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bf2:	4aa2      	ldr	r2, [pc, #648]	; (8004e7c <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d006      	beq.n	8004c06 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004bf8:	68b3      	ldr	r3, [r6, #8]
 8004bfa:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004bfe:	431f      	orrs	r7, r3
 8004c00:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8004c04:	60b7      	str	r7, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c06:	2300      	movs	r3, #0
 8004c08:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	b002      	add	sp, #8
 8004c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c14:	020a      	lsls	r2, r1, #8
 8004c16:	d4f6      	bmi.n	8004c06 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c1c:	d1f3      	bne.n	8004c06 <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8004c1e:	4a93      	ldr	r2, [pc, #588]	; (8004e6c <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8004c20:	6893      	ldr	r3, [r2, #8]
 8004c22:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004c26:	431f      	orrs	r7, r3
 8004c28:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004c2c:	4b94      	ldr	r3, [pc, #592]	; (8004e80 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8004c2e:	6097      	str	r7, [r2, #8]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a94      	ldr	r2, [pc, #592]	; (8004e84 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8004c34:	099b      	lsrs	r3, r3, #6
 8004c36:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3a:	099b      	lsrs	r3, r3, #6
 8004c3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	3318      	adds	r3, #24
 8004c44:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004c46:	9b01      	ldr	r3, [sp, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0dc      	beq.n	8004c06 <HAL_ADCEx_InjectedConfigChannel+0xf2>
          wait_loop_index--;
 8004c4c:	9b01      	ldr	r3, [sp, #4]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004c52:	9b01      	ldr	r3, [sp, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f9      	bne.n	8004c4c <HAL_ADCEx_InjectedConfigChannel+0x138>
 8004c58:	e7d5      	b.n	8004c06 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004c5a:	689d      	ldr	r5, [r3, #8]
 8004c5c:	f015 0508 	ands.w	r5, r5, #8
 8004c60:	d1a4      	bne.n	8004bac <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004c62:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8004c64:	2c00      	cmp	r4, #0
 8004c66:	f040 809a 	bne.w	8004d9e <HAL_ADCEx_InjectedConfigChannel+0x28a>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004c6a:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004c6e:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004c70:	68dc      	ldr	r4, [r3, #12]
 8004c72:	bf0c      	ite	eq
 8004c74:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004c78:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8004c7c:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c7e:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004c80:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8004c84:	2e01      	cmp	r6, #1
      MODIFY_REG(hadc->Instance->CFGR2,
 8004c86:	691e      	ldr	r6, [r3, #16]
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004c88:	f000 80e0 	beq.w	8004e4c <HAL_ADCEx_InjectedConfigChannel+0x338>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004c8c:	f026 0602 	bic.w	r6, r6, #2
 8004c90:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004c92:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004c94:	0dd7      	lsrs	r7, r2, #23
 8004c96:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8004c9a:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8004c9e:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004ca2:	f000 80c4 	beq.w	8004e2e <HAL_ADCEx_InjectedConfigChannel+0x31a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004ca6:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8004caa:	f04f 0e07 	mov.w	lr, #7
 8004cae:	4096      	lsls	r6, r2
 8004cb0:	fa0e fe02 	lsl.w	lr, lr, r2
 8004cb4:	f857 200c 	ldr.w	r2, [r7, ip]
 8004cb8:	ea22 020e 	bic.w	r2, r2, lr
 8004cbc:	4316      	orrs	r6, r2
 8004cbe:	f847 600c 	str.w	r6, [r7, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004cc2:	695a      	ldr	r2, [r3, #20]
 8004cc4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cc8:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004cca:	690f      	ldr	r7, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004ccc:	68de      	ldr	r6, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004cce:	2f04      	cmp	r7, #4
 8004cd0:	f000 80e0 	beq.w	8004e94 <HAL_ADCEx_InjectedConfigChannel+0x380>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004cd4:	f3c6 06c1 	ubfx	r6, r6, #3, #2
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004cd8:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8004cdc:	ea4f 0e46 	mov.w	lr, r6, lsl #1
  MODIFY_REG(*preg,
 8004ce0:	680e      	ldr	r6, [r1, #0]
 8004ce2:	f852 8027 	ldr.w	r8, [r2, r7, lsl #2]
 8004ce6:	f006 4cf8 	and.w	ip, r6, #2080374784	; 0x7c000000
 8004cea:	4e67      	ldr	r6, [pc, #412]	; (8004e88 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8004cec:	ea08 0606 	and.w	r6, r8, r6
 8004cf0:	ea4c 0c06 	orr.w	ip, ip, r6
 8004cf4:	694e      	ldr	r6, [r1, #20]
 8004cf6:	fa06 f60e 	lsl.w	r6, r6, lr
 8004cfa:	ea46 060c 	orr.w	r6, r6, ip
 8004cfe:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8004d02:	f842 6027 	str.w	r6, [r2, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d06:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 8004d0a:	698f      	ldr	r7, [r1, #24]
 8004d0c:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8004d10:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8004d14:	433e      	orrs	r6, r7
 8004d16:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004d1a:	7f0e      	ldrb	r6, [r1, #28]
 8004d1c:	690f      	ldr	r7, [r1, #16]
 8004d1e:	2e01      	cmp	r6, #1
  MODIFY_REG(*preg,
 8004d20:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8004d24:	bf08      	it	eq
 8004d26:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8004d2a:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 8004d2e:	4335      	orrs	r5, r6
 8004d30:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004d34:	680a      	ldr	r2, [r1, #0]
}
 8004d36:	e739      	b.n	8004bac <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 8004d38:	68dc      	ldr	r4, [r3, #12]
 8004d3a:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8004d3e:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8004d42:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8004d46:	60dc      	str	r4, [r3, #12]
 8004d48:	e72a      	b.n	8004ba0 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004d4a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004d4c:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d056      	beq.n	8004e00 <HAL_ADCEx_InjectedConfigChannel+0x2ec>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004d52:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004d54:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004d58:	0c55      	lsrs	r5, r2, #17
 8004d5a:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004d5e:	4323      	orrs	r3, r4
 8004d60:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004d62:	6803      	ldr	r3, [r0, #0]
 8004d64:	4e49      	ldr	r6, [pc, #292]	; (8004e8c <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8004d66:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004d68:	4034      	ands	r4, r6
 8004d6a:	432c      	orrs	r4, r5
 8004d6c:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004d6e:	6645      	str	r5, [r0, #100]	; 0x64
 8004d70:	e702      	b.n	8004b78 <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004d72:	680a      	ldr	r2, [r1, #0]
 8004d74:	684b      	ldr	r3, [r1, #4]
 8004d76:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8004d7a:	f003 031f 	and.w	r3, r3, #31
 8004d7e:	409d      	lsls	r5, r3
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004d80:	6e43      	ldr	r3, [r0, #100]	; 0x64
    hadc->InjectionConfig.ChannelCount--;
 8004d82:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004d84:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8004d86:	6684      	str	r4, [r0, #104]	; 0x68
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004d88:	6803      	ldr	r3, [r0, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004d8a:	6645      	str	r5, [r0, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004d8c:	2c00      	cmp	r4, #0
 8004d8e:	f47f aef3 	bne.w	8004b78 <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004d92:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004d94:	4e3d      	ldr	r6, [pc, #244]	; (8004e8c <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8004d96:	4034      	ands	r4, r6
 8004d98:	4325      	orrs	r5, r4
 8004d9a:	64dd      	str	r5, [r3, #76]	; 0x4c
 8004d9c:	e6ec      	b.n	8004b78 <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004d9e:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8004da0:	2c00      	cmp	r4, #0
 8004da2:	f43f af62 	beq.w	8004c6a <HAL_ADCEx_InjectedConfigChannel+0x156>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004da6:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8004daa:	2c01      	cmp	r4, #1
 8004dac:	f000 8158 	beq.w	8005060 <HAL_ADCEx_InjectedConfigChannel+0x54c>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004db0:	68dc      	ldr	r4, [r3, #12]
 8004db2:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8004db6:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004db8:	462c      	mov	r4, r5
 8004dba:	e761      	b.n	8004c80 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    SET_BIT(ADCx->DIFSEL,
 8004dbc:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8004dc0:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8004dc4:	4335      	orrs	r5, r6
 8004dc6:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004dca:	2e00      	cmp	r6, #0
 8004dcc:	f040 80a7 	bne.w	8004f1e <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8004dd0:	0e92      	lsrs	r2, r2, #26
 8004dd2:	1c55      	adds	r5, r2, #1
 8004dd4:	f005 0c1f 	and.w	ip, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dd8:	f1bc 0f09 	cmp.w	ip, #9
 8004ddc:	f200 80d9 	bhi.w	8004f92 <HAL_ADCEx_InjectedConfigChannel+0x47e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004de0:	06ad      	lsls	r5, r5, #26
 8004de2:	2201      	movs	r2, #1
 8004de4:	fa02 f20c 	lsl.w	r2, r2, ip
 8004de8:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004dec:	4315      	orrs	r5, r2
 8004dee:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8004df2:	0512      	lsls	r2, r2, #20
 8004df4:	e0db      	b.n	8004fae <HAL_ADCEx_InjectedConfigChannel+0x49a>
  __HAL_LOCK(hadc);
 8004df6:	2402      	movs	r4, #2
}
 8004df8:	4620      	mov	r0, r4
 8004dfa:	b002      	add	sp, #8
 8004dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004e00:	0c55      	lsrs	r5, r2, #17
 8004e02:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004e06:	e7ac      	b.n	8004d62 <HAL_ADCEx_InjectedConfigChannel+0x24e>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004e08:	4d21      	ldr	r5, [pc, #132]	; (8004e90 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 8004e0a:	42aa      	cmp	r2, r5
 8004e0c:	f47f aefb 	bne.w	8004c06 <HAL_ADCEx_InjectedConfigChannel+0xf2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e10:	0249      	lsls	r1, r1, #9
 8004e12:	f53f aef8 	bmi.w	8004c06 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_VREFINT_INSTANCE(hadc))
 8004e16:	4a19      	ldr	r2, [pc, #100]	; (8004e7c <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	f43f aef4 	beq.w	8004c06 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004e1e:	68b3      	ldr	r3, [r6, #8]
 8004e20:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004e24:	431f      	orrs	r7, r3
 8004e26:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 8004e2a:	60b7      	str	r7, [r6, #8]
}
 8004e2c:	e6eb      	b.n	8004c06 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004e2e:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8004e32:	f04f 0c07 	mov.w	ip, #7
 8004e36:	fa0c fc02 	lsl.w	ip, ip, r2
 8004e3a:	59ba      	ldr	r2, [r7, r6]
 8004e3c:	ea22 020c 	bic.w	r2, r2, ip
 8004e40:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004e42:	695a      	ldr	r2, [r3, #20]
 8004e44:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e48:	615a      	str	r2, [r3, #20]
}
 8004e4a:	e73e      	b.n	8004cca <HAL_ADCEx_InjectedConfigChannel+0x1b6>
      MODIFY_REG(hadc->Instance->CFGR2,
 8004e4c:	f426 7cff 	bic.w	ip, r6, #510	; 0x1fe
 8004e50:	e9d1 670d 	ldrd	r6, r7, [r1, #52]	; 0x34
 8004e54:	433e      	orrs	r6, r7
 8004e56:	ea46 060c 	orr.w	r6, r6, ip
 8004e5a:	f046 0602 	orr.w	r6, r6, #2
 8004e5e:	611e      	str	r6, [r3, #16]
 8004e60:	e717      	b.n	8004c92 <HAL_ADCEx_InjectedConfigChannel+0x17e>
 8004e62:	bf00      	nop
 8004e64:	407f0000 	.word	0x407f0000
 8004e68:	80080000 	.word	0x80080000
 8004e6c:	50000300 	.word	0x50000300
 8004e70:	c3210000 	.word	0xc3210000
 8004e74:	90c00010 	.word	0x90c00010
 8004e78:	c7520000 	.word	0xc7520000
 8004e7c:	50000100 	.word	0x50000100
 8004e80:	20000428 	.word	0x20000428
 8004e84:	053e2d63 	.word	0x053e2d63
 8004e88:	03fff000 	.word	0x03fff000
 8004e8c:	04104000 	.word	0x04104000
 8004e90:	cb840000 	.word	0xcb840000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004e96:	680a      	ldr	r2, [r1, #0]
 8004e98:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8004e9a:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e9e:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004ea2:	2e00      	cmp	r6, #0
 8004ea4:	f000 809a 	beq.w	8004fdc <HAL_ADCEx_InjectedConfigChannel+0x4c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea8:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004eac:	b126      	cbz	r6, 8004eb8 <HAL_ADCEx_InjectedConfigChannel+0x3a4>
  return __builtin_clz(value);
 8004eae:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004eb2:	42b5      	cmp	r5, r6
 8004eb4:	f000 80d9 	beq.w	800506a <HAL_ADCEx_InjectedConfigChannel+0x556>
 8004eb8:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004eba:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ebc:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ec0:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004ec4:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec8:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004ecc:	b126      	cbz	r6, 8004ed8 <HAL_ADCEx_InjectedConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004ece:	fab6 f686 	clz	r6, r6
 8004ed2:	42b7      	cmp	r7, r6
 8004ed4:	f000 80de 	beq.w	8005094 <HAL_ADCEx_InjectedConfigChannel+0x580>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ed8:	68ae      	ldr	r6, [r5, #8]
 8004eda:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004edc:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ee0:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee4:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004ee8:	b126      	cbz	r6, 8004ef4 <HAL_ADCEx_InjectedConfigChannel+0x3e0>
  return __builtin_clz(value);
 8004eea:	fab6 f686 	clz	r6, r6
 8004eee:	42b7      	cmp	r7, r6
 8004ef0:	f000 80e5 	beq.w	80050be <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ef4:	68ee      	ldr	r6, [r5, #12]
 8004ef6:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ef8:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004efa:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efe:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004f02:	2e00      	cmp	r6, #0
 8004f04:	f43f ae52 	beq.w	8004bac <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 8004f08:	fab6 f686 	clz	r6, r6
 8004f0c:	42be      	cmp	r6, r7
 8004f0e:	f47f ae4d 	bne.w	8004bac <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8004f12:	682a      	ldr	r2, [r5, #0]
 8004f14:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f18:	602a      	str	r2, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004f1a:	680a      	ldr	r2, [r1, #0]
}
 8004f1c:	e646      	b.n	8004bac <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004f22:	2d00      	cmp	r5, #0
 8004f24:	d076      	beq.n	8005014 <HAL_ADCEx_InjectedConfigChannel+0x500>
  return __builtin_clz(value);
 8004f26:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f2a:	3501      	adds	r5, #1
 8004f2c:	f005 051f 	and.w	r5, r5, #31
 8004f30:	2d09      	cmp	r5, #9
 8004f32:	d96f      	bls.n	8005014 <HAL_ADCEx_InjectedConfigChannel+0x500>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f34:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004f38:	2d00      	cmp	r5, #0
 8004f3a:	f000 80e0 	beq.w	80050fe <HAL_ADCEx_InjectedConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004f3e:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004f42:	3501      	adds	r5, #1
 8004f44:	06ad      	lsls	r5, r5, #26
 8004f46:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004f4e:	2e00      	cmp	r6, #0
 8004f50:	f000 80d3 	beq.w	80050fa <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 8004f54:	fab6 f686 	clz	r6, r6
 8004f58:	3601      	adds	r6, #1
 8004f5a:	f006 061f 	and.w	r6, r6, #31
 8004f5e:	2701      	movs	r7, #1
 8004f60:	fa07 f606 	lsl.w	r6, r7, r6
 8004f64:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f66:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004f6a:	2a00      	cmp	r2, #0
 8004f6c:	f000 80c3 	beq.w	80050f6 <HAL_ADCEx_InjectedConfigChannel+0x5e2>
  return __builtin_clz(value);
 8004f70:	fab2 f282 	clz	r2, r2
 8004f74:	3201      	adds	r2, #1
 8004f76:	f002 061f 	and.w	r6, r2, #31
 8004f7a:	f06f 071d 	mvn.w	r7, #29
 8004f7e:	2203      	movs	r2, #3
 8004f80:	fb12 7206 	smlabb	r2, r2, r6, r7
 8004f84:	0512      	lsls	r2, r2, #20
 8004f86:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004f8a:	e010      	b.n	8004fae <HAL_ADCEx_InjectedConfigChannel+0x49a>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	461d      	mov	r5, r3
 8004f90:	e5e0      	b.n	8004b54 <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004f92:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8004f96:	06ad      	lsls	r5, r5, #26
 8004f98:	3a1e      	subs	r2, #30
 8004f9a:	2601      	movs	r6, #1
 8004f9c:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8004fa0:	0512      	lsls	r2, r2, #20
 8004fa2:	fa06 fc0c 	lsl.w	ip, r6, ip
 8004fa6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004faa:	ea45 050c 	orr.w	r5, r5, ip
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fae:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004fb0:	0dd7      	lsrs	r7, r2, #23
  MODIFY_REG(*preg,
 8004fb2:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004fb4:	f007 0704 	and.w	r7, r7, #4
 8004fb8:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8004fbc:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004fc0:	fa05 fc02 	lsl.w	ip, r5, r2
 8004fc4:	f04f 0e07 	mov.w	lr, #7
 8004fc8:	59bd      	ldr	r5, [r7, r6]
 8004fca:	fa0e f202 	lsl.w	r2, lr, r2
 8004fce:	ea25 0202 	bic.w	r2, r5, r2
 8004fd2:	ea42 020c 	orr.w	r2, r2, ip
 8004fd6:	51ba      	str	r2, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004fd8:	680a      	ldr	r2, [r1, #0]
}
 8004fda:	e5f7      	b.n	8004bcc <HAL_ADCEx_InjectedConfigChannel+0xb8>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004fdc:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fe0:	42b5      	cmp	r5, r6
 8004fe2:	d042      	beq.n	800506a <HAL_ADCEx_InjectedConfigChannel+0x556>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004fe4:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004fe6:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fe8:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004fec:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004ff0:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8004ff4:	42b7      	cmp	r7, r6
 8004ff6:	d04d      	beq.n	8005094 <HAL_ADCEx_InjectedConfigChannel+0x580>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ff8:	68af      	ldr	r7, [r5, #8]
 8004ffa:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ffc:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005000:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8005004:	42b7      	cmp	r7, r6
 8005006:	d05a      	beq.n	80050be <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005008:	68ef      	ldr	r7, [r5, #12]
 800500a:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800500c:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800500e:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8005012:	e77b      	b.n	8004f0c <HAL_ADCEx_InjectedConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005014:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8005018:	2d00      	cmp	r5, #0
 800501a:	d066      	beq.n	80050ea <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 800501c:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005020:	3501      	adds	r5, #1
 8005022:	06ad      	lsls	r5, r5, #26
 8005024:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005028:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800502c:	2e00      	cmp	r6, #0
 800502e:	d05a      	beq.n	80050e6 <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 8005030:	fab6 f686 	clz	r6, r6
 8005034:	3601      	adds	r6, #1
 8005036:	f006 061f 	and.w	r6, r6, #31
 800503a:	2701      	movs	r7, #1
 800503c:	fa07 f606 	lsl.w	r6, r7, r6
 8005040:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005042:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8005046:	2a00      	cmp	r2, #0
 8005048:	d052      	beq.n	80050f0 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 800504a:	fab2 fc82 	clz	ip, r2
 800504e:	f10c 0c01 	add.w	ip, ip, #1
 8005052:	f00c 0c1f 	and.w	ip, ip, #31
 8005056:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800505a:	ea4f 520c 	mov.w	r2, ip, lsl #20
 800505e:	e7a6      	b.n	8004fae <HAL_ADCEx_InjectedConfigChannel+0x49a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005060:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8005062:	f046 0620 	orr.w	r6, r6, #32
 8005066:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 8005068:	e60a      	b.n	8004c80 <HAL_ADCEx_InjectedConfigChannel+0x16c>
  MODIFY_REG(*preg,
 800506a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800506c:	461d      	mov	r5, r3
 800506e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005072:	f845 2f60 	str.w	r2, [r5, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005076:	6e5a      	ldr	r2, [r3, #100]	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005078:	680a      	ldr	r2, [r1, #0]
 800507a:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 800507c:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005080:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005084:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005088:	2e00      	cmp	r6, #0
 800508a:	f47f af1d 	bne.w	8004ec8 <HAL_ADCEx_InjectedConfigChannel+0x3b4>
 800508e:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8005092:	e7af      	b.n	8004ff4 <HAL_ADCEx_InjectedConfigChannel+0x4e0>
  MODIFY_REG(*preg,
 8005094:	f8dc 2000 	ldr.w	r2, [ip]
 8005098:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800509c:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80050a0:	68aa      	ldr	r2, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80050a2:	680a      	ldr	r2, [r1, #0]
 80050a4:	68af      	ldr	r7, [r5, #8]
 80050a6:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80050aa:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050ae:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80050b2:	2e00      	cmp	r6, #0
 80050b4:	f47f af16 	bne.w	8004ee4 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
 80050b8:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80050bc:	e7a2      	b.n	8005004 <HAL_ADCEx_InjectedConfigChannel+0x4f0>
  MODIFY_REG(*preg,
 80050be:	f8dc 2000 	ldr.w	r2, [ip]
 80050c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80050c6:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80050ca:	68ea      	ldr	r2, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80050cc:	680a      	ldr	r2, [r1, #0]
 80050ce:	68ef      	ldr	r7, [r5, #12]
 80050d0:	f3c2 0612 	ubfx	r6, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050d4:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80050d6:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80050da:	2e00      	cmp	r6, #0
 80050dc:	f47f af0f 	bne.w	8004efe <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 80050e0:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80050e4:	e712      	b.n	8004f0c <HAL_ADCEx_InjectedConfigChannel+0x3f8>
 80050e6:	2602      	movs	r6, #2
 80050e8:	e7aa      	b.n	8005040 <HAL_ADCEx_InjectedConfigChannel+0x52c>
 80050ea:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80050ee:	e79b      	b.n	8005028 <HAL_ADCEx_InjectedConfigChannel+0x514>
 80050f0:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80050f4:	e75b      	b.n	8004fae <HAL_ADCEx_InjectedConfigChannel+0x49a>
 80050f6:	4a03      	ldr	r2, [pc, #12]	; (8005104 <HAL_ADCEx_InjectedConfigChannel+0x5f0>)
 80050f8:	e759      	b.n	8004fae <HAL_ADCEx_InjectedConfigChannel+0x49a>
 80050fa:	2602      	movs	r6, #2
 80050fc:	e732      	b.n	8004f64 <HAL_ADCEx_InjectedConfigChannel+0x450>
 80050fe:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8005102:	e722      	b.n	8004f4a <HAL_ADCEx_InjectedConfigChannel+0x436>
 8005104:	fe500000 	.word	0xfe500000

08005108 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005108:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800510a:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800510e:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8005110:	2a01      	cmp	r2, #1
{
 8005112:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8005114:	d04f      	beq.n	80051b6 <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005116:	6804      	ldr	r4, [r0, #0]
 8005118:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800511a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800511c:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800511e:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005122:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8005124:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005128:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800512a:	d008      	beq.n	800513e <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800512c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800512e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005132:	f041 0120 	orr.w	r1, r1, #32
 8005136:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8005138:	b01c      	add	sp, #112	; 0x70
 800513a:	bcf0      	pop	{r4, r5, r6, r7}
 800513c:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800513e:	4a23      	ldr	r2, [pc, #140]	; (80051cc <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8005140:	6890      	ldr	r0, [r2, #8]
 8005142:	0740      	lsls	r0, r0, #29
 8005144:	d50b      	bpl.n	800515e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005146:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005148:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800514a:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 800514e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005150:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8005158:	b01c      	add	sp, #112	; 0x70
 800515a:	bcf0      	pop	{r4, r5, r6, r7}
 800515c:	4770      	bx	lr
 800515e:	68a0      	ldr	r0, [r4, #8]
 8005160:	0746      	lsls	r6, r0, #29
 8005162:	d4f1      	bmi.n	8005148 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005164:	b1d5      	cbz	r5, 800519c <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005166:	4e1a      	ldr	r6, [pc, #104]	; (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 8005168:	684f      	ldr	r7, [r1, #4]
 800516a:	68b0      	ldr	r0, [r6, #8]
 800516c:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8005170:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8005174:	4338      	orrs	r0, r7
 8005176:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 800517a:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800517c:	68a4      	ldr	r4, [r4, #8]
 800517e:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005180:	4320      	orrs	r0, r4
 8005182:	f010 0001 	ands.w	r0, r0, #1
 8005186:	d114      	bne.n	80051b2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 8005188:	688a      	ldr	r2, [r1, #8]
 800518a:	4315      	orrs	r5, r2
 800518c:	68b2      	ldr	r2, [r6, #8]
 800518e:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8005192:	f022 020f 	bic.w	r2, r2, #15
 8005196:	4315      	orrs	r5, r2
 8005198:	60b5      	str	r5, [r6, #8]
 800519a:	e7da      	b.n	8005152 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800519c:	4d0c      	ldr	r5, [pc, #48]	; (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 800519e:	68a9      	ldr	r1, [r5, #8]
 80051a0:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80051a4:	60a9      	str	r1, [r5, #8]
 80051a6:	68a1      	ldr	r1, [r4, #8]
 80051a8:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051aa:	4308      	orrs	r0, r1
 80051ac:	f010 0001 	ands.w	r0, r0, #1
 80051b0:	d005      	beq.n	80051be <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051b2:	2000      	movs	r0, #0
 80051b4:	e7cd      	b.n	8005152 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80051b6:	2002      	movs	r0, #2
}
 80051b8:	b01c      	add	sp, #112	; 0x70
 80051ba:	bcf0      	pop	{r4, r5, r6, r7}
 80051bc:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80051be:	68aa      	ldr	r2, [r5, #8]
 80051c0:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80051c4:	f022 020f 	bic.w	r2, r2, #15
 80051c8:	60aa      	str	r2, [r5, #8]
 80051ca:	e7c2      	b.n	8005152 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80051cc:	50000100 	.word	0x50000100
 80051d0:	50000300 	.word	0x50000300

080051d4 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80051d4:	b1b0      	cbz	r0, 8005204 <HAL_CORDIC_Init+0x30>
{
 80051d6:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80051d8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80051dc:	4604      	mov	r4, r0
 80051de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80051e2:	b153      	cbz	r3, 80051fa <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80051e4:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80051e6:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80051e8:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 80051ea:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 80051ee:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 80051f2:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80051f6:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 80051f8:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 80051fa:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 80051fe:	f7fe fdd3 	bl	8003da8 <HAL_CORDIC_MspInit>
 8005202:	e7ef      	b.n	80051e4 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8005204:	2001      	movs	r0, #1
}
 8005206:	4770      	bx	lr

08005208 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005208:	4907      	ldr	r1, [pc, #28]	; (8005228 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800520a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800520c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800520e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005212:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005216:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005218:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800521a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800521e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005222:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	e000ed00 	.word	0xe000ed00

0800522c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800522c:	4b1c      	ldr	r3, [pc, #112]	; (80052a0 <HAL_NVIC_SetPriority+0x74>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005234:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005236:	f1c3 0e07 	rsb	lr, r3, #7
 800523a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800523e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005242:	bf28      	it	cs
 8005244:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005248:	f1bc 0f06 	cmp.w	ip, #6
 800524c:	d91b      	bls.n	8005286 <HAL_NVIC_SetPriority+0x5a>
 800524e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005250:	f04f 3cff 	mov.w	ip, #4294967295
 8005254:	fa0c fc03 	lsl.w	ip, ip, r3
 8005258:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800525c:	f04f 3cff 	mov.w	ip, #4294967295
 8005260:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005264:	ea21 010c 	bic.w	r1, r1, ip
 8005268:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800526a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800526c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005270:	db0c      	blt.n	800528c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005272:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005276:	0109      	lsls	r1, r1, #4
 8005278:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800527c:	b2c9      	uxtb	r1, r1
 800527e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005282:	f85d fb04 	ldr.w	pc, [sp], #4
 8005286:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005288:	4613      	mov	r3, r2
 800528a:	e7e7      	b.n	800525c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800528c:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <HAL_NVIC_SetPriority+0x78>)
 800528e:	f000 000f 	and.w	r0, r0, #15
 8005292:	0109      	lsls	r1, r1, #4
 8005294:	4403      	add	r3, r0
 8005296:	b2c9      	uxtb	r1, r1
 8005298:	7619      	strb	r1, [r3, #24]
 800529a:	f85d fb04 	ldr.w	pc, [sp], #4
 800529e:	bf00      	nop
 80052a0:	e000ed00 	.word	0xe000ed00
 80052a4:	e000ecfc 	.word	0xe000ecfc

080052a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80052a8:	2800      	cmp	r0, #0
 80052aa:	db08      	blt.n	80052be <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ac:	4a04      	ldr	r2, [pc, #16]	; (80052c0 <HAL_NVIC_EnableIRQ+0x18>)
 80052ae:	0941      	lsrs	r1, r0, #5
 80052b0:	2301      	movs	r3, #1
 80052b2:	f000 001f 	and.w	r0, r0, #31
 80052b6:	fa03 f000 	lsl.w	r0, r3, r0
 80052ba:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80052be:	4770      	bx	lr
 80052c0:	e000e100 	.word	0xe000e100

080052c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052c4:	3801      	subs	r0, #1
 80052c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80052ca:	d210      	bcs.n	80052ee <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052cc:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d2:	4c08      	ldr	r4, [pc, #32]	; (80052f4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052d4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d6:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80052da:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052de:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052e0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052e2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052e4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80052e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052ea:	6119      	str	r1, [r3, #16]
 80052ec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80052ee:	2001      	movs	r0, #1
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	e000ed00 	.word	0xe000ed00

080052f8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d078      	beq.n	80053ee <HAL_DMA_Init+0xf6>
{
 80052fc:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80052fe:	4b3d      	ldr	r3, [pc, #244]	; (80053f4 <HAL_DMA_Init+0xfc>)
 8005300:	6804      	ldr	r4, [r0, #0]
 8005302:	429c      	cmp	r4, r3
 8005304:	d95f      	bls.n	80053c6 <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005306:	4a3c      	ldr	r2, [pc, #240]	; (80053f8 <HAL_DMA_Init+0x100>)
 8005308:	4b3c      	ldr	r3, [pc, #240]	; (80053fc <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 800530a:	493d      	ldr	r1, [pc, #244]	; (8005400 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800530c:	4422      	add	r2, r4
 800530e:	fba3 3202 	umull	r3, r2, r3, r2
 8005312:	0912      	lsrs	r2, r2, #4
 8005314:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005316:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005318:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 800531a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 800531e:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005320:	69c6      	ldr	r6, [r0, #28]
 8005322:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005326:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 8005328:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800532a:	430b      	orrs	r3, r1
 800532c:	6941      	ldr	r1, [r0, #20]
 800532e:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005330:	6981      	ldr	r1, [r0, #24]
 8005332:	430b      	orrs	r3, r1
 8005334:	4333      	orrs	r3, r6
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005336:	fa5f fc84 	uxtb.w	ip, r4
 800533a:	4e30      	ldr	r6, [pc, #192]	; (80053fc <HAL_DMA_Init+0x104>)
  tmp = hdma->Instance->CCR;
 800533c:	6821      	ldr	r1, [r4, #0]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800533e:	f1ac 0c08 	sub.w	ip, ip, #8
 8005342:	fba6 6c0c 	umull	r6, ip, r6, ip
          hdma->Init.Mode                | hdma->Init.Priority;
 8005346:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005348:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800534c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8005350:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8005352:	430b      	orrs	r3, r1
  hdma->Instance->CCR = tmp;
 8005354:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005356:	4e2b      	ldr	r6, [pc, #172]	; (8005404 <HAL_DMA_Init+0x10c>)
 8005358:	4b26      	ldr	r3, [pc, #152]	; (80053f4 <HAL_DMA_Init+0xfc>)
 800535a:	492b      	ldr	r1, [pc, #172]	; (8005408 <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800535c:	f3cc 1c04 	ubfx	ip, ip, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005360:	429c      	cmp	r4, r3
 8005362:	bf98      	it	ls
 8005364:	4631      	movls	r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005366:	f04f 0e01 	mov.w	lr, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800536a:	4c28      	ldr	r4, [pc, #160]	; (800540c <HAL_DMA_Init+0x114>)
 800536c:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800536e:	fa0e f30c 	lsl.w	r3, lr, ip
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005372:	1854      	adds	r4, r2, r1
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005374:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005378:	6503      	str	r3, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800537a:	6484      	str	r4, [r0, #72]	; 0x48
 800537c:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005380:	d02a      	beq.n	80053d8 <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005382:	6845      	ldr	r5, [r0, #4]
 8005384:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005386:	3d01      	subs	r5, #1
 8005388:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800538a:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800538e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005392:	d827      	bhi.n	80053e4 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005394:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005396:	491f      	ldr	r1, [pc, #124]	; (8005414 <HAL_DMA_Init+0x11c>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005398:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800539a:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800539c:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800539e:	f004 041f 	and.w	r4, r4, #31
 80053a2:	fa0e f404 	lsl.w	r4, lr, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80053a6:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053a8:	e9c0 3115 	strd	r3, r1, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80053ac:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80053ae:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053b0:	4b19      	ldr	r3, [pc, #100]	; (8005418 <HAL_DMA_Init+0x120>)
 80053b2:	645c      	str	r4, [r3, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053b4:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80053b6:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053b8:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80053ba:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80053be:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  return HAL_OK;
 80053c2:	4618      	mov	r0, r3
}
 80053c4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80053c6:	4a15      	ldr	r2, [pc, #84]	; (800541c <HAL_DMA_Init+0x124>)
 80053c8:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 80053ca:	4915      	ldr	r1, [pc, #84]	; (8005420 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80053cc:	4422      	add	r2, r4
 80053ce:	fba3 3202 	umull	r3, r2, r3, r2
 80053d2:	0912      	lsrs	r2, r2, #4
 80053d4:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 80053d6:	e79e      	b.n	8005316 <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053d8:	2400      	movs	r4, #0
 80053da:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053dc:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053e0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 80053e4:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80053e6:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80053ea:	65c3      	str	r3, [r0, #92]	; 0x5c
 80053ec:	e7e2      	b.n	80053b4 <HAL_DMA_Init+0xbc>
    return HAL_ERROR;
 80053ee:	2001      	movs	r0, #1
}
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40020407 	.word	0x40020407
 80053f8:	bffdfbf8 	.word	0xbffdfbf8
 80053fc:	cccccccd 	.word	0xcccccccd
 8005400:	40020400 	.word	0x40020400
 8005404:	40020800 	.word	0x40020800
 8005408:	40020820 	.word	0x40020820
 800540c:	40020880 	.word	0x40020880
 8005410:	1000823f 	.word	0x1000823f
 8005414:	40020940 	.word	0x40020940
 8005418:	40020900 	.word	0x40020900
 800541c:	bffdfff8 	.word	0xbffdfff8
 8005420:	40020000 	.word	0x40020000

08005424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005428:	680c      	ldr	r4, [r1, #0]
{
 800542a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 800542c:	2c00      	cmp	r4, #0
 800542e:	f000 8083 	beq.w	8005538 <HAL_GPIO_Init+0x114>
 8005432:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005436:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8005610 <HAL_GPIO_Init+0x1ec>
  uint32_t position = 0x00U;
 800543a:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800543c:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005440:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005442:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 8005446:	ea15 0804 	ands.w	r8, r5, r4
 800544a:	d06f      	beq.n	800552c <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800544c:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8005450:	f007 0203 	and.w	r2, r7, #3
 8005454:	1e51      	subs	r1, r2, #1
 8005456:	2901      	cmp	r1, #1
 8005458:	d971      	bls.n	800553e <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800545a:	2a03      	cmp	r2, #3
 800545c:	f040 80b0 	bne.w	80055c0 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005460:	fa02 f20c 	lsl.w	r2, r2, ip
 8005464:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8005466:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005468:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800546a:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800546c:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8005470:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005472:	d05b      	beq.n	800552c <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005474:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8005478:	f042 0201 	orr.w	r2, r2, #1
 800547c:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 8005480:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8005484:	f002 0201 	and.w	r2, r2, #1
 8005488:	9203      	str	r2, [sp, #12]
 800548a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800548c:	f023 0203 	bic.w	r2, r3, #3
 8005490:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005494:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005498:	f003 0503 	and.w	r5, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800549c:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800549e:	00ad      	lsls	r5, r5, #2
 80054a0:	260f      	movs	r6, #15
 80054a2:	fa06 fe05 	lsl.w	lr, r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80054a6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80054aa:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80054ae:	d019      	beq.n	80054e4 <HAL_GPIO_Init+0xc0>
 80054b0:	4e51      	ldr	r6, [pc, #324]	; (80055f8 <HAL_GPIO_Init+0x1d4>)
 80054b2:	42b0      	cmp	r0, r6
 80054b4:	f000 808f 	beq.w	80055d6 <HAL_GPIO_Init+0x1b2>
 80054b8:	4e50      	ldr	r6, [pc, #320]	; (80055fc <HAL_GPIO_Init+0x1d8>)
 80054ba:	42b0      	cmp	r0, r6
 80054bc:	f000 808f 	beq.w	80055de <HAL_GPIO_Init+0x1ba>
 80054c0:	4e4f      	ldr	r6, [pc, #316]	; (8005600 <HAL_GPIO_Init+0x1dc>)
 80054c2:	42b0      	cmp	r0, r6
 80054c4:	f000 8081 	beq.w	80055ca <HAL_GPIO_Init+0x1a6>
 80054c8:	4e4e      	ldr	r6, [pc, #312]	; (8005604 <HAL_GPIO_Init+0x1e0>)
 80054ca:	42b0      	cmp	r0, r6
 80054cc:	f000 808d 	beq.w	80055ea <HAL_GPIO_Init+0x1c6>
 80054d0:	4e4d      	ldr	r6, [pc, #308]	; (8005608 <HAL_GPIO_Init+0x1e4>)
 80054d2:	42b0      	cmp	r0, r6
 80054d4:	bf0c      	ite	eq
 80054d6:	f04f 0e05 	moveq.w	lr, #5
 80054da:	f04f 0e06 	movne.w	lr, #6
 80054de:	fa0e f505 	lsl.w	r5, lr, r5
 80054e2:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054e4:	6091      	str	r1, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054e6:	4a49      	ldr	r2, [pc, #292]	; (800560c <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80054e8:	4948      	ldr	r1, [pc, #288]	; (800560c <HAL_GPIO_Init+0x1e8>)
        temp = EXTI->RTSR1;
 80054ea:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 80054ec:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054f0:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 80054f2:	bf54      	ite	pl
 80054f4:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80054f6:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 80054fa:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 80054fc:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054fe:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8005500:	4942      	ldr	r1, [pc, #264]	; (800560c <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8005502:	bf54      	ite	pl
 8005504:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8005506:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 800550a:	60ca      	str	r2, [r1, #12]

        temp = EXTI->EMR1;
 800550c:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 800550e:	4a3f      	ldr	r2, [pc, #252]	; (800560c <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005510:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 8005512:	bf54      	ite	pl
 8005514:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8005516:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 800551a:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800551c:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800551e:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8005520:	493a      	ldr	r1, [pc, #232]	; (800560c <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8005522:	bf54      	ite	pl
 8005524:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8005526:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 800552a:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 800552c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800552e:	fa34 f203 	lsrs.w	r2, r4, r3
 8005532:	f10c 0c02 	add.w	ip, ip, #2
 8005536:	d184      	bne.n	8005442 <HAL_GPIO_Init+0x1e>
  }
}
 8005538:	b005      	add	sp, #20
 800553a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800553e:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005540:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005544:	f04f 0e03 	mov.w	lr, #3
 8005548:	fa0e fe0c 	lsl.w	lr, lr, ip
 800554c:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005550:	fa06 f60c 	lsl.w	r6, r6, ip
 8005554:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8005556:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005558:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 800555c:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005560:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005564:	f3c7 1500 	ubfx	r5, r7, #4, #1
 8005568:	409d      	lsls	r5, r3
 800556a:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 800556e:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8005570:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005572:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005576:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800557a:	fa05 f50c 	lsl.w	r5, r5, ip
 800557e:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005582:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8005584:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005586:	fa02 f20c 	lsl.w	r2, r2, ip
 800558a:	f47f af6c 	bne.w	8005466 <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 800558e:	08dd      	lsrs	r5, r3, #3
 8005590:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8005594:	9501      	str	r5, [sp, #4]
 8005596:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005598:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 800559c:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800559e:	f003 0e07 	and.w	lr, r3, #7
 80055a2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80055a6:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055a8:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055ac:	fa06 fe0e 	lsl.w	lr, r6, lr
 80055b0:	9e00      	ldr	r6, [sp, #0]
 80055b2:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80055b6:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055b8:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80055bc:	6235      	str	r5, [r6, #32]
 80055be:	e752      	b.n	8005466 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80055c0:	2103      	movs	r1, #3
 80055c2:	fa01 f10c 	lsl.w	r1, r1, ip
 80055c6:	43c9      	mvns	r1, r1
 80055c8:	e7d2      	b.n	8005570 <HAL_GPIO_Init+0x14c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055ca:	f04f 0e03 	mov.w	lr, #3
 80055ce:	fa0e f505 	lsl.w	r5, lr, r5
 80055d2:	4329      	orrs	r1, r5
 80055d4:	e786      	b.n	80054e4 <HAL_GPIO_Init+0xc0>
 80055d6:	fa0b f505 	lsl.w	r5, fp, r5
 80055da:	4329      	orrs	r1, r5
 80055dc:	e782      	b.n	80054e4 <HAL_GPIO_Init+0xc0>
 80055de:	f04f 0e02 	mov.w	lr, #2
 80055e2:	fa0e f505 	lsl.w	r5, lr, r5
 80055e6:	4329      	orrs	r1, r5
 80055e8:	e77c      	b.n	80054e4 <HAL_GPIO_Init+0xc0>
 80055ea:	f04f 0e04 	mov.w	lr, #4
 80055ee:	fa0e f505 	lsl.w	r5, lr, r5
 80055f2:	4329      	orrs	r1, r5
 80055f4:	e776      	b.n	80054e4 <HAL_GPIO_Init+0xc0>
 80055f6:	bf00      	nop
 80055f8:	48000400 	.word	0x48000400
 80055fc:	48000800 	.word	0x48000800
 8005600:	48000c00 	.word	0x48000c00
 8005604:	48001000 	.word	0x48001000
 8005608:	48001400 	.word	0x48001400
 800560c:	40010400 	.word	0x40010400
 8005610:	40021000 	.word	0x40021000

08005614 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005614:	b410      	push	{r4}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005616:	4a3b      	ldr	r2, [pc, #236]	; (8005704 <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005618:	b970      	cbnz	r0, 8005638 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800561a:	6813      	ldr	r3, [r2, #0]
 800561c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005624:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005628:	d023      	beq.n	8005672 <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800562a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 800562e:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005632:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8005636:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005638:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800563c:	d009      	beq.n	8005652 <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800563e:	6813      	ldr	r3, [r2, #0]
}
 8005640:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005644:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 800564c:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800564e:	6013      	str	r3, [r2, #0]
}
 8005650:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005652:	6813      	ldr	r3, [r2, #0]
 8005654:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800565c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005660:	d02f      	beq.n	80056c2 <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8005666:	2000      	movs	r0, #0
}
 8005668:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800566c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8005670:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005672:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005676:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800567a:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800567c:	4c22      	ldr	r4, [pc, #136]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800567e:	4823      	ldr	r0, [pc, #140]	; (800570c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005680:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005684:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8005688:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	2132      	movs	r1, #50	; 0x32
 800568e:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005692:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005694:	fba0 0303 	umull	r0, r3, r0, r3
 8005698:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800569a:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800569c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056a0:	d506      	bpl.n	80056b0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80056a2:	e000      	b.n	80056a6 <HAL_PWREx_ControlVoltageScaling+0x92>
 80056a4:	b123      	cbz	r3, 80056b0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80056a6:	6951      	ldr	r1, [r2, #20]
 80056a8:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80056aa:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ae:	d4f9      	bmi.n	80056a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056b0:	4b14      	ldr	r3, [pc, #80]	; (8005704 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 80056b6:	bf54      	ite	pl
 80056b8:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 80056ba:	2003      	movmi	r0, #3
}
 80056bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056c0:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056ca:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056cc:	4c0e      	ldr	r4, [pc, #56]	; (8005708 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80056ce:	480f      	ldr	r0, [pc, #60]	; (800570c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056d0:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80056d4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80056d8:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	2132      	movs	r1, #50	; 0x32
 80056de:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056e2:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056e4:	fba0 0303 	umull	r0, r3, r0, r3
 80056e8:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056ea:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056ec:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056f0:	d5de      	bpl.n	80056b0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80056f2:	e001      	b.n	80056f8 <HAL_PWREx_ControlVoltageScaling+0xe4>
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d0db      	beq.n	80056b0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80056f8:	6951      	ldr	r1, [r2, #20]
 80056fa:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80056fc:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005700:	d5d6      	bpl.n	80056b0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8005702:	e7f7      	b.n	80056f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
 8005704:	40007000 	.word	0x40007000
 8005708:	20000428 	.word	0x20000428
 800570c:	431bde83 	.word	0x431bde83

08005710 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005710:	4a02      	ldr	r2, [pc, #8]	; (800571c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8005712:	6893      	ldr	r3, [r2, #8]
 8005714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005718:	6093      	str	r3, [r2, #8]
}
 800571a:	4770      	bx	lr
 800571c:	40007000 	.word	0x40007000

08005720 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005720:	2800      	cmp	r0, #0
 8005722:	f000 81c3 	beq.w	8005aac <HAL_RCC_OscConfig+0x38c>
{
 8005726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800572a:	6803      	ldr	r3, [r0, #0]
 800572c:	07d9      	lsls	r1, r3, #31
{
 800572e:	b082      	sub	sp, #8
 8005730:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005732:	d52d      	bpl.n	8005790 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005734:	49a6      	ldr	r1, [pc, #664]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
 8005736:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005738:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800573a:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800573e:	2a0c      	cmp	r2, #12
 8005740:	f000 810a 	beq.w	8005958 <HAL_RCC_OscConfig+0x238>
 8005744:	2a08      	cmp	r2, #8
 8005746:	f000 810c 	beq.w	8005962 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800574a:	6863      	ldr	r3, [r4, #4]
 800574c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005750:	f000 8133 	beq.w	80059ba <HAL_RCC_OscConfig+0x29a>
 8005754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005758:	f000 819b 	beq.w	8005a92 <HAL_RCC_OscConfig+0x372>
 800575c:	4d9c      	ldr	r5, [pc, #624]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
 800575e:	682a      	ldr	r2, [r5, #0]
 8005760:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005764:	602a      	str	r2, [r5, #0]
 8005766:	682a      	ldr	r2, [r5, #0]
 8005768:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800576c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800576e:	2b00      	cmp	r3, #0
 8005770:	f040 8128 	bne.w	80059c4 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005774:	f7fe fe58 	bl	8004428 <HAL_GetTick>
 8005778:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800577a:	e005      	b.n	8005788 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800577c:	f7fe fe54 	bl	8004428 <HAL_GetTick>
 8005780:	1b80      	subs	r0, r0, r6
 8005782:	2864      	cmp	r0, #100	; 0x64
 8005784:	f200 8142 	bhi.w	8005a0c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005788:	682b      	ldr	r3, [r5, #0]
 800578a:	039f      	lsls	r7, r3, #14
 800578c:	d4f6      	bmi.n	800577c <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	079e      	lsls	r6, r3, #30
 8005792:	d528      	bpl.n	80057e6 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005794:	4a8e      	ldr	r2, [pc, #568]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
 8005796:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005798:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800579a:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800579e:	2b0c      	cmp	r3, #12
 80057a0:	f000 80ec 	beq.w	800597c <HAL_RCC_OscConfig+0x25c>
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	f000 80ee 	beq.w	8005986 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057aa:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057ac:	4d88      	ldr	r5, [pc, #544]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 811d 	beq.w	80059ee <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 80057b4:	682b      	ldr	r3, [r5, #0]
 80057b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ba:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057bc:	f7fe fe34 	bl	8004428 <HAL_GetTick>
 80057c0:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057c2:	e005      	b.n	80057d0 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057c4:	f7fe fe30 	bl	8004428 <HAL_GetTick>
 80057c8:	1b80      	subs	r0, r0, r6
 80057ca:	2802      	cmp	r0, #2
 80057cc:	f200 811e 	bhi.w	8005a0c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	0558      	lsls	r0, r3, #21
 80057d4:	d5f6      	bpl.n	80057c4 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057d6:	686b      	ldr	r3, [r5, #4]
 80057d8:	6922      	ldr	r2, [r4, #16]
 80057da:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80057de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80057e2:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	071a      	lsls	r2, r3, #28
 80057e8:	d519      	bpl.n	800581e <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057ea:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ec:	4d78      	ldr	r5, [pc, #480]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f000 809e 	beq.w	8005930 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 80057f4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005800:	f7fe fe12 	bl	8004428 <HAL_GetTick>
 8005804:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005806:	e005      	b.n	8005814 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005808:	f7fe fe0e 	bl	8004428 <HAL_GetTick>
 800580c:	1b80      	subs	r0, r0, r6
 800580e:	2802      	cmp	r0, #2
 8005810:	f200 80fc 	bhi.w	8005a0c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005814:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005818:	079f      	lsls	r7, r3, #30
 800581a:	d5f5      	bpl.n	8005808 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	0759      	lsls	r1, r3, #29
 8005820:	d541      	bpl.n	80058a6 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005822:	4b6b      	ldr	r3, [pc, #428]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
 8005824:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005826:	00d2      	lsls	r2, r2, #3
 8005828:	f100 80f4 	bmi.w	8005a14 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800582c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800582e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005832:	659a      	str	r2, [r3, #88]	; 0x58
 8005834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800583e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005840:	4e64      	ldr	r6, [pc, #400]	; (80059d4 <HAL_RCC_OscConfig+0x2b4>)
 8005842:	6833      	ldr	r3, [r6, #0]
 8005844:	05df      	lsls	r7, r3, #23
 8005846:	f140 8113 	bpl.w	8005a70 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800584a:	68a3      	ldr	r3, [r4, #8]
 800584c:	2b01      	cmp	r3, #1
 800584e:	f000 80e3 	beq.w	8005a18 <HAL_RCC_OscConfig+0x2f8>
 8005852:	2b05      	cmp	r3, #5
 8005854:	f000 8169 	beq.w	8005b2a <HAL_RCC_OscConfig+0x40a>
 8005858:	4e5d      	ldr	r6, [pc, #372]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
 800585a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800585e:	f022 0201 	bic.w	r2, r2, #1
 8005862:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8005866:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800586a:	f022 0204 	bic.w	r2, r2, #4
 800586e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005872:	2b00      	cmp	r3, #0
 8005874:	f040 80d7 	bne.w	8005a26 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005878:	f7fe fdd6 	bl	8004428 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800587c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005880:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005882:	e005      	b.n	8005890 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005884:	f7fe fdd0 	bl	8004428 <HAL_GetTick>
 8005888:	1bc0      	subs	r0, r0, r7
 800588a:	4540      	cmp	r0, r8
 800588c:	f200 80be 	bhi.w	8005a0c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005890:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8005894:	079a      	lsls	r2, r3, #30
 8005896:	d4f5      	bmi.n	8005884 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005898:	b125      	cbz	r5, 80058a4 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800589a:	4a4d      	ldr	r2, [pc, #308]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
 800589c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800589e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	069b      	lsls	r3, r3, #26
 80058a8:	d518      	bpl.n	80058dc <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058aa:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058ac:	4d48      	ldr	r5, [pc, #288]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 80ca 	beq.w	8005a48 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 80058b4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c0:	f7fe fdb2 	bl	8004428 <HAL_GetTick>
 80058c4:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058c6:	e005      	b.n	80058d4 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058c8:	f7fe fdae 	bl	8004428 <HAL_GetTick>
 80058cc:	1b80      	subs	r0, r0, r6
 80058ce:	2802      	cmp	r0, #2
 80058d0:	f200 809c 	bhi.w	8005a0c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058d4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80058d8:	079f      	lsls	r7, r3, #30
 80058da:	d5f5      	bpl.n	80058c8 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058dc:	69e0      	ldr	r0, [r4, #28]
 80058de:	b318      	cbz	r0, 8005928 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058e0:	4d3b      	ldr	r5, [pc, #236]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
 80058e2:	68ab      	ldr	r3, [r5, #8]
 80058e4:	f003 030c 	and.w	r3, r3, #12
 80058e8:	2b0c      	cmp	r3, #12
 80058ea:	f000 812c 	beq.w	8005b46 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ee:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058f0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80058f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058f6:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058f8:	f000 80da 	beq.w	8005ab0 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80058fc:	68eb      	ldr	r3, [r5, #12]
 80058fe:	f023 0303 	bic.w	r3, r3, #3
 8005902:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005904:	68eb      	ldr	r3, [r5, #12]
 8005906:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800590a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800590e:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005910:	f7fe fd8a 	bl	8004428 <HAL_GetTick>
 8005914:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005916:	e004      	b.n	8005922 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005918:	f7fe fd86 	bl	8004428 <HAL_GetTick>
 800591c:	1b00      	subs	r0, r0, r4
 800591e:	2802      	cmp	r0, #2
 8005920:	d874      	bhi.n	8005a0c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005922:	682b      	ldr	r3, [r5, #0]
 8005924:	019b      	lsls	r3, r3, #6
 8005926:	d4f7      	bmi.n	8005918 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8005928:	2000      	movs	r0, #0
}
 800592a:	b002      	add	sp, #8
 800592c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8005930:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005934:	f023 0301 	bic.w	r3, r3, #1
 8005938:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800593c:	f7fe fd74 	bl	8004428 <HAL_GetTick>
 8005940:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005942:	e004      	b.n	800594e <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005944:	f7fe fd70 	bl	8004428 <HAL_GetTick>
 8005948:	1b80      	subs	r0, r0, r6
 800594a:	2802      	cmp	r0, #2
 800594c:	d85e      	bhi.n	8005a0c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800594e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8005952:	0798      	lsls	r0, r3, #30
 8005954:	d4f6      	bmi.n	8005944 <HAL_RCC_OscConfig+0x224>
 8005956:	e761      	b.n	800581c <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005958:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800595c:	2903      	cmp	r1, #3
 800595e:	f47f aef4 	bne.w	800574a <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005962:	4a1b      	ldr	r2, [pc, #108]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
 8005964:	6812      	ldr	r2, [r2, #0]
 8005966:	0392      	lsls	r2, r2, #14
 8005968:	f57f af12 	bpl.w	8005790 <HAL_RCC_OscConfig+0x70>
 800596c:	6862      	ldr	r2, [r4, #4]
 800596e:	2a00      	cmp	r2, #0
 8005970:	f47f af0e 	bne.w	8005790 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8005974:	2001      	movs	r0, #1
}
 8005976:	b002      	add	sp, #8
 8005978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800597c:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005980:	2a02      	cmp	r2, #2
 8005982:	f47f af12 	bne.w	80057aa <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005986:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	055d      	lsls	r5, r3, #21
 800598c:	d502      	bpl.n	8005994 <HAL_RCC_OscConfig+0x274>
 800598e:	68e3      	ldr	r3, [r4, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d0ef      	beq.n	8005974 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005994:	4a0e      	ldr	r2, [pc, #56]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
 8005996:	6920      	ldr	r0, [r4, #16]
 8005998:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800599a:	490f      	ldr	r1, [pc, #60]	; (80059d8 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800599c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80059a0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80059a4:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059a6:	6808      	ldr	r0, [r1, #0]
 80059a8:	f7fe fb60 	bl	800406c <HAL_InitTick>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d1e1      	bne.n	8005974 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	071a      	lsls	r2, r3, #28
 80059b4:	f57f af33 	bpl.w	800581e <HAL_RCC_OscConfig+0xfe>
 80059b8:	e717      	b.n	80057ea <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059ba:	4a05      	ldr	r2, [pc, #20]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
 80059bc:	6813      	ldr	r3, [r2, #0]
 80059be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80059c4:	f7fe fd30 	bl	8004428 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059c8:	4e01      	ldr	r6, [pc, #4]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80059ca:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059cc:	e00b      	b.n	80059e6 <HAL_RCC_OscConfig+0x2c6>
 80059ce:	bf00      	nop
 80059d0:	40021000 	.word	0x40021000
 80059d4:	40007000 	.word	0x40007000
 80059d8:	20000430 	.word	0x20000430
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059dc:	f7fe fd24 	bl	8004428 <HAL_GetTick>
 80059e0:	1b40      	subs	r0, r0, r5
 80059e2:	2864      	cmp	r0, #100	; 0x64
 80059e4:	d812      	bhi.n	8005a0c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059e6:	6833      	ldr	r3, [r6, #0]
 80059e8:	039b      	lsls	r3, r3, #14
 80059ea:	d5f7      	bpl.n	80059dc <HAL_RCC_OscConfig+0x2bc>
 80059ec:	e6cf      	b.n	800578e <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 80059ee:	682b      	ldr	r3, [r5, #0]
 80059f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80059f6:	f7fe fd17 	bl	8004428 <HAL_GetTick>
 80059fa:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059fc:	682b      	ldr	r3, [r5, #0]
 80059fe:	0559      	lsls	r1, r3, #21
 8005a00:	d5d6      	bpl.n	80059b0 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a02:	f7fe fd11 	bl	8004428 <HAL_GetTick>
 8005a06:	1b80      	subs	r0, r0, r6
 8005a08:	2802      	cmp	r0, #2
 8005a0a:	d9f7      	bls.n	80059fc <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8005a0c:	2003      	movs	r0, #3
}
 8005a0e:	b002      	add	sp, #8
 8005a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8005a14:	2500      	movs	r5, #0
 8005a16:	e713      	b.n	8005840 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a18:	4a65      	ldr	r2, [pc, #404]	; (8005bb0 <HAL_RCC_OscConfig+0x490>)
 8005a1a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a1e:	f043 0301 	orr.w	r3, r3, #1
 8005a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005a26:	f7fe fcff 	bl	8004428 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a2a:	4f61      	ldr	r7, [pc, #388]	; (8005bb0 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8005a2c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a2e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a32:	e004      	b.n	8005a3e <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a34:	f7fe fcf8 	bl	8004428 <HAL_GetTick>
 8005a38:	1b80      	subs	r0, r0, r6
 8005a3a:	4540      	cmp	r0, r8
 8005a3c:	d8e6      	bhi.n	8005a0c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a42:	0799      	lsls	r1, r3, #30
 8005a44:	d5f6      	bpl.n	8005a34 <HAL_RCC_OscConfig+0x314>
 8005a46:	e727      	b.n	8005898 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8005a48:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005a4c:	f023 0301 	bic.w	r3, r3, #1
 8005a50:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005a54:	f7fe fce8 	bl	8004428 <HAL_GetTick>
 8005a58:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a5a:	e004      	b.n	8005a66 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a5c:	f7fe fce4 	bl	8004428 <HAL_GetTick>
 8005a60:	1b80      	subs	r0, r0, r6
 8005a62:	2802      	cmp	r0, #2
 8005a64:	d8d2      	bhi.n	8005a0c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a66:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005a6a:	0798      	lsls	r0, r3, #30
 8005a6c:	d4f6      	bmi.n	8005a5c <HAL_RCC_OscConfig+0x33c>
 8005a6e:	e735      	b.n	80058dc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a70:	6833      	ldr	r3, [r6, #0]
 8005a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a76:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005a78:	f7fe fcd6 	bl	8004428 <HAL_GetTick>
 8005a7c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a7e:	6833      	ldr	r3, [r6, #0]
 8005a80:	05d8      	lsls	r0, r3, #23
 8005a82:	f53f aee2 	bmi.w	800584a <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a86:	f7fe fccf 	bl	8004428 <HAL_GetTick>
 8005a8a:	1bc0      	subs	r0, r0, r7
 8005a8c:	2802      	cmp	r0, #2
 8005a8e:	d9f6      	bls.n	8005a7e <HAL_RCC_OscConfig+0x35e>
 8005a90:	e7bc      	b.n	8005a0c <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a96:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005aa8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005aaa:	e78b      	b.n	80059c4 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8005aac:	2001      	movs	r0, #1
}
 8005aae:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8005ab0:	f7fe fcba 	bl	8004428 <HAL_GetTick>
 8005ab4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ab6:	e004      	b.n	8005ac2 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab8:	f7fe fcb6 	bl	8004428 <HAL_GetTick>
 8005abc:	1b80      	subs	r0, r0, r6
 8005abe:	2802      	cmp	r0, #2
 8005ac0:	d8a4      	bhi.n	8005a0c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ac2:	682b      	ldr	r3, [r5, #0]
 8005ac4:	0199      	lsls	r1, r3, #6
 8005ac6:	d4f7      	bmi.n	8005ab8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ac8:	68e9      	ldr	r1, [r5, #12]
 8005aca:	4b3a      	ldr	r3, [pc, #232]	; (8005bb4 <HAL_RCC_OscConfig+0x494>)
 8005acc:	6a22      	ldr	r2, [r4, #32]
 8005ace:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ad0:	4e37      	ldr	r6, [pc, #220]	; (8005bb0 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ad2:	400b      	ands	r3, r1
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8005ada:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005ade:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8005ae2:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8005ae6:	3801      	subs	r0, #1
 8005ae8:	0849      	lsrs	r1, r1, #1
 8005aea:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005aee:	3901      	subs	r1, #1
 8005af0:	0852      	lsrs	r2, r2, #1
 8005af2:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005af6:	3a01      	subs	r2, #1
 8005af8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005afc:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005afe:	682b      	ldr	r3, [r5, #0]
 8005b00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b04:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b06:	68eb      	ldr	r3, [r5, #12]
 8005b08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b0c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005b0e:	f7fe fc8b 	bl	8004428 <HAL_GetTick>
 8005b12:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b14:	e005      	b.n	8005b22 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b16:	f7fe fc87 	bl	8004428 <HAL_GetTick>
 8005b1a:	1b00      	subs	r0, r0, r4
 8005b1c:	2802      	cmp	r0, #2
 8005b1e:	f63f af75 	bhi.w	8005a0c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b22:	6833      	ldr	r3, [r6, #0]
 8005b24:	019a      	lsls	r2, r3, #6
 8005b26:	d5f6      	bpl.n	8005b16 <HAL_RCC_OscConfig+0x3f6>
 8005b28:	e6fe      	b.n	8005928 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b2a:	4b21      	ldr	r3, [pc, #132]	; (8005bb0 <HAL_RCC_OscConfig+0x490>)
 8005b2c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005b30:	f042 0204 	orr.w	r2, r2, #4
 8005b34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005b38:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005b3c:	f042 0201 	orr.w	r2, r2, #1
 8005b40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b44:	e76f      	b.n	8005a26 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b46:	2801      	cmp	r0, #1
 8005b48:	f43f aeef 	beq.w	800592a <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8005b4c:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4e:	6a22      	ldr	r2, [r4, #32]
 8005b50:	f003 0103 	and.w	r1, r3, #3
 8005b54:	4291      	cmp	r1, r2
 8005b56:	f47f af0d 	bne.w	8005974 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b5a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005b5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b60:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b62:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005b66:	f47f af05 	bne.w	8005974 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b6a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005b6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b70:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005b74:	f47f aefe 	bne.w	8005974 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b78:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005b7a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b7e:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005b82:	f47f aef7 	bne.w	8005974 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005b88:	0852      	lsrs	r2, r2, #1
 8005b8a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8005b8e:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b90:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005b94:	f47f aeee 	bne.w	8005974 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b98:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005b9a:	0852      	lsrs	r2, r2, #1
 8005b9c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8005ba0:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ba2:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 8005ba6:	bf14      	ite	ne
 8005ba8:	2001      	movne	r0, #1
 8005baa:	2000      	moveq	r0, #0
 8005bac:	e6bd      	b.n	800592a <HAL_RCC_OscConfig+0x20a>
 8005bae:	bf00      	nop
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	019f800c 	.word	0x019f800c

08005bb8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005bb8:	4b18      	ldr	r3, [pc, #96]	; (8005c1c <HAL_RCC_GetSysClockFreq+0x64>)
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	f002 020c 	and.w	r2, r2, #12
 8005bc0:	2a04      	cmp	r2, #4
 8005bc2:	d027      	beq.n	8005c14 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	f002 020c 	and.w	r2, r2, #12
 8005bca:	2a08      	cmp	r2, #8
 8005bcc:	d024      	beq.n	8005c18 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	f002 020c 	and.w	r2, r2, #12
 8005bd4:	2a0c      	cmp	r2, #12
 8005bd6:	d001      	beq.n	8005bdc <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8005bd8:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8005bda:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bdc:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bde:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005be0:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8005be4:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005be6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005bea:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bee:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bf0:	bf0c      	ite	eq
 8005bf2:	4b0b      	ldreq	r3, [pc, #44]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bf4:	4b0b      	ldrne	r3, [pc, #44]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005bf6:	fbb3 f2f2 	udiv	r2, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bfa:	4b08      	ldr	r3, [pc, #32]	; (8005c1c <HAL_RCC_GetSysClockFreq+0x64>)
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c02:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c06:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c08:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c0c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005c0e:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8005c12:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005c14:	4803      	ldr	r0, [pc, #12]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005c16:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8005c18:	4801      	ldr	r0, [pc, #4]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x68>)
 8005c1a:	4770      	bx	lr
 8005c1c:	40021000 	.word	0x40021000
 8005c20:	016e3600 	.word	0x016e3600
 8005c24:	00f42400 	.word	0x00f42400

08005c28 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	f000 80ee 	beq.w	8005e0a <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c2e:	4a7f      	ldr	r2, [pc, #508]	; (8005e2c <HAL_RCC_ClockConfig+0x204>)
{
 8005c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c34:	6813      	ldr	r3, [r2, #0]
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	428b      	cmp	r3, r1
 8005c3c:	460d      	mov	r5, r1
 8005c3e:	4604      	mov	r4, r0
 8005c40:	d20c      	bcs.n	8005c5c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c42:	6813      	ldr	r3, [r2, #0]
 8005c44:	f023 030f 	bic.w	r3, r3, #15
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c4c:	6813      	ldr	r3, [r2, #0]
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	428b      	cmp	r3, r1
 8005c54:	d002      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005c56:	2001      	movs	r0, #1
}
 8005c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	07df      	lsls	r7, r3, #31
 8005c60:	d563      	bpl.n	8005d2a <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c62:	6862      	ldr	r2, [r4, #4]
 8005c64:	2a03      	cmp	r2, #3
 8005c66:	f000 809a 	beq.w	8005d9e <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c6a:	4b71      	ldr	r3, [pc, #452]	; (8005e30 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c6c:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c6e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c70:	f000 8091 	beq.w	8005d96 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c74:	055b      	lsls	r3, r3, #21
 8005c76:	d5ee      	bpl.n	8005c56 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c78:	f7ff ff9e 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8005c7c:	4b6d      	ldr	r3, [pc, #436]	; (8005e34 <HAL_RCC_ClockConfig+0x20c>)
 8005c7e:	4298      	cmp	r0, r3
 8005c80:	f200 80c5 	bhi.w	8005e0e <HAL_RCC_ClockConfig+0x1e6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c84:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005c86:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c8a:	4e69      	ldr	r6, [pc, #420]	; (8005e30 <HAL_RCC_ClockConfig+0x208>)
 8005c8c:	68b3      	ldr	r3, [r6, #8]
 8005c8e:	f023 0303 	bic.w	r3, r3, #3
 8005c92:	431a      	orrs	r2, r3
 8005c94:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8005c96:	f7fe fbc7 	bl	8004428 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c9a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005c9e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca0:	e004      	b.n	8005cac <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca2:	f7fe fbc1 	bl	8004428 <HAL_GetTick>
 8005ca6:	1bc0      	subs	r0, r0, r7
 8005ca8:	4540      	cmp	r0, r8
 8005caa:	d871      	bhi.n	8005d90 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cac:	68b3      	ldr	r3, [r6, #8]
 8005cae:	6862      	ldr	r2, [r4, #4]
 8005cb0:	f003 030c 	and.w	r3, r3, #12
 8005cb4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005cb8:	d1f3      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	079f      	lsls	r7, r3, #30
 8005cbe:	d436      	bmi.n	8005d2e <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8005cc0:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8005cc4:	d103      	bne.n	8005cce <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005cc6:	68b3      	ldr	r3, [r6, #8]
 8005cc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ccc:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cce:	4e57      	ldr	r6, [pc, #348]	; (8005e2c <HAL_RCC_ClockConfig+0x204>)
 8005cd0:	6833      	ldr	r3, [r6, #0]
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	42ab      	cmp	r3, r5
 8005cd8:	d846      	bhi.n	8005d68 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	075a      	lsls	r2, r3, #29
 8005cde:	d506      	bpl.n	8005cee <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ce0:	4953      	ldr	r1, [pc, #332]	; (8005e30 <HAL_RCC_ClockConfig+0x208>)
 8005ce2:	68e0      	ldr	r0, [r4, #12]
 8005ce4:	688a      	ldr	r2, [r1, #8]
 8005ce6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cea:	4302      	orrs	r2, r0
 8005cec:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cee:	071b      	lsls	r3, r3, #28
 8005cf0:	d507      	bpl.n	8005d02 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cf2:	4a4f      	ldr	r2, [pc, #316]	; (8005e30 <HAL_RCC_ClockConfig+0x208>)
 8005cf4:	6921      	ldr	r1, [r4, #16]
 8005cf6:	6893      	ldr	r3, [r2, #8]
 8005cf8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005cfc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005d00:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d02:	f7ff ff59 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
 8005d06:	4a4a      	ldr	r2, [pc, #296]	; (8005e30 <HAL_RCC_ClockConfig+0x208>)
 8005d08:	4c4b      	ldr	r4, [pc, #300]	; (8005e38 <HAL_RCC_ClockConfig+0x210>)
 8005d0a:	6892      	ldr	r2, [r2, #8]
 8005d0c:	494b      	ldr	r1, [pc, #300]	; (8005e3c <HAL_RCC_ClockConfig+0x214>)
 8005d0e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005d12:	4603      	mov	r3, r0
 8005d14:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8005d16:	484a      	ldr	r0, [pc, #296]	; (8005e40 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d18:	f002 021f 	and.w	r2, r2, #31
 8005d1c:	40d3      	lsrs	r3, r2
 8005d1e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005d20:	6800      	ldr	r0, [r0, #0]
}
 8005d22:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005d26:	f7fe b9a1 	b.w	800406c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d2a:	079e      	lsls	r6, r3, #30
 8005d2c:	d5cf      	bpl.n	8005cce <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d2e:	0758      	lsls	r0, r3, #29
 8005d30:	d504      	bpl.n	8005d3c <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d32:	493f      	ldr	r1, [pc, #252]	; (8005e30 <HAL_RCC_ClockConfig+0x208>)
 8005d34:	688a      	ldr	r2, [r1, #8]
 8005d36:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8005d3a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d3c:	0719      	lsls	r1, r3, #28
 8005d3e:	d506      	bpl.n	8005d4e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d40:	4a3b      	ldr	r2, [pc, #236]	; (8005e30 <HAL_RCC_ClockConfig+0x208>)
 8005d42:	6893      	ldr	r3, [r2, #8]
 8005d44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d48:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d4c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d4e:	4a38      	ldr	r2, [pc, #224]	; (8005e30 <HAL_RCC_ClockConfig+0x208>)
 8005d50:	68a1      	ldr	r1, [r4, #8]
 8005d52:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d54:	4e35      	ldr	r6, [pc, #212]	; (8005e2c <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d5a:	430b      	orrs	r3, r1
 8005d5c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d5e:	6833      	ldr	r3, [r6, #0]
 8005d60:	f003 030f 	and.w	r3, r3, #15
 8005d64:	42ab      	cmp	r3, r5
 8005d66:	d9b8      	bls.n	8005cda <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d68:	6833      	ldr	r3, [r6, #0]
 8005d6a:	f023 030f 	bic.w	r3, r3, #15
 8005d6e:	432b      	orrs	r3, r5
 8005d70:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005d72:	f7fe fb59 	bl	8004428 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d76:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005d7a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7c:	6833      	ldr	r3, [r6, #0]
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	42ab      	cmp	r3, r5
 8005d84:	d0a9      	beq.n	8005cda <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d86:	f7fe fb4f 	bl	8004428 <HAL_GetTick>
 8005d8a:	1bc0      	subs	r0, r0, r7
 8005d8c:	4540      	cmp	r0, r8
 8005d8e:	d9f5      	bls.n	8005d7c <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8005d90:	2003      	movs	r0, #3
}
 8005d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d96:	039a      	lsls	r2, r3, #14
 8005d98:	f53f af6e 	bmi.w	8005c78 <HAL_RCC_ClockConfig+0x50>
 8005d9c:	e75b      	b.n	8005c56 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d9e:	4924      	ldr	r1, [pc, #144]	; (8005e30 <HAL_RCC_ClockConfig+0x208>)
 8005da0:	6808      	ldr	r0, [r1, #0]
 8005da2:	0180      	lsls	r0, r0, #6
 8005da4:	f57f af57 	bpl.w	8005c56 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005da8:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005daa:	68c8      	ldr	r0, [r1, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dac:	68c9      	ldr	r1, [r1, #12]
      if(pllfreq > 80000000U)
 8005dae:	4f21      	ldr	r7, [pc, #132]	; (8005e34 <HAL_RCC_ClockConfig+0x20c>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005db0:	f006 0603 	and.w	r6, r6, #3
  switch (pllsource)
 8005db4:	2e03      	cmp	r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005db6:	f3c0 1003 	ubfx	r0, r0, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dba:	bf0c      	ite	eq
 8005dbc:	4e21      	ldreq	r6, [pc, #132]	; (8005e44 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dbe:	4e22      	ldrne	r6, [pc, #136]	; (8005e48 <HAL_RCC_ClockConfig+0x220>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dc0:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dc2:	fbb6 f0f0 	udiv	r0, r6, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005dc6:	4e1a      	ldr	r6, [pc, #104]	; (8005e30 <HAL_RCC_ClockConfig+0x208>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dc8:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8005dcc:	fb00 f101 	mul.w	r1, r0, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005dd0:	68f0      	ldr	r0, [r6, #12]
 8005dd2:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8005dda:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8005dde:	42b9      	cmp	r1, r7
 8005de0:	d920      	bls.n	8005e24 <HAL_RCC_ClockConfig+0x1fc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005de2:	68b1      	ldr	r1, [r6, #8]
 8005de4:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8005de8:	d005      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x1ce>
 8005dea:	f013 0902 	ands.w	r9, r3, #2
 8005dee:	f43f af4c 	beq.w	8005c8a <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005df2:	68a3      	ldr	r3, [r4, #8]
 8005df4:	b9b3      	cbnz	r3, 8005e24 <HAL_RCC_ClockConfig+0x1fc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005df6:	490e      	ldr	r1, [pc, #56]	; (8005e30 <HAL_RCC_ClockConfig+0x208>)
 8005df8:	688b      	ldr	r3, [r1, #8]
 8005dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e02:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e04:	f04f 0980 	mov.w	r9, #128	; 0x80
 8005e08:	e73f      	b.n	8005c8a <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8005e0a:	2001      	movs	r0, #1
}
 8005e0c:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e0e:	4a08      	ldr	r2, [pc, #32]	; (8005e30 <HAL_RCC_ClockConfig+0x208>)
 8005e10:	6893      	ldr	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005e12:	f04f 0980 	mov.w	r9, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e1a:	ea43 0309 	orr.w	r3, r3, r9
 8005e1e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e20:	6862      	ldr	r2, [r4, #4]
 8005e22:	e732      	b.n	8005c8a <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e24:	f04f 0900 	mov.w	r9, #0
 8005e28:	e72f      	b.n	8005c8a <HAL_RCC_ClockConfig+0x62>
 8005e2a:	bf00      	nop
 8005e2c:	40022000 	.word	0x40022000
 8005e30:	40021000 	.word	0x40021000
 8005e34:	04c4b400 	.word	0x04c4b400
 8005e38:	0800a3b8 	.word	0x0800a3b8
 8005e3c:	20000428 	.word	0x20000428
 8005e40:	20000430 	.word	0x20000430
 8005e44:	016e3600 	.word	0x016e3600
 8005e48:	00f42400 	.word	0x00f42400

08005e4c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8005e4c:	4b01      	ldr	r3, [pc, #4]	; (8005e54 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	20000428 	.word	0x20000428

08005e58 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005e5a:	4a06      	ldr	r2, [pc, #24]	; (8005e74 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005e5e:	4906      	ldr	r1, [pc, #24]	; (8005e78 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e60:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005e64:	6808      	ldr	r0, [r1, #0]
 8005e66:	5cd3      	ldrb	r3, [r2, r3]
 8005e68:	f003 031f 	and.w	r3, r3, #31
}
 8005e6c:	40d8      	lsrs	r0, r3
 8005e6e:	4770      	bx	lr
 8005e70:	40021000 	.word	0x40021000
 8005e74:	0800a3c8 	.word	0x0800a3c8
 8005e78:	20000428 	.word	0x20000428

08005e7c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e7c:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005e7e:	4a06      	ldr	r2, [pc, #24]	; (8005e98 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005e80:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005e82:	4906      	ldr	r1, [pc, #24]	; (8005e9c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e84:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005e88:	6808      	ldr	r0, [r1, #0]
 8005e8a:	5cd3      	ldrb	r3, [r2, r3]
 8005e8c:	f003 031f 	and.w	r3, r3, #31
}
 8005e90:	40d8      	lsrs	r0, r3
 8005e92:	4770      	bx	lr
 8005e94:	40021000 	.word	0x40021000
 8005e98:	0800a3c8 	.word	0x0800a3c8
 8005e9c:	20000428 	.word	0x20000428

08005ea0 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005ea0:	4b0e      	ldr	r3, [pc, #56]	; (8005edc <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ea2:	220f      	movs	r2, #15
 8005ea4:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	f002 0203 	and.w	r2, r2, #3
 8005eac:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005eae:	689a      	ldr	r2, [r3, #8]
 8005eb0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005eb4:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005ebc:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	08db      	lsrs	r3, r3, #3
{
 8005ec2:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005ec4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005ec8:	4c05      	ldr	r4, [pc, #20]	; (8005ee0 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005eca:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005ecc:	6823      	ldr	r3, [r4, #0]
}
 8005ece:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	600b      	str	r3, [r1, #0]
}
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	40022000 	.word	0x40022000

08005ee4 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005ee4:	4a02      	ldr	r2, [pc, #8]	; (8005ef0 <HAL_RCC_EnableCSS+0xc>)
 8005ee6:	6813      	ldr	r3, [r2, #0]
 8005ee8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eec:	6013      	str	r3, [r2, #0]
}
 8005eee:	4770      	bx	lr
 8005ef0:	40021000 	.word	0x40021000

08005ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ef8:	6803      	ldr	r3, [r0, #0]
{
 8005efa:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005efc:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8005f00:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f02:	d056      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f04:	4b9f      	ldr	r3, [pc, #636]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005f06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f08:	00d5      	lsls	r5, r2, #3
 8005f0a:	f140 810c 	bpl.w	8006126 <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8005f0e:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f10:	4d9d      	ldr	r5, [pc, #628]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005f12:	682b      	ldr	r3, [r5, #0]
 8005f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f18:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f1a:	f7fe fa85 	bl	8004428 <HAL_GetTick>
 8005f1e:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f20:	e005      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f22:	f7fe fa81 	bl	8004428 <HAL_GetTick>
 8005f26:	1b83      	subs	r3, r0, r6
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	f200 8107 	bhi.w	800613c <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f2e:	682b      	ldr	r3, [r5, #0]
 8005f30:	05d8      	lsls	r0, r3, #23
 8005f32:	d5f6      	bpl.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f34:	4d93      	ldr	r5, [pc, #588]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005f36:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f3a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005f3e:	d027      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8005f40:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d025      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f46:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f4a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f52:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f56:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f5e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f62:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f66:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8005f68:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f6c:	f140 8108 	bpl.w	8006180 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f70:	f7fe fa5a 	bl	8004428 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f74:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005f78:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f7a:	e005      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f7c:	f7fe fa54 	bl	8004428 <HAL_GetTick>
 8005f80:	1b80      	subs	r0, r0, r6
 8005f82:	4540      	cmp	r0, r8
 8005f84:	f200 80da 	bhi.w	800613c <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f88:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005f8c:	079b      	lsls	r3, r3, #30
 8005f8e:	d5f5      	bpl.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x88>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f92:	497c      	ldr	r1, [pc, #496]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005f94:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005f98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fa2:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fa4:	b127      	cbz	r7, 8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fa6:	4a77      	ldr	r2, [pc, #476]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005fa8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	07de      	lsls	r6, r3, #31
 8005fb4:	d508      	bpl.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fb6:	4973      	ldr	r1, [pc, #460]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005fb8:	6865      	ldr	r5, [r4, #4]
 8005fba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005fbe:	f022 0203 	bic.w	r2, r2, #3
 8005fc2:	432a      	orrs	r2, r5
 8005fc4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fc8:	079d      	lsls	r5, r3, #30
 8005fca:	d508      	bpl.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fcc:	496d      	ldr	r1, [pc, #436]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005fce:	68a5      	ldr	r5, [r4, #8]
 8005fd0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005fd4:	f022 020c 	bic.w	r2, r2, #12
 8005fd8:	432a      	orrs	r2, r5
 8005fda:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fde:	0759      	lsls	r1, r3, #29
 8005fe0:	d508      	bpl.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fe2:	4968      	ldr	r1, [pc, #416]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005fe4:	68e5      	ldr	r5, [r4, #12]
 8005fe6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005fea:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005fee:	432a      	orrs	r2, r5
 8005ff0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ff4:	071a      	lsls	r2, r3, #28
 8005ff6:	d508      	bpl.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ff8:	4962      	ldr	r1, [pc, #392]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005ffa:	6925      	ldr	r5, [r4, #16]
 8005ffc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006000:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006004:	432a      	orrs	r2, r5
 8006006:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800600a:	069f      	lsls	r7, r3, #26
 800600c:	d508      	bpl.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800600e:	495d      	ldr	r1, [pc, #372]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006010:	6965      	ldr	r5, [r4, #20]
 8006012:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006016:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800601a:	432a      	orrs	r2, r5
 800601c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006020:	065e      	lsls	r6, r3, #25
 8006022:	d508      	bpl.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006024:	4957      	ldr	r1, [pc, #348]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006026:	69a5      	ldr	r5, [r4, #24]
 8006028:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800602c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006030:	432a      	orrs	r2, r5
 8006032:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006036:	061d      	lsls	r5, r3, #24
 8006038:	d508      	bpl.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800603a:	4952      	ldr	r1, [pc, #328]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800603c:	69e5      	ldr	r5, [r4, #28]
 800603e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006042:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006046:	432a      	orrs	r2, r5
 8006048:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800604c:	05d9      	lsls	r1, r3, #23
 800604e:	d508      	bpl.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006050:	494c      	ldr	r1, [pc, #304]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006052:	6a25      	ldr	r5, [r4, #32]
 8006054:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006058:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800605c:	432a      	orrs	r2, r5
 800605e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006062:	059a      	lsls	r2, r3, #22
 8006064:	d508      	bpl.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006066:	4947      	ldr	r1, [pc, #284]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006068:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800606a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800606e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8006072:	432a      	orrs	r2, r5
 8006074:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006078:	055f      	lsls	r7, r3, #21
 800607a:	d50b      	bpl.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800607c:	4941      	ldr	r1, [pc, #260]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800607e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006080:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006084:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006088:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800608a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800608e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006092:	d055      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006094:	051e      	lsls	r6, r3, #20
 8006096:	d50b      	bpl.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006098:	493a      	ldr	r1, [pc, #232]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800609a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800609c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80060a0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80060a4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80060a6:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80060aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80060ae:	d04c      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060b0:	04dd      	lsls	r5, r3, #19
 80060b2:	d50b      	bpl.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060b4:	4933      	ldr	r1, [pc, #204]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80060b6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80060b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80060bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80060c0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80060c2:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80060ca:	d043      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060cc:	0499      	lsls	r1, r3, #18
 80060ce:	d50b      	bpl.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060d0:	492c      	ldr	r1, [pc, #176]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80060d2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80060d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80060d8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80060dc:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060de:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060e6:	d03a      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060e8:	045a      	lsls	r2, r3, #17
 80060ea:	d50b      	bpl.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060ec:	4925      	ldr	r1, [pc, #148]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80060ee:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80060f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80060f4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80060f8:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060fa:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006102:	d031      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006104:	041b      	lsls	r3, r3, #16
 8006106:	d50b      	bpl.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006108:	4a1e      	ldr	r2, [pc, #120]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800610a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800610c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006110:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006114:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006116:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800611a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800611e:	d028      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 8006120:	b002      	add	sp, #8
 8006122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8006126:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006128:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800612c:	659a      	str	r2, [r3, #88]	; 0x58
 800612e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006138:	2701      	movs	r7, #1
 800613a:	e6e9      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 800613c:	2003      	movs	r0, #3
 800613e:	e731      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006140:	68ca      	ldr	r2, [r1, #12]
 8006142:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006146:	60ca      	str	r2, [r1, #12]
 8006148:	e7a4      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800614a:	68ca      	ldr	r2, [r1, #12]
 800614c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006150:	60ca      	str	r2, [r1, #12]
 8006152:	e7ad      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006154:	68ca      	ldr	r2, [r1, #12]
 8006156:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800615a:	60ca      	str	r2, [r1, #12]
 800615c:	e7b6      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800615e:	68ca      	ldr	r2, [r1, #12]
 8006160:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006164:	60ca      	str	r2, [r1, #12]
 8006166:	e7bf      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006168:	68ca      	ldr	r2, [r1, #12]
 800616a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800616e:	60ca      	str	r2, [r1, #12]
 8006170:	e7c8      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006172:	68d3      	ldr	r3, [r2, #12]
 8006174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006178:	60d3      	str	r3, [r2, #12]
}
 800617a:	b002      	add	sp, #8
 800617c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006180:	4613      	mov	r3, r2
 8006182:	e706      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8006184:	40021000 	.word	0x40021000
 8006188:	40007000 	.word	0x40007000

0800618c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800618c:	6a03      	ldr	r3, [r0, #32]
 800618e:	f023 0301 	bic.w	r3, r3, #1
 8006192:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006194:	6a03      	ldr	r3, [r0, #32]
{
 8006196:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006198:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800619a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800619c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800619e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80061a2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80061a6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061a8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80061aa:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80061ae:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061b0:	4d13      	ldr	r5, [pc, #76]	; (8006200 <TIM_OC1_SetConfig+0x74>)
 80061b2:	42a8      	cmp	r0, r5
 80061b4:	d00f      	beq.n	80061d6 <TIM_OC1_SetConfig+0x4a>
 80061b6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80061ba:	42a8      	cmp	r0, r5
 80061bc:	d00b      	beq.n	80061d6 <TIM_OC1_SetConfig+0x4a>
 80061be:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80061c2:	42a8      	cmp	r0, r5
 80061c4:	d007      	beq.n	80061d6 <TIM_OC1_SetConfig+0x4a>
 80061c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80061ca:	42a8      	cmp	r0, r5
 80061cc:	d003      	beq.n	80061d6 <TIM_OC1_SetConfig+0x4a>
 80061ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80061d2:	42a8      	cmp	r0, r5
 80061d4:	d10d      	bne.n	80061f2 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061d6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80061d8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80061dc:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061de:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061e2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80061e6:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80061ea:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80061ee:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061f2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80061f4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80061f6:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80061f8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80061fa:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80061fc:	6203      	str	r3, [r0, #32]
}
 80061fe:	4770      	bx	lr
 8006200:	40012c00 	.word	0x40012c00

08006204 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006204:	6a03      	ldr	r3, [r0, #32]
 8006206:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800620a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620c:	6a03      	ldr	r3, [r0, #32]
{
 800620e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006210:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006212:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006214:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006216:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800621a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800621e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006220:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006222:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006226:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800622a:	4d15      	ldr	r5, [pc, #84]	; (8006280 <TIM_OC3_SetConfig+0x7c>)
 800622c:	42a8      	cmp	r0, r5
 800622e:	d010      	beq.n	8006252 <TIM_OC3_SetConfig+0x4e>
 8006230:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006234:	42a8      	cmp	r0, r5
 8006236:	d00c      	beq.n	8006252 <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006238:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800623c:	42a8      	cmp	r0, r5
 800623e:	d00f      	beq.n	8006260 <TIM_OC3_SetConfig+0x5c>
 8006240:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006244:	42a8      	cmp	r0, r5
 8006246:	d00b      	beq.n	8006260 <TIM_OC3_SetConfig+0x5c>
 8006248:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800624c:	42a8      	cmp	r0, r5
 800624e:	d10f      	bne.n	8006270 <TIM_OC3_SetConfig+0x6c>
 8006250:	e006      	b.n	8006260 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006252:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006258:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800625c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006260:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006264:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006268:	ea46 0c05 	orr.w	ip, r6, r5
 800626c:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006270:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006272:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006274:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006276:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8006278:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800627a:	6203      	str	r3, [r0, #32]
}
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40012c00 	.word	0x40012c00

08006284 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006284:	6a03      	ldr	r3, [r0, #32]
 8006286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800628a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628c:	6a03      	ldr	r3, [r0, #32]
{
 800628e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006290:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006292:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006294:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006296:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800629a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800629e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80062a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062a8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80062ac:	4d14      	ldr	r5, [pc, #80]	; (8006300 <TIM_OC4_SetConfig+0x7c>)
 80062ae:	42a8      	cmp	r0, r5
 80062b0:	d010      	beq.n	80062d4 <TIM_OC4_SetConfig+0x50>
 80062b2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80062b6:	42a8      	cmp	r0, r5
 80062b8:	d00c      	beq.n	80062d4 <TIM_OC4_SetConfig+0x50>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ba:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80062be:	42a8      	cmp	r0, r5
 80062c0:	d00f      	beq.n	80062e2 <TIM_OC4_SetConfig+0x5e>
 80062c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80062c6:	42a8      	cmp	r0, r5
 80062c8:	d00b      	beq.n	80062e2 <TIM_OC4_SetConfig+0x5e>
 80062ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80062ce:	42a8      	cmp	r0, r5
 80062d0:	d10f      	bne.n	80062f2 <TIM_OC4_SetConfig+0x6e>
 80062d2:	e006      	b.n	80062e2 <TIM_OC4_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80062d4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80062d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80062da:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80062de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80062e2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80062e6:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80062ea:	ea46 0c05 	orr.w	ip, r6, r5
 80062ee:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062f2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80062f4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80062f6:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80062f8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 80062fa:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80062fc:	6203      	str	r3, [r0, #32]
}
 80062fe:	4770      	bx	lr
 8006300:	40012c00 	.word	0x40012c00

08006304 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006304:	2800      	cmp	r0, #0
 8006306:	f000 8081 	beq.w	800640c <HAL_TIM_Base_Init+0x108>
{
 800630a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800630c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006310:	4604      	mov	r4, r0
 8006312:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006316:	2b00      	cmp	r3, #0
 8006318:	d06d      	beq.n	80063f6 <HAL_TIM_Base_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800631a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800631c:	493c      	ldr	r1, [pc, #240]	; (8006410 <HAL_TIM_Base_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800631e:	2302      	movs	r3, #2
 8006320:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006324:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8006326:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006328:	d051      	beq.n	80063ce <HAL_TIM_Base_Init+0xca>
 800632a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800632e:	d021      	beq.n	8006374 <HAL_TIM_Base_Init+0x70>
 8006330:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006334:	428a      	cmp	r2, r1
 8006336:	d01d      	beq.n	8006374 <HAL_TIM_Base_Init+0x70>
 8006338:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800633c:	428a      	cmp	r2, r1
 800633e:	d019      	beq.n	8006374 <HAL_TIM_Base_Init+0x70>
 8006340:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8006344:	428a      	cmp	r2, r1
 8006346:	d042      	beq.n	80063ce <HAL_TIM_Base_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006348:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800634c:	428a      	cmp	r2, r1
 800634e:	d057      	beq.n	8006400 <HAL_TIM_Base_Init+0xfc>
 8006350:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006354:	428a      	cmp	r2, r1
 8006356:	d053      	beq.n	8006400 <HAL_TIM_Base_Init+0xfc>
 8006358:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800635c:	428a      	cmp	r2, r1
 800635e:	d04f      	beq.n	8006400 <HAL_TIM_Base_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006360:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006362:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006368:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800636a:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800636c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800636e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006370:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006372:	e010      	b.n	8006396 <HAL_TIM_Base_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8006374:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006376:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800637c:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800637e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006382:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006384:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800638a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800638c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800638e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006390:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006392:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006394:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006396:	2301      	movs	r3, #1
 8006398:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800639a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80063a2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80063a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80063aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80063ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80063ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063be:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80063c2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80063c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80063ca:	2000      	movs	r0, #0
}
 80063cc:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80063ce:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063d0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80063d6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80063d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063dc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063de:	69a1      	ldr	r1, [r4, #24]
 80063e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063e4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80063e6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063e8:	68e3      	ldr	r3, [r4, #12]
 80063ea:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80063ec:	6863      	ldr	r3, [r4, #4]
 80063ee:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80063f0:	6963      	ldr	r3, [r4, #20]
 80063f2:	6313      	str	r3, [r2, #48]	; 0x30
 80063f4:	e7cf      	b.n	8006396 <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 80063f6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80063fa:	f7fd fced 	bl	8003dd8 <HAL_TIM_Base_MspInit>
 80063fe:	e78c      	b.n	800631a <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006400:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006402:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006408:	4303      	orrs	r3, r0
 800640a:	e7e9      	b.n	80063e0 <HAL_TIM_Base_Init+0xdc>
    return HAL_ERROR;
 800640c:	2001      	movs	r0, #1
}
 800640e:	4770      	bx	lr
 8006410:	40012c00 	.word	0x40012c00

08006414 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006414:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006418:	2b01      	cmp	r3, #1
 800641a:	d122      	bne.n	8006462 <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800641c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800641e:	4917      	ldr	r1, [pc, #92]	; (800647c <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006420:	2202      	movs	r2, #2
 8006422:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006426:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006428:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800642a:	f042 0201 	orr.w	r2, r2, #1
 800642e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006430:	d019      	beq.n	8006466 <HAL_TIM_Base_Start_IT+0x52>
 8006432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006436:	d016      	beq.n	8006466 <HAL_TIM_Base_Start_IT+0x52>
 8006438:	4a11      	ldr	r2, [pc, #68]	; (8006480 <HAL_TIM_Base_Start_IT+0x6c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d013      	beq.n	8006466 <HAL_TIM_Base_Start_IT+0x52>
 800643e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006442:	4293      	cmp	r3, r2
 8006444:	d00f      	beq.n	8006466 <HAL_TIM_Base_Start_IT+0x52>
 8006446:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800644a:	4293      	cmp	r3, r2
 800644c:	d00b      	beq.n	8006466 <HAL_TIM_Base_Start_IT+0x52>
 800644e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006452:	4293      	cmp	r3, r2
 8006454:	d007      	beq.n	8006466 <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800645c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	4770      	bx	lr
    return HAL_ERROR;
 8006462:	2001      	movs	r0, #1
 8006464:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006466:	6899      	ldr	r1, [r3, #8]
 8006468:	4a06      	ldr	r2, [pc, #24]	; (8006484 <HAL_TIM_Base_Start_IT+0x70>)
 800646a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800646c:	2a06      	cmp	r2, #6
 800646e:	d002      	beq.n	8006476 <HAL_TIM_Base_Start_IT+0x62>
 8006470:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006474:	d1ef      	bne.n	8006456 <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 8006476:	2000      	movs	r0, #0
}
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40012c00 	.word	0x40012c00
 8006480:	40000400 	.word	0x40000400
 8006484:	00010007 	.word	0x00010007

08006488 <HAL_TIM_PWM_MspInit>:
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop

0800648c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800648c:	2800      	cmp	r0, #0
 800648e:	f000 8081 	beq.w	8006594 <HAL_TIM_PWM_Init+0x108>
{
 8006492:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006494:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006498:	4604      	mov	r4, r0
 800649a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d06d      	beq.n	800657e <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064a2:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064a4:	493c      	ldr	r1, [pc, #240]	; (8006598 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80064a6:	2302      	movs	r3, #2
 80064a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064ac:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80064ae:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064b0:	d051      	beq.n	8006556 <HAL_TIM_PWM_Init+0xca>
 80064b2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80064b6:	d021      	beq.n	80064fc <HAL_TIM_PWM_Init+0x70>
 80064b8:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80064bc:	428a      	cmp	r2, r1
 80064be:	d01d      	beq.n	80064fc <HAL_TIM_PWM_Init+0x70>
 80064c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80064c4:	428a      	cmp	r2, r1
 80064c6:	d019      	beq.n	80064fc <HAL_TIM_PWM_Init+0x70>
 80064c8:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 80064cc:	428a      	cmp	r2, r1
 80064ce:	d042      	beq.n	8006556 <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064d0:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80064d4:	428a      	cmp	r2, r1
 80064d6:	d057      	beq.n	8006588 <HAL_TIM_PWM_Init+0xfc>
 80064d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80064dc:	428a      	cmp	r2, r1
 80064de:	d053      	beq.n	8006588 <HAL_TIM_PWM_Init+0xfc>
 80064e0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80064e4:	428a      	cmp	r2, r1
 80064e6:	d04f      	beq.n	8006588 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e8:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ea:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064f0:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80064f2:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80064f4:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f6:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80064f8:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064fa:	e010      	b.n	800651e <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 80064fc:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064fe:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006504:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8006506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800650a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800650c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800650e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006512:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006514:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8006516:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006518:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800651a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800651c:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800651e:	2301      	movs	r3, #1
 8006520:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006522:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006526:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800652a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800652e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006532:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006536:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800653a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800653e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006542:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006546:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800654a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800654e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006552:	2000      	movs	r0, #0
}
 8006554:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8006556:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006558:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800655a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800655e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006564:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006566:	69a1      	ldr	r1, [r4, #24]
 8006568:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800656c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800656e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006570:	68e3      	ldr	r3, [r4, #12]
 8006572:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006574:	6863      	ldr	r3, [r4, #4]
 8006576:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006578:	6963      	ldr	r3, [r4, #20]
 800657a:	6313      	str	r3, [r2, #48]	; 0x30
 800657c:	e7cf      	b.n	800651e <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 800657e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006582:	f7ff ff81 	bl	8006488 <HAL_TIM_PWM_MspInit>
 8006586:	e78c      	b.n	80064a2 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006588:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800658a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800658c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006590:	4303      	orrs	r3, r0
 8006592:	e7e9      	b.n	8006568 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 8006594:	2001      	movs	r0, #1
}
 8006596:	4770      	bx	lr
 8006598:	40012c00 	.word	0x40012c00

0800659c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800659c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	f000 8089 	beq.w	80066b8 <HAL_TIM_ConfigClockSource+0x11c>
{
 80065a6:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 80065a8:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80065aa:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80065ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80065b0:	2201      	movs	r2, #1
 80065b2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80065b6:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065b8:	4b5f      	ldr	r3, [pc, #380]	; (8006738 <HAL_TIM_ConfigClockSource+0x19c>)
 80065ba:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80065bc:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80065be:	680b      	ldr	r3, [r1, #0]
 80065c0:	2b70      	cmp	r3, #112	; 0x70
 80065c2:	f000 80a8 	beq.w	8006716 <HAL_TIM_ConfigClockSource+0x17a>
 80065c6:	d828      	bhi.n	800661a <HAL_TIM_ConfigClockSource+0x7e>
 80065c8:	2b50      	cmp	r3, #80	; 0x50
 80065ca:	d078      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x122>
 80065cc:	d93e      	bls.n	800664c <HAL_TIM_ConfigClockSource+0xb0>
 80065ce:	2b60      	cmp	r3, #96	; 0x60
 80065d0:	d11a      	bne.n	8006608 <HAL_TIM_ConfigClockSource+0x6c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065d2:	68cb      	ldr	r3, [r1, #12]
 80065d4:	684d      	ldr	r5, [r1, #4]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065d6:	6a21      	ldr	r1, [r4, #32]
 80065d8:	f021 0110 	bic.w	r1, r1, #16
 80065dc:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065de:	69a2      	ldr	r2, [r4, #24]
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065e0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065e4:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccer = TIMx->CCER;
 80065e8:	6a23      	ldr	r3, [r4, #32]
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065ea:	61a2      	str	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80065f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 80065f4:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065f6:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80065fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006600:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8006604:	2200      	movs	r2, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006606:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006608:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800660a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800660c:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006610:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8006614:	bc70      	pop	{r4, r5, r6}
 8006616:	4610      	mov	r0, r2
 8006618:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800661a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800661e:	d069      	beq.n	80066f4 <HAL_TIM_ConfigClockSource+0x158>
 8006620:	d938      	bls.n	8006694 <HAL_TIM_ConfigClockSource+0xf8>
 8006622:	4946      	ldr	r1, [pc, #280]	; (800673c <HAL_TIM_ConfigClockSource+0x1a0>)
 8006624:	428b      	cmp	r3, r1
 8006626:	d006      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0x9a>
 8006628:	d92d      	bls.n	8006686 <HAL_TIM_ConfigClockSource+0xea>
 800662a:	4945      	ldr	r1, [pc, #276]	; (8006740 <HAL_TIM_ConfigClockSource+0x1a4>)
 800662c:	428b      	cmp	r3, r1
 800662e:	d002      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0x9a>
 8006630:	3130      	adds	r1, #48	; 0x30
 8006632:	428b      	cmp	r3, r1
 8006634:	d1e8      	bne.n	8006608 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr = TIMx->SMCR;
 8006636:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006638:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800663c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006640:	430b      	orrs	r3, r1
 8006642:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8006646:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 8006648:	60a3      	str	r3, [r4, #8]
}
 800664a:	e7dd      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 800664c:	2b40      	cmp	r3, #64	; 0x40
 800664e:	d126      	bne.n	800669e <HAL_TIM_ConfigClockSource+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006650:	684a      	ldr	r2, [r1, #4]
 8006652:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8006654:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006656:	6a25      	ldr	r5, [r4, #32]
 8006658:	f025 0501 	bic.w	r5, r5, #1
 800665c:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800665e:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006660:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006664:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8006668:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800666a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800666e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006670:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006672:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006674:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800667c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8006680:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 8006682:	60a3      	str	r3, [r4, #8]
}
 8006684:	e7c0      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 8006686:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800668a:	d0d4      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0x9a>
 800668c:	3910      	subs	r1, #16
 800668e:	428b      	cmp	r3, r1
 8006690:	d0d1      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0x9a>
 8006692:	e7b9      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 8006694:	f5b3 5280 	subs.w	r2, r3, #4096	; 0x1000
 8006698:	bf18      	it	ne
 800669a:	2201      	movne	r2, #1
 800669c:	e7b4      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x6c>
  switch (sClockSourceConfig->ClockSource)
 800669e:	d8b3      	bhi.n	8006608 <HAL_TIM_ConfigClockSource+0x6c>
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d0c8      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0x9a>
 80066a4:	d903      	bls.n	80066ae <HAL_TIM_ConfigClockSource+0x112>
 80066a6:	2b30      	cmp	r3, #48	; 0x30
 80066a8:	d0c5      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0x9a>
 80066aa:	2201      	movs	r2, #1
 80066ac:	e7ac      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x6c>
 80066ae:	f033 0210 	bics.w	r2, r3, #16
 80066b2:	d0c0      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0x9a>
 80066b4:	2201      	movs	r2, #1
 80066b6:	e7a7      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x6c>
  __HAL_LOCK(htim);
 80066b8:	2202      	movs	r2, #2
}
 80066ba:	4610      	mov	r0, r2
 80066bc:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066be:	684a      	ldr	r2, [r1, #4]
 80066c0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80066c2:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066c4:	6a25      	ldr	r5, [r4, #32]
 80066c6:	f025 0501 	bic.w	r5, r5, #1
 80066ca:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066cc:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ce:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80066d6:	4311      	orrs	r1, r2
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066d8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80066dc:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80066de:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80066e0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80066e2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80066e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066ea:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 80066ee:	2200      	movs	r2, #0
  TIMx->SMCR = tmpsmcr;
 80066f0:	60a3      	str	r3, [r4, #8]
}
 80066f2:	e789      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x6c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066f4:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80066f8:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066fa:	68c9      	ldr	r1, [r1, #12]
 80066fc:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066fe:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006702:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006706:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006708:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800670a:	68a3      	ldr	r3, [r4, #8]
 800670c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8006710:	2200      	movs	r2, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006712:	60a3      	str	r3, [r4, #8]
      break;
 8006714:	e778      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x6c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006716:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800671a:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800671c:	68c9      	ldr	r1, [r1, #12]
 800671e:	432b      	orrs	r3, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006720:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006724:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006728:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 800672a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800672c:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800672e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8006732:	2200      	movs	r2, #0
      htim->Instance->SMCR = tmpsmcr;
 8006734:	60a3      	str	r3, [r4, #8]
      break;
 8006736:	e767      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x6c>
 8006738:	ffce0088 	.word	0xffce0088
 800673c:	00100030 	.word	0x00100030
 8006740:	00100040 	.word	0x00100040

08006744 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8006744:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006748:	2b01      	cmp	r3, #1
 800674a:	d069      	beq.n	8006820 <HAL_TIM_SlaveConfigSynchro+0xdc>
 800674c:	4684      	mov	ip, r0
 800674e:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 8006750:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006752:	2302      	movs	r3, #2
{
 8006754:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8006756:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800675a:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800675e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006760:	684b      	ldr	r3, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006762:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006764:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006768:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800676c:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 800676e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006772:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006776:	4322      	orrs	r2, r4
  switch (sSlaveConfig->InputTrigger)
 8006778:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800677a:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 800677c:	d05e      	beq.n	800683c <HAL_TIM_SlaveConfigSynchro+0xf8>
 800677e:	d816      	bhi.n	80067ae <HAL_TIM_SlaveConfigSynchro+0x6a>
 8006780:	2b40      	cmp	r3, #64	; 0x40
 8006782:	d06e      	beq.n	8006862 <HAL_TIM_SlaveConfigSynchro+0x11e>
 8006784:	d933      	bls.n	80067ee <HAL_TIM_SlaveConfigSynchro+0xaa>
 8006786:	2b50      	cmp	r3, #80	; 0x50
 8006788:	d141      	bne.n	800680e <HAL_TIM_SlaveConfigSynchro+0xca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800678a:	688a      	ldr	r2, [r1, #8]
 800678c:	690c      	ldr	r4, [r1, #16]
  tmpccer = TIMx->CCER;
 800678e:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006790:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006794:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006796:	6a01      	ldr	r1, [r0, #32]
 8006798:	f021 0101 	bic.w	r1, r1, #1
 800679c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800679e:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067a4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80067a8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80067aa:	6202      	str	r2, [r0, #32]
 80067ac:	e00d      	b.n	80067ca <HAL_TIM_SlaveConfigSynchro+0x86>
  switch (sSlaveConfig->InputTrigger)
 80067ae:	2b70      	cmp	r3, #112	; 0x70
 80067b0:	d038      	beq.n	8006824 <HAL_TIM_SlaveConfigSynchro+0xe0>
 80067b2:	2b6f      	cmp	r3, #111	; 0x6f
 80067b4:	d92b      	bls.n	800680e <HAL_TIM_SlaveConfigSynchro+0xca>
 80067b6:	4a34      	ldr	r2, [pc, #208]	; (8006888 <HAL_TIM_SlaveConfigSynchro+0x144>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d006      	beq.n	80067ca <HAL_TIM_SlaveConfigSynchro+0x86>
 80067bc:	d91d      	bls.n	80067fa <HAL_TIM_SlaveConfigSynchro+0xb6>
 80067be:	4a33      	ldr	r2, [pc, #204]	; (800688c <HAL_TIM_SlaveConfigSynchro+0x148>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d002      	beq.n	80067ca <HAL_TIM_SlaveConfigSynchro+0x86>
 80067c4:	3230      	adds	r2, #48	; 0x30
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d121      	bne.n	800680e <HAL_TIM_SlaveConfigSynchro+0xca>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80067ca:	68c3      	ldr	r3, [r0, #12]
 80067cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d0:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80067d2:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 80067d4:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80067d6:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80067d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067dc:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 80067de:	f88c 103d 	strb.w	r1, [ip, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80067e2:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  return HAL_OK;
 80067e6:	4610      	mov	r0, r2
}
 80067e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ec:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	d0eb      	beq.n	80067ca <HAL_TIM_SlaveConfigSynchro+0x86>
 80067f2:	d909      	bls.n	8006808 <HAL_TIM_SlaveConfigSynchro+0xc4>
 80067f4:	2b30      	cmp	r3, #48	; 0x30
 80067f6:	d10a      	bne.n	800680e <HAL_TIM_SlaveConfigSynchro+0xca>
 80067f8:	e7e7      	b.n	80067ca <HAL_TIM_SlaveConfigSynchro+0x86>
 80067fa:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80067fe:	d0e4      	beq.n	80067ca <HAL_TIM_SlaveConfigSynchro+0x86>
 8006800:	3a10      	subs	r2, #16
 8006802:	4293      	cmp	r3, r2
 8006804:	d0e1      	beq.n	80067ca <HAL_TIM_SlaveConfigSynchro+0x86>
 8006806:	e002      	b.n	800680e <HAL_TIM_SlaveConfigSynchro+0xca>
 8006808:	f033 0310 	bics.w	r3, r3, #16
 800680c:	d0dd      	beq.n	80067ca <HAL_TIM_SlaveConfigSynchro+0x86>
    htim->State = HAL_TIM_STATE_READY;
 800680e:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8006810:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8006812:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006816:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 800681a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800681e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006820:	2002      	movs	r0, #2
}
 8006822:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006824:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8006828:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800682a:	6909      	ldr	r1, [r1, #16]
 800682c:	4323      	orrs	r3, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800682e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006832:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006836:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8006838:	6083      	str	r3, [r0, #8]
 800683a:	e7c6      	b.n	80067ca <HAL_TIM_SlaveConfigSynchro+0x86>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800683c:	690b      	ldr	r3, [r1, #16]
 800683e:	688c      	ldr	r4, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006840:	6a01      	ldr	r1, [r0, #32]
 8006842:	f021 0110 	bic.w	r1, r1, #16
 8006846:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006848:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800684a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800684e:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccer = TIMx->CCER;
 8006852:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8006854:	6182      	str	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006856:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800685a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCER = tmpccer;
 800685e:	6203      	str	r3, [r0, #32]
 8006860:	e7b3      	b.n	80067ca <HAL_TIM_SlaveConfigSynchro+0x86>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006862:	2c05      	cmp	r4, #5
 8006864:	d0d3      	beq.n	800680e <HAL_TIM_SlaveConfigSynchro+0xca>
 8006866:	f1b4 1f01 	cmp.w	r4, #65537	; 0x10001
 800686a:	d0d0      	beq.n	800680e <HAL_TIM_SlaveConfigSynchro+0xca>
      tmpccer = htim->Instance->CCER;
 800686c:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800686e:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006870:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006872:	f022 0201 	bic.w	r2, r2, #1
 8006876:	6202      	str	r2, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006878:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800687a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800687e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8006882:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8006884:	6204      	str	r4, [r0, #32]
      break;
 8006886:	e7a0      	b.n	80067ca <HAL_TIM_SlaveConfigSynchro+0x86>
 8006888:	00100030 	.word	0x00100030
 800688c:	00100040 	.word	0x00100040

08006890 <HAL_TIM_OC_DelayElapsedCallback>:
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop

08006894 <HAL_TIM_IC_CaptureCallback>:
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop

08006898 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop

0800689c <HAL_TIM_TriggerCallback>:
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop

080068a0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068a0:	6803      	ldr	r3, [r0, #0]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	0791      	lsls	r1, r2, #30
{
 80068a6:	b510      	push	{r4, lr}
 80068a8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068aa:	d503      	bpl.n	80068b4 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068ac:	68da      	ldr	r2, [r3, #12]
 80068ae:	0792      	lsls	r2, r2, #30
 80068b0:	f100 808a 	bmi.w	80069c8 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068b4:	691a      	ldr	r2, [r3, #16]
 80068b6:	0752      	lsls	r2, r2, #29
 80068b8:	d502      	bpl.n	80068c0 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	0750      	lsls	r0, r2, #29
 80068be:	d470      	bmi.n	80069a2 <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068c0:	691a      	ldr	r2, [r3, #16]
 80068c2:	0711      	lsls	r1, r2, #28
 80068c4:	d502      	bpl.n	80068cc <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	0712      	lsls	r2, r2, #28
 80068ca:	d458      	bmi.n	800697e <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068cc:	691a      	ldr	r2, [r3, #16]
 80068ce:	06d1      	lsls	r1, r2, #27
 80068d0:	d502      	bpl.n	80068d8 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	06d2      	lsls	r2, r2, #27
 80068d6:	d43e      	bmi.n	8006956 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	07d0      	lsls	r0, r2, #31
 80068dc:	d503      	bpl.n	80068e6 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	07d1      	lsls	r1, r2, #31
 80068e2:	f100 808a 	bmi.w	80069fa <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	0612      	lsls	r2, r2, #24
 80068ea:	d503      	bpl.n	80068f4 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	0610      	lsls	r0, r2, #24
 80068f0:	f100 808b 	bmi.w	8006a0a <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068f4:	691a      	ldr	r2, [r3, #16]
 80068f6:	05d1      	lsls	r1, r2, #23
 80068f8:	d503      	bpl.n	8006902 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	0612      	lsls	r2, r2, #24
 80068fe:	f100 808c 	bmi.w	8006a1a <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006902:	691a      	ldr	r2, [r3, #16]
 8006904:	0650      	lsls	r0, r2, #25
 8006906:	d503      	bpl.n	8006910 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	0651      	lsls	r1, r2, #25
 800690c:	f100 808d 	bmi.w	8006a2a <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006910:	691a      	ldr	r2, [r3, #16]
 8006912:	0692      	lsls	r2, r2, #26
 8006914:	d503      	bpl.n	800691e <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	0690      	lsls	r0, r2, #26
 800691a:	f100 808e 	bmi.w	8006a3a <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800691e:	691a      	ldr	r2, [r3, #16]
 8006920:	02d1      	lsls	r1, r2, #11
 8006922:	d503      	bpl.n	800692c <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	02d2      	lsls	r2, r2, #11
 8006928:	f100 808f 	bmi.w	8006a4a <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800692c:	691a      	ldr	r2, [r3, #16]
 800692e:	0290      	lsls	r0, r2, #10
 8006930:	d503      	bpl.n	800693a <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006932:	68da      	ldr	r2, [r3, #12]
 8006934:	0291      	lsls	r1, r2, #10
 8006936:	f100 8090 	bmi.w	8006a5a <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	0252      	lsls	r2, r2, #9
 800693e:	d503      	bpl.n	8006948 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	0250      	lsls	r0, r2, #9
 8006944:	f100 8091 	bmi.w	8006a6a <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	0211      	lsls	r1, r2, #8
 800694c:	d502      	bpl.n	8006954 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	0212      	lsls	r2, r2, #8
 8006952:	d44a      	bmi.n	80069ea <HAL_TIM_IRQHandler+0x14a>
}
 8006954:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006956:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800695a:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800695c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800695e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006966:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006968:	f040 8090 	bne.w	8006a8c <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696c:	f7ff ff90 	bl	8006890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006970:	4620      	mov	r0, r4
 8006972:	f7ff ff91 	bl	8006898 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006976:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006978:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697a:	7722      	strb	r2, [r4, #28]
 800697c:	e7ac      	b.n	80068d8 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800697e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006982:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006984:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006986:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800698c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800698e:	d17a      	bne.n	8006a86 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006990:	f7ff ff7e 	bl	8006890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006994:	4620      	mov	r0, r4
 8006996:	f7ff ff7f 	bl	8006898 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800699c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699e:	7722      	strb	r2, [r4, #28]
 80069a0:	e794      	b.n	80068cc <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069a2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069a6:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069a8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80069b2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069b4:	d164      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b6:	f7ff ff6b 	bl	8006890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ba:	4620      	mov	r0, r4
 80069bc:	f7ff ff6c 	bl	8006898 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069c2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c4:	7722      	strb	r2, [r4, #28]
 80069c6:	e77b      	b.n	80068c0 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069c8:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069cc:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069ce:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069d0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	0799      	lsls	r1, r3, #30
 80069d6:	d150      	bne.n	8006a7a <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d8:	f7ff ff5a 	bl	8006890 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069dc:	4620      	mov	r0, r4
 80069de:	f7ff ff5b 	bl	8006898 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069e4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e6:	7722      	strb	r2, [r4, #28]
 80069e8:	e764      	b.n	80068b4 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80069ea:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 80069ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80069f0:	611a      	str	r2, [r3, #16]
}
 80069f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 80069f6:	f000 bb93 	b.w	8007120 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069fa:	f06f 0201 	mvn.w	r2, #1
 80069fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a00:	4620      	mov	r0, r4
 8006a02:	f7fb f825 	bl	8001a50 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	e76d      	b.n	80068e6 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a0e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 fb7b 	bl	800710c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	e76c      	b.n	80068f4 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a1e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006a20:	4620      	mov	r0, r4
 8006a22:	f000 fb75 	bl	8007110 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	e76b      	b.n	8006902 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a2e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006a30:	4620      	mov	r0, r4
 8006a32:	f7ff ff33 	bl	800689c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	e76a      	b.n	8006910 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a3a:	f06f 0220 	mvn.w	r2, #32
 8006a3e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006a40:	4620      	mov	r0, r4
 8006a42:	f000 fb61 	bl	8007108 <HAL_TIMEx_CommutCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	e769      	b.n	800691e <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006a4a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006a4e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006a50:	4620      	mov	r0, r4
 8006a52:	f000 fb5f 	bl	8007114 <HAL_TIMEx_EncoderIndexCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	e768      	b.n	800692c <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006a5a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006a5e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 fb59 	bl	8007118 <HAL_TIMEx_DirectionChangeCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	e767      	b.n	800693a <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006a6a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006a6e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8006a70:	4620      	mov	r0, r4
 8006a72:	f000 fb53 	bl	800711c <HAL_TIMEx_IndexErrorCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	e766      	b.n	8006948 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 8006a7a:	f7ff ff0b 	bl	8006894 <HAL_TIM_IC_CaptureCallback>
 8006a7e:	e7b0      	b.n	80069e2 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8006a80:	f7ff ff08 	bl	8006894 <HAL_TIM_IC_CaptureCallback>
 8006a84:	e79c      	b.n	80069c0 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 8006a86:	f7ff ff05 	bl	8006894 <HAL_TIM_IC_CaptureCallback>
 8006a8a:	e786      	b.n	800699a <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 8006a8c:	f7ff ff02 	bl	8006894 <HAL_TIM_IC_CaptureCallback>
 8006a90:	e771      	b.n	8006976 <HAL_TIM_IRQHandler+0xd6>
 8006a92:	bf00      	nop

08006a94 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a94:	4a32      	ldr	r2, [pc, #200]	; (8006b60 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 8006a96:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a98:	4290      	cmp	r0, r2
{
 8006a9a:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a9c:	d039      	beq.n	8006b12 <TIM_Base_SetConfig+0x7e>
 8006a9e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006aa2:	d021      	beq.n	8006ae8 <TIM_Base_SetConfig+0x54>
 8006aa4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006aa8:	4290      	cmp	r0, r2
 8006aaa:	d01d      	beq.n	8006ae8 <TIM_Base_SetConfig+0x54>
 8006aac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ab0:	4290      	cmp	r0, r2
 8006ab2:	d019      	beq.n	8006ae8 <TIM_Base_SetConfig+0x54>
 8006ab4:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8006ab8:	4290      	cmp	r0, r2
 8006aba:	d041      	beq.n	8006b40 <TIM_Base_SetConfig+0xac>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006abc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006ac0:	4290      	cmp	r0, r2
 8006ac2:	d047      	beq.n	8006b54 <TIM_Base_SetConfig+0xc0>
 8006ac4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ac8:	4290      	cmp	r0, r2
 8006aca:	d043      	beq.n	8006b54 <TIM_Base_SetConfig+0xc0>
 8006acc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ad0:	4290      	cmp	r0, r2
 8006ad2:	d03f      	beq.n	8006b54 <TIM_Base_SetConfig+0xc0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ad4:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ad6:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8006ad8:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ade:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006ae0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ae2:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006ae4:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ae6:	e010      	b.n	8006b0a <TIM_Base_SetConfig+0x76>
    tmpcr1 |= Structure->CounterMode;
 8006ae8:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aea:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006af0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006af6:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006af8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006afe:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b00:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8006b02:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8006b04:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b06:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006b08:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006b0a:	2301      	movs	r3, #1
}
 8006b0c:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8006b0e:	6143      	str	r3, [r0, #20]
}
 8006b10:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8006b12:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b14:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006b1a:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b20:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b22:	694a      	ldr	r2, [r1, #20]
 8006b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b28:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006b2a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b2c:	688b      	ldr	r3, [r1, #8]
 8006b2e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006b30:	680b      	ldr	r3, [r1, #0]
 8006b32:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006b34:	690b      	ldr	r3, [r1, #16]
 8006b36:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006b38:	2301      	movs	r3, #1
}
 8006b3a:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8006b3c:	6143      	str	r3, [r0, #20]
}
 8006b3e:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8006b40:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b42:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006b48:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b4e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b50:	694a      	ldr	r2, [r1, #20]
 8006b52:	e7e7      	b.n	8006b24 <TIM_Base_SetConfig+0x90>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b54:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b56:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b5c:	4323      	orrs	r3, r4
 8006b5e:	e7e1      	b.n	8006b24 <TIM_Base_SetConfig+0x90>
 8006b60:	40012c00 	.word	0x40012c00

08006b64 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b64:	6a03      	ldr	r3, [r0, #32]
 8006b66:	f023 0310 	bic.w	r3, r3, #16
 8006b6a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006b6c:	6a03      	ldr	r3, [r0, #32]
{
 8006b6e:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8006b70:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006b72:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b74:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b76:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006b7a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b7e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b82:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006b84:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b88:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b8c:	4d14      	ldr	r5, [pc, #80]	; (8006be0 <TIM_OC2_SetConfig+0x7c>)
 8006b8e:	42a8      	cmp	r0, r5
 8006b90:	d010      	beq.n	8006bb4 <TIM_OC2_SetConfig+0x50>
 8006b92:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006b96:	42a8      	cmp	r0, r5
 8006b98:	d00c      	beq.n	8006bb4 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b9a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006b9e:	42a8      	cmp	r0, r5
 8006ba0:	d00f      	beq.n	8006bc2 <TIM_OC2_SetConfig+0x5e>
 8006ba2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006ba6:	42a8      	cmp	r0, r5
 8006ba8:	d00b      	beq.n	8006bc2 <TIM_OC2_SetConfig+0x5e>
 8006baa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006bae:	42a8      	cmp	r0, r5
 8006bb0:	d10f      	bne.n	8006bd2 <TIM_OC2_SetConfig+0x6e>
 8006bb2:	e006      	b.n	8006bc2 <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bb4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bc2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bc6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bca:	ea46 0c05 	orr.w	ip, r6, r5
 8006bce:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8006bd2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006bd4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006bd6:	6182      	str	r2, [r0, #24]
}
 8006bd8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8006bda:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006bdc:	6203      	str	r3, [r0, #32]
}
 8006bde:	4770      	bx	lr
 8006be0:	40012c00 	.word	0x40012c00

08006be4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8006be4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	f000 80f4 	beq.w	8006dd6 <HAL_TIM_PWM_ConfigChannel+0x1f2>
 8006bee:	2301      	movs	r3, #1
{
 8006bf0:	b570      	push	{r4, r5, r6, lr}
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8006bf6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006bfa:	2a14      	cmp	r2, #20
 8006bfc:	d80c      	bhi.n	8006c18 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006bfe:	e8df f002 	tbb	[pc, r2]
 8006c02:	0b53      	.short	0x0b53
 8006c04:	0b680b0b 	.word	0x0b680b0b
 8006c08:	0b7e0b0b 	.word	0x0b7e0b0b
 8006c0c:	0b930b0b 	.word	0x0b930b0b
 8006c10:	0ba90b0b 	.word	0x0ba90b0b
 8006c14:	0b0b      	.short	0x0b0b
 8006c16:	10          	.byte	0x10
 8006c17:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8006c1e:	2001      	movs	r0, #1
}
 8006c20:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c22:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c24:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c26:	6a1a      	ldr	r2, [r3, #32]
 8006c28:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006c2c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006c2e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006c30:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006c32:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c34:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006c38:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c3c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c40:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c42:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c46:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c4a:	4e64      	ldr	r6, [pc, #400]	; (8006ddc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006c4c:	42b3      	cmp	r3, r6
 8006c4e:	d00f      	beq.n	8006c70 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8006c50:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006c54:	42b3      	cmp	r3, r6
 8006c56:	d00b      	beq.n	8006c70 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8006c58:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006c5c:	42b3      	cmp	r3, r6
 8006c5e:	d007      	beq.n	8006c70 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8006c60:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c64:	42b3      	cmp	r3, r6
 8006c66:	d003      	beq.n	8006c70 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8006c68:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c6c:	42b3      	cmp	r3, r6
 8006c6e:	d104      	bne.n	8006c7a <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c70:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c72:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c76:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8006c7a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006c7c:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8006c7e:	6869      	ldr	r1, [r5, #4]
 8006c80:	64d9      	str	r1, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8006c82:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c84:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c86:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c88:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006c8c:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c8e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006c90:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006c94:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c98:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006c9c:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006ca4:	2000      	movs	r0, #0
}
 8006ca6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ca8:	6800      	ldr	r0, [r0, #0]
 8006caa:	f7ff fa6f 	bl	800618c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cae:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cb0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cb2:	6999      	ldr	r1, [r3, #24]
 8006cb4:	f041 0108 	orr.w	r1, r1, #8
 8006cb8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cba:	6999      	ldr	r1, [r3, #24]
 8006cbc:	f021 0104 	bic.w	r1, r1, #4
 8006cc0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cc2:	699a      	ldr	r2, [r3, #24]
 8006cc4:	4302      	orrs	r2, r0
 8006cc6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006cce:	2000      	movs	r0, #0
}
 8006cd0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cd2:	6800      	ldr	r0, [r0, #0]
 8006cd4:	f7ff ff46 	bl	8006b64 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cd8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cda:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cdc:	6999      	ldr	r1, [r3, #24]
 8006cde:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006ce2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ce4:	6999      	ldr	r1, [r3, #24]
 8006ce6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006cea:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cec:	699a      	ldr	r2, [r3, #24]
 8006cee:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006cf2:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006cfa:	2000      	movs	r0, #0
}
 8006cfc:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cfe:	6800      	ldr	r0, [r0, #0]
 8006d00:	f7ff fa80 	bl	8006204 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d04:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d06:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d08:	69d9      	ldr	r1, [r3, #28]
 8006d0a:	f041 0108 	orr.w	r1, r1, #8
 8006d0e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d10:	69d9      	ldr	r1, [r3, #28]
 8006d12:	f021 0104 	bic.w	r1, r1, #4
 8006d16:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d18:	69da      	ldr	r2, [r3, #28]
 8006d1a:	4302      	orrs	r2, r0
 8006d1c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006d24:	2000      	movs	r0, #0
}
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d28:	6800      	ldr	r0, [r0, #0]
 8006d2a:	f7ff faab 	bl	8006284 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d2e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d30:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d32:	69d9      	ldr	r1, [r3, #28]
 8006d34:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006d38:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d3a:	69d9      	ldr	r1, [r3, #28]
 8006d3c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006d40:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d42:	69da      	ldr	r2, [r3, #28]
 8006d44:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006d48:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006d50:	2000      	movs	r0, #0
}
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d54:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8006d56:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d58:	6a1a      	ldr	r2, [r3, #32]
 8006d5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006d5e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006d60:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006d62:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006d64:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d66:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006d6a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8006d6e:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d70:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8006d72:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d76:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d7a:	4e18      	ldr	r6, [pc, #96]	; (8006ddc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006d7c:	42b3      	cmp	r3, r6
 8006d7e:	d00f      	beq.n	8006da0 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8006d80:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006d84:	42b3      	cmp	r3, r6
 8006d86:	d00b      	beq.n	8006da0 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8006d88:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006d8c:	42b3      	cmp	r3, r6
 8006d8e:	d007      	beq.n	8006da0 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8006d90:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006d94:	42b3      	cmp	r3, r6
 8006d96:	d003      	beq.n	8006da0 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8006d98:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006d9c:	42b3      	cmp	r3, r6
 8006d9e:	d104      	bne.n	8006daa <HAL_TIM_PWM_ConfigChannel+0x1c6>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006da0:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006da2:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006da6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8006daa:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006dac:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8006dae:	6869      	ldr	r1, [r5, #4]
 8006db0:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8006db2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006db4:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006db6:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006db8:	f041 0108 	orr.w	r1, r1, #8
 8006dbc:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006dbe:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006dc0:	f021 0104 	bic.w	r1, r1, #4
 8006dc4:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006dc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dc8:	432a      	orrs	r2, r5
 8006dca:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006dd2:	2000      	movs	r0, #0
}
 8006dd4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8006dd6:	2002      	movs	r0, #2
}
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	40012c00 	.word	0x40012c00

08006de0 <TIM_TI1_SetConfig>:
{
 8006de0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006de2:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006de4:	4e17      	ldr	r6, [pc, #92]	; (8006e44 <TIM_TI1_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006de6:	f025 0501 	bic.w	r5, r5, #1
 8006dea:	6205      	str	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006dec:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8006dee:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8006df0:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006df2:	d015      	beq.n	8006e20 <TIM_TI1_SetConfig+0x40>
 8006df4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006df8:	d012      	beq.n	8006e20 <TIM_TI1_SetConfig+0x40>
 8006dfa:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8006dfe:	42b0      	cmp	r0, r6
 8006e00:	d00e      	beq.n	8006e20 <TIM_TI1_SetConfig+0x40>
 8006e02:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006e06:	42b0      	cmp	r0, r6
 8006e08:	d00a      	beq.n	8006e20 <TIM_TI1_SetConfig+0x40>
 8006e0a:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8006e0e:	42b0      	cmp	r0, r6
 8006e10:	d006      	beq.n	8006e20 <TIM_TI1_SetConfig+0x40>
 8006e12:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8006e16:	42b0      	cmp	r0, r6
 8006e18:	d002      	beq.n	8006e20 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006e1a:	f044 0201 	orr.w	r2, r4, #1
 8006e1e:	e002      	b.n	8006e26 <TIM_TI1_SetConfig+0x46>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e20:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8006e24:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006e26:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e28:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e2c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006e30:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006e32:	f001 010a 	and.w	r1, r1, #10
 8006e36:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006e38:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 8006e3a:	6183      	str	r3, [r0, #24]
}
 8006e3c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8006e3e:	6201      	str	r1, [r0, #32]
}
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40012c00 	.word	0x40012c00

08006e48 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop

08006e4c <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d065      	beq.n	8006f1c <HAL_TIMEx_HallSensor_Init+0xd0>
{
 8006e50:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006e52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8006e56:	b088      	sub	sp, #32
 8006e58:	460d      	mov	r5, r1
 8006e5a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006e5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d056      	beq.n	8006f12 <HAL_TIMEx_HallSensor_Init+0xc6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e64:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8006e66:	2302      	movs	r3, #2
 8006e68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e6c:	f851 0b04 	ldr.w	r0, [r1], #4
 8006e70:	f7ff fe10 	bl	8006a94 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006e74:	68ab      	ldr	r3, [r5, #8]
 8006e76:	6829      	ldr	r1, [r5, #0]
 8006e78:	6820      	ldr	r0, [r4, #0]
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	f7ff ffb0 	bl	8006de0 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e80:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006e82:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e84:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006e86:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e88:	f022 020c 	bic.w	r2, r2, #12
 8006e8c:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006e8e:	6983      	ldr	r3, [r0, #24]
 8006e90:	4333      	orrs	r3, r6
 8006e92:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006e94:	6843      	ldr	r3, [r0, #4]
 8006e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9a:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006e9c:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006e9e:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006ea0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea8:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006eaa:	6883      	ldr	r3, [r0, #8]
 8006eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb0:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006eb2:	6883      	ldr	r3, [r0, #8]
 8006eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eb8:	f023 0307 	bic.w	r3, r3, #7
 8006ebc:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006ebe:	6883      	ldr	r3, [r0, #8]
 8006ec0:	f043 0304 	orr.w	r3, r3, #4
 8006ec4:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006ec6:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006ec8:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006eca:	2370      	movs	r3, #112	; 0x70
 8006ecc:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006ece:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ed2:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006ed6:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006ed8:	f7ff fe44 	bl	8006b64 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006edc:	6821      	ldr	r1, [r4, #0]
 8006ede:	684a      	ldr	r2, [r1, #4]
 8006ee0:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8006ee4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006ee8:	604a      	str	r2, [r1, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006eea:	684a      	ldr	r2, [r1, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eec:	2301      	movs	r3, #1
  return HAL_OK;
 8006eee:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006ef0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8006ef4:	604a      	str	r2, [r1, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006efa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006efe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f02:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006f0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006f0e:	b008      	add	sp, #32
 8006f10:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8006f12:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006f16:	f7ff ff97 	bl	8006e48 <HAL_TIMEx_HallSensor_MspInit>
 8006f1a:	e7a3      	b.n	8006e64 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8006f1c:	2001      	movs	r0, #1
}
 8006f1e:	4770      	bx	lr

08006f20 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d03e      	beq.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8006f28:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f2a:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f2c:	4d1f      	ldr	r5, [pc, #124]	; (8006fac <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006f2e:	2302      	movs	r3, #2
 8006f30:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f34:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8006f36:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006f38:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f3a:	d028      	beq.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006f3c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006f40:	42aa      	cmp	r2, r5
 8006f42:	d024      	beq.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f44:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f46:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f4e:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f50:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006f54:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f56:	d00c      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006f58:	4b15      	ldr	r3, [pc, #84]	; (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d009      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006f5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d005      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006f66:	42aa      	cmp	r2, r5
 8006f68:	d003      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8006f6a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d104      	bne.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f72:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f74:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f78:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f7a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006f7c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006f84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006f88:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8006f8a:	4618      	mov	r0, r3
}
 8006f8c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f8e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f94:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f96:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f9a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fa0:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8006fa2:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fa4:	e7e5      	b.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 8006fa6:	2002      	movs	r0, #2
}
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40012c00 	.word	0x40012c00
 8006fb0:	40000400 	.word	0x40000400

08006fb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fb4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d045      	beq.n	8007048 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8006fbc:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fbe:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8006fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fca:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fcc:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fd2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fd8:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fda:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fe0:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fe2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fe8:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fea:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ff0:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ff2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ff4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ff8:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ffa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ffe:	4c13      	ldr	r4, [pc, #76]	; (800704c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8007000:	42a0      	cmp	r0, r4
 8007002:	d00b      	beq.n	800701c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8007004:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007008:	42a0      	cmp	r0, r4
 800700a:	d007      	beq.n	800701c <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800700c:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800700e:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8007010:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8007014:	4608      	mov	r0, r1
}
 8007016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800701a:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800701c:	69cc      	ldr	r4, [r1, #28]
 800701e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007022:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007024:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8007026:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800702a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800702e:	6a0c      	ldr	r4, [r1, #32]
 8007030:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007034:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007036:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007038:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800703a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800703e:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007040:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007044:	430b      	orrs	r3, r1
 8007046:	e7e1      	b.n	800700c <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8007048:	2002      	movs	r0, #2
}
 800704a:	4770      	bx	lr
 800704c:	40012c00 	.word	0x40012c00

08007050 <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8007050:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d04b      	beq.n	80070f0 <HAL_TIMEx_ConfigBreakInput+0xa0>

  switch (sBreakInputConfig->Source)
 8007058:	6813      	ldr	r3, [r2, #0]
 800705a:	3b01      	subs	r3, #1
 800705c:	2b0f      	cmp	r3, #15
{
 800705e:	b4f0      	push	{r4, r5, r6, r7}
 8007060:	d824      	bhi.n	80070ac <HAL_TIMEx_ConfigBreakInput+0x5c>
 8007062:	4c25      	ldr	r4, [pc, #148]	; (80070f8 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8007064:	4e25      	ldr	r6, [pc, #148]	; (80070fc <HAL_TIMEx_ConfigBreakInput+0xac>)
 8007066:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800706a:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
 800706e:	4c24      	ldr	r4, [pc, #144]	; (8007100 <HAL_TIMEx_ConfigBreakInput+0xb0>)
 8007070:	4e24      	ldr	r6, [pc, #144]	; (8007104 <HAL_TIMEx_ConfigBreakInput+0xb4>)
 8007072:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8007076:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 800707a:	2901      	cmp	r1, #1
 800707c:	d01c      	beq.n	80070b8 <HAL_TIMEx_ConfigBreakInput+0x68>
 800707e:	2902      	cmp	r1, #2
 8007080:	d12f      	bne.n	80070e2 <HAL_TIMEx_ConfigBreakInput+0x92>
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007082:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF2;
 8007084:	6806      	ldr	r6, [r0, #0]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007086:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007088:	fa01 f30c 	lsl.w	r3, r1, ip
      tmporx = htim->Instance->AF2;
 800708c:	6e71      	ldr	r1, [r6, #100]	; 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800708e:	404b      	eors	r3, r1
 8007090:	402b      	ands	r3, r5
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007092:	40ba      	lsls	r2, r7
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8007094:	404b      	eors	r3, r1
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8007096:	405a      	eors	r2, r3
 8007098:	4014      	ands	r4, r2
 800709a:	4063      	eors	r3, r4
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 800709c:	2200      	movs	r2, #0
      htim->Instance->AF2 = tmporx;
 800709e:	6673      	str	r3, [r6, #100]	; 0x64
  __HAL_UNLOCK(htim);
 80070a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80070a4:	2300      	movs	r3, #0

  return status;
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	bcf0      	pop	{r4, r5, r6, r7}
 80070aa:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 80070ac:	2700      	movs	r7, #0
  switch (BreakInput)
 80070ae:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 80070b0:	46bc      	mov	ip, r7
 80070b2:	463c      	mov	r4, r7
 80070b4:	463d      	mov	r5, r7
  switch (BreakInput)
 80070b6:	d1e2      	bne.n	800707e <HAL_TIMEx_ConfigBreakInput+0x2e>
      tmporx = htim->Instance->AF1;
 80070b8:	6806      	ldr	r6, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80070ba:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 80070bc:	6e31      	ldr	r1, [r6, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80070be:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80070c0:	fa03 f30c 	lsl.w	r3, r3, ip
 80070c4:	404b      	eors	r3, r1
 80070c6:	402b      	ands	r3, r5
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80070c8:	40ba      	lsls	r2, r7
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80070ca:	404b      	eors	r3, r1
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80070cc:	405a      	eors	r2, r3
 80070ce:	4014      	ands	r4, r2
 80070d0:	4063      	eors	r3, r4
  __HAL_UNLOCK(htim);
 80070d2:	2200      	movs	r2, #0
      htim->Instance->AF1 = tmporx;
 80070d4:	6633      	str	r3, [r6, #96]	; 0x60
  __HAL_UNLOCK(htim);
 80070d6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	bcf0      	pop	{r4, r5, r6, r7}
 80070e0:	4770      	bx	lr
  __HAL_UNLOCK(htim);
 80070e2:	2200      	movs	r2, #0
 80070e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (BreakInput)
 80070e8:	2301      	movs	r3, #1
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	bcf0      	pop	{r4, r5, r6, r7}
 80070ee:	4770      	bx	lr
  __HAL_LOCK(htim);
 80070f0:	2302      	movs	r3, #2
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	0800a3d0 	.word	0x0800a3d0
 80070fc:	0800a450 	.word	0x0800a450
 8007100:	0800a410 	.word	0x0800a410
 8007104:	0800a490 	.word	0x0800a490

08007108 <HAL_TIMEx_CommutCallback>:
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop

0800710c <HAL_TIMEx_BreakCallback>:
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop

08007110 <HAL_TIMEx_Break2Callback>:
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop

08007114 <HAL_TIMEx_EncoderIndexCallback>:
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop

08007118 <HAL_TIMEx_DirectionChangeCallback>:
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop

0800711c <HAL_TIMEx_IndexErrorCallback>:
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop

08007120 <HAL_TIMEx_TransitionErrorCallback>:
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop

08007124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007128:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800712a:	6882      	ldr	r2, [r0, #8]
 800712c:	6900      	ldr	r0, [r0, #16]
 800712e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007130:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007132:	4302      	orrs	r2, r0
 8007134:	430a      	orrs	r2, r1
 8007136:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007138:	49a6      	ldr	r1, [pc, #664]	; (80073d4 <UART_SetConfig+0x2b0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800713a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800713c:	4029      	ands	r1, r5
 800713e:	430a      	orrs	r2, r1
 8007140:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	68e1      	ldr	r1, [r4, #12]
 8007146:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800714a:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800714c:	49a2      	ldr	r1, [pc, #648]	; (80073d8 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800714e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007150:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007152:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007154:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007156:	d06b      	beq.n	8007230 <UART_SetConfig+0x10c>
    tmpreg |= huart->Init.OneBitSampling;
 8007158:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800715a:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800715e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8007162:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007164:	430a      	orrs	r2, r1
 8007166:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800716c:	f022 020f 	bic.w	r2, r2, #15
 8007170:	430a      	orrs	r2, r1
 8007172:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007174:	4a99      	ldr	r2, [pc, #612]	; (80073dc <UART_SetConfig+0x2b8>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d012      	beq.n	80071a0 <UART_SetConfig+0x7c>
 800717a:	4a99      	ldr	r2, [pc, #612]	; (80073e0 <UART_SetConfig+0x2bc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d036      	beq.n	80071ee <UART_SetConfig+0xca>
 8007180:	4a98      	ldr	r2, [pc, #608]	; (80073e4 <UART_SetConfig+0x2c0>)
 8007182:	4293      	cmp	r3, r2
 8007184:	f000 80fa 	beq.w	800737c <UART_SetConfig+0x258>
 8007188:	4a97      	ldr	r2, [pc, #604]	; (80073e8 <UART_SetConfig+0x2c4>)
 800718a:	4293      	cmp	r3, r2
 800718c:	f000 80a5 	beq.w	80072da <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8007190:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007192:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8007194:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8007198:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 800719c:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 800719e:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071a0:	4b92      	ldr	r3, [pc, #584]	; (80073ec <UART_SetConfig+0x2c8>)
 80071a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	3b01      	subs	r3, #1
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	f240 808e 	bls.w	80072ce <UART_SetConfig+0x1aa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071b2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80071b6:	f000 80fe 	beq.w	80073b6 <UART_SetConfig+0x292>
        pclk = HAL_RCC_GetPCLK2Freq();
 80071ba:	f7fe fe5f 	bl	8005e7c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80071be:	2800      	cmp	r0, #0
 80071c0:	f000 80da 	beq.w	8007378 <UART_SetConfig+0x254>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80071c6:	6862      	ldr	r2, [r4, #4]
 80071c8:	4b89      	ldr	r3, [pc, #548]	; (80073f0 <UART_SetConfig+0x2cc>)
 80071ca:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80071ce:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d2:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071d6:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80071da:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071de:	f1a3 0210 	sub.w	r2, r3, #16
 80071e2:	428a      	cmp	r2, r1
 80071e4:	d8d4      	bhi.n	8007190 <UART_SetConfig+0x6c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071e6:	6822      	ldr	r2, [r4, #0]
 80071e8:	2000      	movs	r0, #0
 80071ea:	60d3      	str	r3, [r2, #12]
 80071ec:	e7d1      	b.n	8007192 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071ee:	4b7f      	ldr	r3, [pc, #508]	; (80073ec <UART_SetConfig+0x2c8>)
 80071f0:	4a80      	ldr	r2, [pc, #512]	; (80073f4 <UART_SetConfig+0x2d0>)
 80071f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f6:	f003 030c 	and.w	r3, r3, #12
 80071fa:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071fc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007200:	d07d      	beq.n	80072fe <UART_SetConfig+0x1da>
    switch (clocksource)
 8007202:	2b08      	cmp	r3, #8
 8007204:	d8c4      	bhi.n	8007190 <UART_SetConfig+0x6c>
 8007206:	a201      	add	r2, pc, #4	; (adr r2, 800720c <UART_SetConfig+0xe8>)
 8007208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720c:	08007337 	.word	0x08007337
 8007210:	080071bb 	.word	0x080071bb
 8007214:	080073b3 	.word	0x080073b3
 8007218:	08007191 	.word	0x08007191
 800721c:	080072f9 	.word	0x080072f9
 8007220:	08007191 	.word	0x08007191
 8007224:	08007191 	.word	0x08007191
 8007228:	08007191 	.word	0x08007191
 800722c:	080073a3 	.word	0x080073a3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007230:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8007234:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007238:	430a      	orrs	r2, r1
 800723a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800723c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723e:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007240:	486a      	ldr	r0, [pc, #424]	; (80073ec <UART_SetConfig+0x2c8>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007242:	f022 020f 	bic.w	r2, r2, #15
 8007246:	430a      	orrs	r2, r1
 8007248:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800724a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800724e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007256:	f000 80aa 	beq.w	80073ae <UART_SetConfig+0x28a>
 800725a:	d80b      	bhi.n	8007274 <UART_SetConfig+0x150>
 800725c:	2b00      	cmp	r3, #0
 800725e:	d039      	beq.n	80072d4 <UART_SetConfig+0x1b0>
 8007260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007264:	d194      	bne.n	8007190 <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8007266:	f7fe fca7 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800726a:	2800      	cmp	r0, #0
 800726c:	f000 8084 	beq.w	8007378 <UART_SetConfig+0x254>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007270:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007272:	e004      	b.n	800727e <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007274:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007278:	d18a      	bne.n	8007190 <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 800727a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800727e:	4b5c      	ldr	r3, [pc, #368]	; (80073f0 <UART_SetConfig+0x2cc>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007280:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007282:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8007286:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800728a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800728e:	4299      	cmp	r1, r3
 8007290:	f63f af7e 	bhi.w	8007190 <UART_SetConfig+0x6c>
 8007294:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8007298:	f63f af7a 	bhi.w	8007190 <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800729c:	2300      	movs	r3, #0
 800729e:	4619      	mov	r1, r3
 80072a0:	f7f8 ffbe 	bl	8000220 <__aeabi_uldivmod>
 80072a4:	0209      	lsls	r1, r1, #8
 80072a6:	0203      	lsls	r3, r0, #8
 80072a8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80072ac:	0868      	lsrs	r0, r5, #1
 80072ae:	1818      	adds	r0, r3, r0
 80072b0:	462a      	mov	r2, r5
 80072b2:	f04f 0300 	mov.w	r3, #0
 80072b6:	f141 0100 	adc.w	r1, r1, #0
 80072ba:	f7f8 ffb1 	bl	8000220 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072be:	4a4e      	ldr	r2, [pc, #312]	; (80073f8 <UART_SetConfig+0x2d4>)
 80072c0:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80072c4:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072c6:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072c8:	f63f af62 	bhi.w	8007190 <UART_SetConfig+0x6c>
 80072cc:	e78b      	b.n	80071e6 <UART_SetConfig+0xc2>
 80072ce:	4a4b      	ldr	r2, [pc, #300]	; (80073fc <UART_SetConfig+0x2d8>)
 80072d0:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80072d2:	e793      	b.n	80071fc <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80072d4:	f7fe fdc0 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
        break;
 80072d8:	e7c7      	b.n	800726a <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072da:	4b44      	ldr	r3, [pc, #272]	; (80073ec <UART_SetConfig+0x2c8>)
 80072dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072e4:	2b80      	cmp	r3, #128	; 0x80
 80072e6:	d06e      	beq.n	80073c6 <UART_SetConfig+0x2a2>
 80072e8:	d85e      	bhi.n	80073a8 <UART_SetConfig+0x284>
 80072ea:	b30b      	cbz	r3, 8007330 <UART_SetConfig+0x20c>
 80072ec:	2b40      	cmp	r3, #64	; 0x40
 80072ee:	f47f af4f 	bne.w	8007190 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072f2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80072f6:	d021      	beq.n	800733c <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 80072f8:	f7fe fc5e 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
        break;
 80072fc:	e75f      	b.n	80071be <UART_SetConfig+0x9a>
    switch (clocksource)
 80072fe:	2b08      	cmp	r3, #8
 8007300:	f63f af46 	bhi.w	8007190 <UART_SetConfig+0x6c>
 8007304:	a201      	add	r2, pc, #4	; (adr r2, 800730c <UART_SetConfig+0x1e8>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	080073bd 	.word	0x080073bd
 8007310:	080073b7 	.word	0x080073b7
 8007314:	080073c3 	.word	0x080073c3
 8007318:	08007191 	.word	0x08007191
 800731c:	0800733d 	.word	0x0800733d
 8007320:	08007191 	.word	0x08007191
 8007324:	08007191 	.word	0x08007191
 8007328:	08007191 	.word	0x08007191
 800732c:	08007345 	.word	0x08007345
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007330:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007334:	d042      	beq.n	80073bc <UART_SetConfig+0x298>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007336:	f7fe fd8f 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
        break;
 800733a:	e740      	b.n	80071be <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetSysClockFreq();
 800733c:	f7fe fc3c 	bl	8005bb8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8007340:	b1d0      	cbz	r0, 8007378 <UART_SetConfig+0x254>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007342:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007344:	6862      	ldr	r2, [r4, #4]
 8007346:	4b2a      	ldr	r3, [pc, #168]	; (80073f0 <UART_SetConfig+0x2cc>)
 8007348:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800734c:	fbb0 f0f1 	udiv	r0, r0, r1
 8007350:	0853      	lsrs	r3, r2, #1
 8007352:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007356:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800735a:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800735e:	f1a0 0210 	sub.w	r2, r0, #16
 8007362:	429a      	cmp	r2, r3
 8007364:	f63f af14 	bhi.w	8007190 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007368:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 800736c:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800736e:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007370:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8007374:	4318      	orrs	r0, r3
 8007376:	60d0      	str	r0, [r2, #12]
 8007378:	2000      	movs	r0, #0
 800737a:	e70a      	b.n	8007192 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800737c:	4b1b      	ldr	r3, [pc, #108]	; (80073ec <UART_SetConfig+0x2c8>)
 800737e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007382:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007386:	2b20      	cmp	r3, #32
 8007388:	d01d      	beq.n	80073c6 <UART_SetConfig+0x2a2>
 800738a:	d804      	bhi.n	8007396 <UART_SetConfig+0x272>
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0cf      	beq.n	8007330 <UART_SetConfig+0x20c>
 8007390:	2b10      	cmp	r3, #16
 8007392:	d0ae      	beq.n	80072f2 <UART_SetConfig+0x1ce>
 8007394:	e6fc      	b.n	8007190 <UART_SetConfig+0x6c>
 8007396:	2b30      	cmp	r3, #48	; 0x30
 8007398:	f47f aefa 	bne.w	8007190 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800739c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80073a0:	d0d0      	beq.n	8007344 <UART_SetConfig+0x220>
    switch (clocksource)
 80073a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80073a6:	e70e      	b.n	80071c6 <UART_SetConfig+0xa2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073a8:	2bc0      	cmp	r3, #192	; 0xc0
 80073aa:	d0f7      	beq.n	800739c <UART_SetConfig+0x278>
 80073ac:	e6f0      	b.n	8007190 <UART_SetConfig+0x6c>
 80073ae:	4814      	ldr	r0, [pc, #80]	; (8007400 <UART_SetConfig+0x2dc>)
 80073b0:	e765      	b.n	800727e <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 80073b2:	4813      	ldr	r0, [pc, #76]	; (8007400 <UART_SetConfig+0x2dc>)
 80073b4:	e707      	b.n	80071c6 <UART_SetConfig+0xa2>
        pclk = HAL_RCC_GetPCLK2Freq();
 80073b6:	f7fe fd61 	bl	8005e7c <HAL_RCC_GetPCLK2Freq>
        break;
 80073ba:	e7c1      	b.n	8007340 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80073bc:	f7fe fd4c 	bl	8005e58 <HAL_RCC_GetPCLK1Freq>
        break;
 80073c0:	e7be      	b.n	8007340 <UART_SetConfig+0x21c>
        pclk = (uint32_t) HSI_VALUE;
 80073c2:	480f      	ldr	r0, [pc, #60]	; (8007400 <UART_SetConfig+0x2dc>)
 80073c4:	e7be      	b.n	8007344 <UART_SetConfig+0x220>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073c6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80073ca:	480d      	ldr	r0, [pc, #52]	; (8007400 <UART_SetConfig+0x2dc>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073cc:	f47f aefb 	bne.w	80071c6 <UART_SetConfig+0xa2>
 80073d0:	e7b8      	b.n	8007344 <UART_SetConfig+0x220>
 80073d2:	bf00      	nop
 80073d4:	cfff69f3 	.word	0xcfff69f3
 80073d8:	40008000 	.word	0x40008000
 80073dc:	40013800 	.word	0x40013800
 80073e0:	40004400 	.word	0x40004400
 80073e4:	40004800 	.word	0x40004800
 80073e8:	40004c00 	.word	0x40004c00
 80073ec:	40021000 	.word	0x40021000
 80073f0:	0800a4e4 	.word	0x0800a4e4
 80073f4:	0800a4d4 	.word	0x0800a4d4
 80073f8:	000ffcff 	.word	0x000ffcff
 80073fc:	0800a4d0 	.word	0x0800a4d0
 8007400:	00f42400 	.word	0x00f42400

08007404 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007404:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007406:	07da      	lsls	r2, r3, #31
{
 8007408:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800740a:	d506      	bpl.n	800741a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800740c:	6801      	ldr	r1, [r0, #0]
 800740e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007410:	684a      	ldr	r2, [r1, #4]
 8007412:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007416:	4322      	orrs	r2, r4
 8007418:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800741a:	079c      	lsls	r4, r3, #30
 800741c:	d506      	bpl.n	800742c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800741e:	6801      	ldr	r1, [r0, #0]
 8007420:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007422:	684a      	ldr	r2, [r1, #4]
 8007424:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007428:	4322      	orrs	r2, r4
 800742a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800742c:	0759      	lsls	r1, r3, #29
 800742e:	d506      	bpl.n	800743e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007430:	6801      	ldr	r1, [r0, #0]
 8007432:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007434:	684a      	ldr	r2, [r1, #4]
 8007436:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800743a:	4322      	orrs	r2, r4
 800743c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800743e:	071a      	lsls	r2, r3, #28
 8007440:	d506      	bpl.n	8007450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007442:	6801      	ldr	r1, [r0, #0]
 8007444:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007446:	684a      	ldr	r2, [r1, #4]
 8007448:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800744c:	4322      	orrs	r2, r4
 800744e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007450:	06dc      	lsls	r4, r3, #27
 8007452:	d506      	bpl.n	8007462 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007454:	6801      	ldr	r1, [r0, #0]
 8007456:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007458:	688a      	ldr	r2, [r1, #8]
 800745a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800745e:	4322      	orrs	r2, r4
 8007460:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007462:	0699      	lsls	r1, r3, #26
 8007464:	d506      	bpl.n	8007474 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007466:	6801      	ldr	r1, [r0, #0]
 8007468:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800746a:	688a      	ldr	r2, [r1, #8]
 800746c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007470:	4322      	orrs	r2, r4
 8007472:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007474:	065a      	lsls	r2, r3, #25
 8007476:	d509      	bpl.n	800748c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007478:	6801      	ldr	r1, [r0, #0]
 800747a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800747c:	684a      	ldr	r2, [r1, #4]
 800747e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007482:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007484:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007488:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800748a:	d00b      	beq.n	80074a4 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800748c:	061b      	lsls	r3, r3, #24
 800748e:	d506      	bpl.n	800749e <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007490:	6802      	ldr	r2, [r0, #0]
 8007492:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007494:	6853      	ldr	r3, [r2, #4]
 8007496:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800749a:	430b      	orrs	r3, r1
 800749c:	6053      	str	r3, [r2, #4]
  }
}
 800749e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074a4:	684a      	ldr	r2, [r1, #4]
 80074a6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80074a8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80074ac:	4322      	orrs	r2, r4
 80074ae:	604a      	str	r2, [r1, #4]
 80074b0:	e7ec      	b.n	800748c <UART_AdvFeatureConfig+0x88>
 80074b2:	bf00      	nop

080074b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074bc:	6804      	ldr	r4, [r0, #0]
{
 80074be:	4607      	mov	r7, r0
 80074c0:	460e      	mov	r6, r1
 80074c2:	4615      	mov	r5, r2
 80074c4:	4699      	mov	r9, r3
 80074c6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80074ca:	d10a      	bne.n	80074e2 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074cc:	69e3      	ldr	r3, [r4, #28]
 80074ce:	ea36 0303 	bics.w	r3, r6, r3
 80074d2:	bf0c      	ite	eq
 80074d4:	2301      	moveq	r3, #1
 80074d6:	2300      	movne	r3, #0
 80074d8:	429d      	cmp	r5, r3
 80074da:	d0f7      	beq.n	80074cc <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80074dc:	2000      	movs	r0, #0
}
 80074de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074e2:	69e3      	ldr	r3, [r4, #28]
 80074e4:	ea36 0303 	bics.w	r3, r6, r3
 80074e8:	bf0c      	ite	eq
 80074ea:	2301      	moveq	r3, #1
 80074ec:	2300      	movne	r3, #0
 80074ee:	42ab      	cmp	r3, r5
 80074f0:	d1f4      	bne.n	80074dc <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074f2:	f7fc ff99 	bl	8004428 <HAL_GetTick>
 80074f6:	eba0 0009 	sub.w	r0, r0, r9
 80074fa:	4540      	cmp	r0, r8
 80074fc:	d833      	bhi.n	8007566 <UART_WaitOnFlagUntilTimeout+0xb2>
 80074fe:	f1b8 0f00 	cmp.w	r8, #0
 8007502:	d030      	beq.n	8007566 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007504:	683c      	ldr	r4, [r7, #0]
 8007506:	6823      	ldr	r3, [r4, #0]
 8007508:	0759      	lsls	r1, r3, #29
 800750a:	4622      	mov	r2, r4
 800750c:	d5db      	bpl.n	80074c6 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800750e:	69e3      	ldr	r3, [r4, #28]
 8007510:	051b      	lsls	r3, r3, #20
 8007512:	d5d8      	bpl.n	80074c6 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007514:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007518:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800751e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007522:	e844 3100 	strex	r1, r3, [r4]
 8007526:	b139      	cbz	r1, 8007538 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007528:	e852 3f00 	ldrex	r3, [r2]
 800752c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007530:	e842 3100 	strex	r1, r3, [r2]
 8007534:	2900      	cmp	r1, #0
 8007536:	d1f7      	bne.n	8007528 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	f102 0308 	add.w	r3, r2, #8
 800753c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007540:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007544:	f102 0008 	add.w	r0, r2, #8
 8007548:	e840 3100 	strex	r1, r3, [r0]
 800754c:	2900      	cmp	r1, #0
 800754e:	d1f3      	bne.n	8007538 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8007550:	2320      	movs	r3, #32
 8007552:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8007556:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800755a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800755e:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007560:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8007564:	e7bb      	b.n	80074de <UART_WaitOnFlagUntilTimeout+0x2a>
 8007566:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800756c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	e842 3100 	strex	r1, r3, [r2]
 8007574:	2900      	cmp	r1, #0
 8007576:	d1f7      	bne.n	8007568 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	f102 0308 	add.w	r3, r2, #8
 800757c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007580:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	f102 0008 	add.w	r0, r2, #8
 8007588:	e840 3100 	strex	r1, r3, [r0]
 800758c:	2900      	cmp	r1, #0
 800758e:	d1f3      	bne.n	8007578 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 8007590:	2320      	movs	r3, #32
 8007592:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8007596:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800759a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800759e:	2003      	movs	r0, #3
 80075a0:	e79d      	b.n	80074de <UART_WaitOnFlagUntilTimeout+0x2a>
 80075a2:	bf00      	nop

080075a4 <HAL_UART_Init>:
  if (huart == NULL)
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d066      	beq.n	8007676 <HAL_UART_Init+0xd2>
{
 80075a8:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80075aa:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80075ae:	b082      	sub	sp, #8
 80075b0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d04c      	beq.n	8007650 <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 80075b6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80075b8:	2324      	movs	r3, #36	; 0x24
 80075ba:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 80075be:	6813      	ldr	r3, [r2, #0]
 80075c0:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075c4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80075c6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075c8:	f7ff fdac 	bl	8007124 <UART_SetConfig>
 80075cc:	2801      	cmp	r0, #1
 80075ce:	d03c      	beq.n	800764a <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d135      	bne.n	8007642 <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	6859      	ldr	r1, [r3, #4]
 80075da:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 80075de:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075e0:	6899      	ldr	r1, [r3, #8]
 80075e2:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 80075e6:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80075e8:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ea:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 80075ec:	f041 0101 	orr.w	r1, r1, #1
 80075f0:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f2:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80075f6:	f7fc ff17 	bl	8004428 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8007600:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007602:	d40e      	bmi.n	8007622 <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	075b      	lsls	r3, r3, #29
 8007608:	d427      	bmi.n	800765a <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800760a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800760c:	2220      	movs	r2, #32
 800760e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007612:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007616:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 800761a:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800761c:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 800761e:	b002      	add	sp, #8
 8007620:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007622:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	462a      	mov	r2, r5
 800762a:	4603      	mov	r3, r0
 800762c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007630:	4620      	mov	r0, r4
 8007632:	f7ff ff3f 	bl	80074b4 <UART_WaitOnFlagUntilTimeout>
 8007636:	b9e0      	cbnz	r0, 8007672 <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	075b      	lsls	r3, r3, #29
 800763e:	d40c      	bmi.n	800765a <HAL_UART_Init+0xb6>
 8007640:	e7e3      	b.n	800760a <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 8007642:	4620      	mov	r0, r4
 8007644:	f7ff fede 	bl	8007404 <UART_AdvFeatureConfig>
 8007648:	e7c5      	b.n	80075d6 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 800764a:	2001      	movs	r0, #1
}
 800764c:	b002      	add	sp, #8
 800764e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8007650:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8007654:	f7fc fc8e 	bl	8003f74 <HAL_UART_MspInit>
 8007658:	e7ad      	b.n	80075b6 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800765a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	2200      	movs	r2, #0
 8007662:	4633      	mov	r3, r6
 8007664:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007668:	4620      	mov	r0, r4
 800766a:	f7ff ff23 	bl	80074b4 <UART_WaitOnFlagUntilTimeout>
 800766e:	2800      	cmp	r0, #0
 8007670:	d0cb      	beq.n	800760a <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 8007672:	2003      	movs	r0, #3
 8007674:	e7d3      	b.n	800761e <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8007676:	2001      	movs	r0, #1
}
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop

0800767c <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800767c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007680:	2b01      	cmp	r3, #1
 8007682:	d017      	beq.n	80076b4 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007684:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007686:	2324      	movs	r3, #36	; 0x24
{
 8007688:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800768a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800768e:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007690:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007692:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8007694:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007698:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 800769c:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800769e:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076a0:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076a2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80076a6:	2220      	movs	r2, #32
 80076a8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 80076ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80076b0:	4618      	mov	r0, r3
}
 80076b2:	4770      	bx	lr
  __HAL_LOCK(huart);
 80076b4:	2002      	movs	r0, #2
}
 80076b6:	4770      	bx	lr

080076b8 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076b8:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80076bc:	2a01      	cmp	r2, #1
 80076be:	d037      	beq.n	8007730 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80076c0:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076c2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80076c4:	2024      	movs	r0, #36	; 0x24
{
 80076c6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80076c8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076cc:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076ce:	6810      	ldr	r0, [r2, #0]
 80076d0:	f020 0001 	bic.w	r0, r0, #1
 80076d4:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076d6:	6890      	ldr	r0, [r2, #8]
 80076d8:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 80076dc:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076de:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076e0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076e2:	b310      	cbz	r0, 800772a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076e4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076e6:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 80076e8:	4d12      	ldr	r5, [pc, #72]	; (8007734 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076ea:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076ee:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076f2:	4911      	ldr	r1, [pc, #68]	; (8007738 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 80076f4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80076f8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80076fc:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007700:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007704:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007706:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007708:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800770c:	fbb1 f1f5 	udiv	r1, r1, r5
 8007710:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8007714:	2100      	movs	r1, #0
 8007716:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800771a:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800771c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800771e:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8007722:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007724:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8007728:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800772a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800772c:	4608      	mov	r0, r1
 800772e:	e7ef      	b.n	8007710 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007730:	2002      	movs	r0, #2
}
 8007732:	4770      	bx	lr
 8007734:	0800a4fc 	.word	0x0800a4fc
 8007738:	0800a504 	.word	0x0800a504

0800773c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800773c:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8007740:	2a01      	cmp	r2, #1
 8007742:	d037      	beq.n	80077b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8007744:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007746:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007748:	2024      	movs	r0, #36	; 0x24
{
 800774a:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800774c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007750:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007752:	6810      	ldr	r0, [r2, #0]
 8007754:	f020 0001 	bic.w	r0, r0, #1
 8007758:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800775a:	6890      	ldr	r0, [r2, #8]
 800775c:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8007760:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007762:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007764:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007766:	b310      	cbz	r0, 80077ae <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007768:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800776a:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800776c:	4d12      	ldr	r5, [pc, #72]	; (80077b8 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800776e:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007772:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007776:	4911      	ldr	r1, [pc, #68]	; (80077bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007778:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800777c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007780:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007784:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007788:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800778a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800778c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007790:	fbb1 f1f5 	udiv	r1, r1, r5
 8007794:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8007798:	2100      	movs	r1, #0
 800779a:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800779e:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077a0:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80077a2:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80077a6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80077a8:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80077ac:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80077ae:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80077b0:	4608      	mov	r0, r1
 80077b2:	e7ef      	b.n	8007794 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80077b4:	2002      	movs	r0, #2
}
 80077b6:	4770      	bx	lr
 80077b8:	0800a4fc 	.word	0x0800a4fc
 80077bc:	0800a504 	.word	0x0800a504

080077c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80077c0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80077c2:	f000 fe35 	bl	8008430 <vTaskStartScheduler>
  
  return osOK;
}
 80077c6:	2000      	movs	r0, #0
 80077c8:	bd08      	pop	{r3, pc}
 80077ca:	bf00      	nop

080077cc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80077cc:	b510      	push	{r4, lr}
 80077ce:	4684      	mov	ip, r0
 80077d0:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077d2:	f8bc 2010 	ldrh.w	r2, [ip, #16]
 80077d6:	f8dc 1000 	ldr.w	r1, [ip]
 80077da:	f9bc c008 	ldrsh.w	ip, [ip, #8]
 80077de:	6840      	ldr	r0, [r0, #4]
{
 80077e0:	b084      	sub	sp, #16
  if (priority != osPriorityError) {
 80077e2:	f1bc 0f84 	cmp.w	ip, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80077e6:	bf14      	ite	ne
 80077e8:	f10c 0403 	addne.w	r4, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80077ec:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077ee:	9400      	str	r4, [sp, #0]
 80077f0:	ac03      	add	r4, sp, #12
 80077f2:	9401      	str	r4, [sp, #4]
 80077f4:	f000 fcbc 	bl	8008170 <xTaskCreate>
 80077f8:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80077fa:	bf0c      	ite	eq
 80077fc:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80077fe:	2000      	movne	r0, #0
}
 8007800:	b004      	add	sp, #16
 8007802:	bd10      	pop	{r4, pc}

08007804 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007808:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800780a:	f000 fef7 	bl	80085fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800780e:	4b52      	ldr	r3, [pc, #328]	; (8007958 <pvPortMalloc+0x154>)
 8007810:	681d      	ldr	r5, [r3, #0]
 8007812:	2d00      	cmp	r5, #0
 8007814:	d06e      	beq.n	80078f4 <pvPortMalloc+0xf0>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007816:	4b51      	ldr	r3, [pc, #324]	; (800795c <pvPortMalloc+0x158>)
 8007818:	681f      	ldr	r7, [r3, #0]
 800781a:	423e      	tst	r6, r7
 800781c:	d12e      	bne.n	800787c <pvPortMalloc+0x78>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800781e:	b36e      	cbz	r6, 800787c <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 8007820:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007824:	0776      	lsls	r6, r6, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007826:	bf1c      	itt	ne
 8007828:	f024 0407 	bicne.w	r4, r4, #7
 800782c:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800782e:	b32c      	cbz	r4, 800787c <pvPortMalloc+0x78>
 8007830:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8007970 <pvPortMalloc+0x16c>
 8007834:	f8dc 6000 	ldr.w	r6, [ip]
 8007838:	42a6      	cmp	r6, r4
 800783a:	d31f      	bcc.n	800787c <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 800783c:	4848      	ldr	r0, [pc, #288]	; (8007960 <pvPortMalloc+0x15c>)
 800783e:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007840:	e003      	b.n	800784a <pvPortMalloc+0x46>
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	b122      	cbz	r2, 8007850 <pvPortMalloc+0x4c>
 8007846:	4618      	mov	r0, r3
 8007848:	4613      	mov	r3, r2
 800784a:	6859      	ldr	r1, [r3, #4]
 800784c:	42a1      	cmp	r1, r4
 800784e:	d3f8      	bcc.n	8007842 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007850:	42ab      	cmp	r3, r5
 8007852:	d013      	beq.n	800787c <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007854:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007856:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007858:	f858 eb08 	ldr.w	lr, [r8], #8
 800785c:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007860:	2a10      	cmp	r2, #16
 8007862:	d929      	bls.n	80078b8 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007864:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007866:	0748      	lsls	r0, r1, #29
 8007868:	d00f      	beq.n	800788a <pvPortMalloc+0x86>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	e7fe      	b.n	800787a <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800787c:	f000 fec6 	bl	800860c <xTaskResumeAll>
 8007880:	f04f 0800 	mov.w	r8, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8007884:	4640      	mov	r0, r8
 8007886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800788a:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800788c:	4a34      	ldr	r2, [pc, #208]	; (8007960 <pvPortMalloc+0x15c>)
						pxBlock->xBlockSize = xWantedSize;
 800788e:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007890:	4614      	mov	r4, r2
 8007892:	6812      	ldr	r2, [r2, #0]
 8007894:	4291      	cmp	r1, r2
 8007896:	d8fb      	bhi.n	8007890 <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007898:	6860      	ldr	r0, [r4, #4]
 800789a:	eb04 0e00 	add.w	lr, r4, r0
 800789e:	4571      	cmp	r1, lr
 80078a0:	d04a      	beq.n	8007938 <pvPortMalloc+0x134>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078a2:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80078a6:	eb01 000e 	add.w	r0, r1, lr
 80078aa:	4282      	cmp	r2, r0
 80078ac:	d04b      	beq.n	8007946 <pvPortMalloc+0x142>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078ae:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078b0:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078b2:	bf18      	it	ne
 80078b4:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078b6:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078b8:	4a2a      	ldr	r2, [pc, #168]	; (8007964 <pvPortMalloc+0x160>)
 80078ba:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078bc:	1a76      	subs	r6, r6, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078be:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078c0:	bf38      	it	cc
 80078c2:	6016      	strcc	r6, [r2, #0]
					xNumberOfSuccessfulAllocations++;
 80078c4:	4a28      	ldr	r2, [pc, #160]	; (8007968 <pvPortMalloc+0x164>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078c6:	f8cc 6000 	str.w	r6, [ip]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078ca:	4339      	orrs	r1, r7
					pxBlock->pxNextFreeBlock = NULL;
 80078cc:	2000      	movs	r0, #0
 80078ce:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 80078d2:	6813      	ldr	r3, [r2, #0]
 80078d4:	3301      	adds	r3, #1
 80078d6:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 80078d8:	f000 fe98 	bl	800860c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078dc:	f018 0f07 	tst.w	r8, #7
 80078e0:	d0d0      	beq.n	8007884 <pvPortMalloc+0x80>
 80078e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	e7fe      	b.n	80078f2 <pvPortMalloc+0xee>
	uxAddress = ( size_t ) ucHeap;
 80078f4:	491d      	ldr	r1, [pc, #116]	; (800796c <pvPortMalloc+0x168>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078f6:	4c19      	ldr	r4, [pc, #100]	; (800795c <pvPortMalloc+0x158>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078f8:	074f      	lsls	r7, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078fa:	bf14      	ite	ne
 80078fc:	1dca      	addne	r2, r1, #7
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078fe:	460a      	moveq	r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007900:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
	uxAddress -= xHeapStructSize;
 8007904:	f1a1 0508 	sub.w	r5, r1, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007908:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800790c:	bf18      	it	ne
 800790e:	f022 0207 	bicne.w	r2, r2, #7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007912:	4914      	ldr	r1, [pc, #80]	; (8007964 <pvPortMalloc+0x160>)
	pxEnd = ( void * ) uxAddress;
 8007914:	601d      	str	r5, [r3, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007916:	4610      	mov	r0, r2
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007918:	1aab      	subs	r3, r5, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800791a:	4a15      	ldr	r2, [pc, #84]	; (8007970 <pvPortMalloc+0x16c>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800791c:	600b      	str	r3, [r1, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800791e:	4910      	ldr	r1, [pc, #64]	; (8007960 <pvPortMalloc+0x15c>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007920:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007922:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 8007926:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007928:	6008      	str	r0, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800792a:	604a      	str	r2, [r1, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800792c:	6027      	str	r7, [r4, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800792e:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007932:	e9c0 5300 	strd	r5, r3, [r0]
}
 8007936:	e770      	b.n	800781a <pvPortMalloc+0x16>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007938:	6849      	ldr	r1, [r1, #4]
 800793a:	eb00 0e01 	add.w	lr, r0, r1
 800793e:	f8c4 e004 	str.w	lr, [r4, #4]
		pxBlockToInsert = pxIterator;
 8007942:	4621      	mov	r1, r4
 8007944:	e7af      	b.n	80078a6 <pvPortMalloc+0xa2>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007946:	42aa      	cmp	r2, r5
 8007948:	d0b1      	beq.n	80078ae <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800794a:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800794c:	6812      	ldr	r2, [r2, #0]
 800794e:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007950:	4470      	add	r0, lr
 8007952:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007954:	e7ac      	b.n	80078b0 <pvPortMalloc+0xac>
 8007956:	bf00      	nop
 8007958:	200019dc 	.word	0x200019dc
 800795c:	200025e0 	.word	0x200025e0
 8007960:	200025f4 	.word	0x200025f4
 8007964:	200025e8 	.word	0x200025e8
 8007968:	200025ec 	.word	0x200025ec
 800796c:	200019e0 	.word	0x200019e0
 8007970:	200025e4 	.word	0x200025e4

08007974 <vPortFree>:
	if( pv != NULL )
 8007974:	b1d0      	cbz	r0, 80079ac <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007976:	4a2b      	ldr	r2, [pc, #172]	; (8007a24 <vPortFree+0xb0>)
 8007978:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800797c:	6812      	ldr	r2, [r2, #0]
 800797e:	4213      	tst	r3, r2
 8007980:	d00b      	beq.n	800799a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007982:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007986:	b191      	cbz	r1, 80079ae <vPortFree+0x3a>
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	e7fe      	b.n	8007998 <vPortFree+0x24>
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079aa:	e7fe      	b.n	80079aa <vPortFree+0x36>
 80079ac:	4770      	bx	lr
{
 80079ae:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079b0:	ea23 0302 	bic.w	r3, r3, r2
{
 80079b4:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079b6:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079ba:	4c1b      	ldr	r4, [pc, #108]	; (8007a28 <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079bc:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 80079be:	f000 fe1d 	bl	80085fc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079c2:	9801      	ldr	r0, [sp, #4]
 80079c4:	6822      	ldr	r2, [r4, #0]
 80079c6:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079ca:	4b18      	ldr	r3, [pc, #96]	; (8007a2c <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079cc:	440a      	add	r2, r1
		puc -= xHeapStructSize;
 80079ce:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079d0:	6022      	str	r2, [r4, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80079d2:	461a      	mov	r2, r3
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4298      	cmp	r0, r3
 80079d8:	d8fb      	bhi.n	80079d2 <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079da:	6854      	ldr	r4, [r2, #4]
 80079dc:	eb02 0e04 	add.w	lr, r2, r4
 80079e0:	4570      	cmp	r0, lr
 80079e2:	d01a      	beq.n	8007a1a <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079e4:	eb00 0c01 	add.w	ip, r0, r1
 80079e8:	4563      	cmp	r3, ip
 80079ea:	d00c      	beq.n	8007a06 <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079ec:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80079ee:	4282      	cmp	r2, r0
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079f0:	bf18      	it	ne
 80079f2:	6010      	strne	r0, [r2, #0]
					xNumberOfSuccessfulFrees++;
 80079f4:	4a0e      	ldr	r2, [pc, #56]	; (8007a30 <vPortFree+0xbc>)
 80079f6:	6813      	ldr	r3, [r2, #0]
 80079f8:	3301      	adds	r3, #1
 80079fa:	6013      	str	r3, [r2, #0]
}
 80079fc:	b002      	add	sp, #8
 80079fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8007a02:	f000 be03 	b.w	800860c <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007a06:	4c0b      	ldr	r4, [pc, #44]	; (8007a34 <vPortFree+0xc0>)
 8007a08:	6824      	ldr	r4, [r4, #0]
 8007a0a:	42a3      	cmp	r3, r4
 8007a0c:	d0ee      	beq.n	80079ec <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a0e:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007a12:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007a14:	e9c0 3100 	strd	r3, r1, [r0]
 8007a18:	e7e9      	b.n	80079ee <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a1a:	4421      	add	r1, r4
 8007a1c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8007a1e:	4610      	mov	r0, r2
 8007a20:	e7e0      	b.n	80079e4 <vPortFree+0x70>
 8007a22:	bf00      	nop
 8007a24:	200025e0 	.word	0x200025e0
 8007a28:	200025e4 	.word	0x200025e4
 8007a2c:	200025f4 	.word	0x200025f4
 8007a30:	200025f0 	.word	0x200025f0
 8007a34:	200019dc 	.word	0x200019dc

08007a38 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a38:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a3c:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a40:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a42:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a46:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a4a:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop

08007a50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007a50:	2300      	movs	r3, #0
 8007a52:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop

08007a58 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007a58:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007a5e:	6802      	ldr	r2, [r0, #0]
{
 8007a60:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a62:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007a64:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8007a66:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a68:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a6a:	6099      	str	r1, [r3, #8]
}
 8007a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8007a70:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007a72:	6002      	str	r2, [r0, #0]
}
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop

08007a78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a78:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a7a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a7c:	1c6b      	adds	r3, r5, #1
 8007a7e:	d010      	beq.n	8007aa2 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a80:	f100 0308 	add.w	r3, r0, #8
 8007a84:	461c      	mov	r4, r3
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	42aa      	cmp	r2, r5
 8007a8c:	d9fa      	bls.n	8007a84 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007a8e:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a90:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8007a92:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a94:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a96:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a98:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8007a9a:	6108      	str	r0, [r1, #16]
}
 8007a9c:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 8007a9e:	6002      	str	r2, [r0, #0]
}
 8007aa0:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8007aa2:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8007aa4:	6863      	ldr	r3, [r4, #4]
 8007aa6:	e7f2      	b.n	8007a8e <vListInsert+0x16>

08007aa8 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007aa8:	6903      	ldr	r3, [r0, #16]
{
 8007aaa:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007aac:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007ab0:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ab2:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 8007ab4:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007ab6:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ab8:	bf08      	it	eq
 8007aba:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8007abc:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8007abe:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 8007ac2:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8007ac4:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 8007ac6:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007ac8:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8007aca:	6818      	ldr	r0, [r3, #0]
}
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop

08007ad0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ad0:	4808      	ldr	r0, [pc, #32]	; (8007af4 <prvPortStartFirstTask+0x24>)
 8007ad2:	6800      	ldr	r0, [r0, #0]
 8007ad4:	6800      	ldr	r0, [r0, #0]
 8007ad6:	f380 8808 	msr	MSP, r0
 8007ada:	f04f 0000 	mov.w	r0, #0
 8007ade:	f380 8814 	msr	CONTROL, r0
 8007ae2:	b662      	cpsie	i
 8007ae4:	b661      	cpsie	f
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	df00      	svc	0
 8007af0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007af2:	0000      	.short	0x0000
 8007af4:	e000ed08 	.word	0xe000ed08

08007af8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007af8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b08 <vPortEnableVFP+0x10>
 8007afc:	6801      	ldr	r1, [r0, #0]
 8007afe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b02:	6001      	str	r1, [r0, #0]
 8007b04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b06:	0000      	.short	0x0000
 8007b08:	e000ed88 	.word	0xe000ed88

08007b0c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8007b0c:	4b0e      	ldr	r3, [pc, #56]	; (8007b48 <prvTaskExitError+0x3c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
{
 8007b10:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007b12:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8007b14:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8007b16:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007b18:	d008      	beq.n	8007b2c <prvTaskExitError+0x20>
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	e7fe      	b.n	8007b2a <prvTaskExitError+0x1e>
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8007b3c:	9b01      	ldr	r3, [sp, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0fc      	beq.n	8007b3c <prvTaskExitError+0x30>
}
 8007b42:	b002      	add	sp, #8
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	20000434 	.word	0x20000434

08007b4c <pxPortInitialiseStack>:
{
 8007b4c:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b52:	4c07      	ldr	r4, [pc, #28]	; (8007b70 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b54:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b58:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b5c:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b60:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b64:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
 8007b68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b6c:	3844      	subs	r0, #68	; 0x44
 8007b6e:	4770      	bx	lr
 8007b70:	08007b0d 	.word	0x08007b0d
	...

08007b80 <SVC_Handler>:
	__asm volatile (
 8007b80:	4b07      	ldr	r3, [pc, #28]	; (8007ba0 <pxCurrentTCBConst2>)
 8007b82:	6819      	ldr	r1, [r3, #0]
 8007b84:	6808      	ldr	r0, [r1, #0]
 8007b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8a:	f380 8809 	msr	PSP, r0
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f04f 0000 	mov.w	r0, #0
 8007b96:	f380 8811 	msr	BASEPRI, r0
 8007b9a:	4770      	bx	lr
 8007b9c:	f3af 8000 	nop.w

08007ba0 <pxCurrentTCBConst2>:
 8007ba0:	20002604 	.word	0x20002604

08007ba4 <vPortEnterCritical>:
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007bb4:	4a0b      	ldr	r2, [pc, #44]	; (8007be4 <vPortEnterCritical+0x40>)
 8007bb6:	6813      	ldr	r3, [r2, #0]
 8007bb8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8007bba:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8007bbc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007bbe:	d000      	beq.n	8007bc2 <vPortEnterCritical+0x1e>
}
 8007bc0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bc2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007bc6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d0f7      	beq.n	8007bc0 <vPortEnterCritical+0x1c>
 8007bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	e7fe      	b.n	8007be0 <vPortEnterCritical+0x3c>
 8007be2:	bf00      	nop
 8007be4:	20000434 	.word	0x20000434

08007be8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007be8:	4a08      	ldr	r2, [pc, #32]	; (8007c0c <vPortExitCritical+0x24>)
 8007bea:	6813      	ldr	r3, [r2, #0]
 8007bec:	b943      	cbnz	r3, 8007c00 <vPortExitCritical+0x18>
 8007bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	e7fe      	b.n	8007bfe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007c00:	3b01      	subs	r3, #1
 8007c02:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c04:	b90b      	cbnz	r3, 8007c0a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c06:	f383 8811 	msr	BASEPRI, r3
}
 8007c0a:	4770      	bx	lr
 8007c0c:	20000434 	.word	0x20000434

08007c10 <PendSV_Handler>:
	__asm volatile
 8007c10:	f3ef 8009 	mrs	r0, PSP
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	4b15      	ldr	r3, [pc, #84]	; (8007c70 <pxCurrentTCBConst>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	f01e 0f10 	tst.w	lr, #16
 8007c20:	bf08      	it	eq
 8007c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2a:	6010      	str	r0, [r2, #0]
 8007c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c34:	f380 8811 	msr	BASEPRI, r0
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f000 fd04 	bl	800864c <vTaskSwitchContext>
 8007c44:	f04f 0000 	mov.w	r0, #0
 8007c48:	f380 8811 	msr	BASEPRI, r0
 8007c4c:	bc09      	pop	{r0, r3}
 8007c4e:	6819      	ldr	r1, [r3, #0]
 8007c50:	6808      	ldr	r0, [r1, #0]
 8007c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c56:	f01e 0f10 	tst.w	lr, #16
 8007c5a:	bf08      	it	eq
 8007c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c60:	f380 8809 	msr	PSP, r0
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	f3af 8000 	nop.w

08007c70 <pxCurrentTCBConst>:
 8007c70:	20002604 	.word	0x20002604

08007c74 <SysTick_Handler>:
{
 8007c74:	b508      	push	{r3, lr}
	__asm volatile
 8007c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7a:	f383 8811 	msr	BASEPRI, r3
 8007c7e:	f3bf 8f6f 	isb	sy
 8007c82:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007c86:	f000 fcd1 	bl	800862c <xTaskIncrementTick>
 8007c8a:	b128      	cbz	r0, 8007c98 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c94:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f383 8811 	msr	BASEPRI, r3
}
 8007c9e:	bd08      	pop	{r3, pc}

08007ca0 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ca0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ca4:	4a48      	ldr	r2, [pc, #288]	; (8007dc8 <xPortStartScheduler+0x128>)
 8007ca6:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8007caa:	4291      	cmp	r1, r2
 8007cac:	d041      	beq.n	8007d32 <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007cae:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8007cb2:	4b46      	ldr	r3, [pc, #280]	; (8007dcc <xPortStartScheduler+0x12c>)
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d033      	beq.n	8007d20 <xPortStartScheduler+0x80>
{
 8007cb8:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cba:	4b45      	ldr	r3, [pc, #276]	; (8007dd0 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cbc:	4c45      	ldr	r4, [pc, #276]	; (8007dd4 <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cbe:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cc0:	4845      	ldr	r0, [pc, #276]	; (8007dd8 <xPortStartScheduler+0x138>)
{
 8007cc2:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cc4:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cc6:	b2d2      	uxtb	r2, r2
 8007cc8:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cca:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cd8:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ce0:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ce2:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ce4:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ce6:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ce8:	bf48      	it	mi
 8007cea:	2206      	movmi	r2, #6
 8007cec:	d50f      	bpl.n	8007d0e <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007cfe:	061b      	lsls	r3, r3, #24
 8007d00:	4611      	mov	r1, r2
 8007d02:	f102 32ff 	add.w	r2, r2, #4294967295
 8007d06:	d4f2      	bmi.n	8007cee <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d08:	2903      	cmp	r1, #3
 8007d0a:	d01b      	beq.n	8007d44 <xPortStartScheduler+0xa4>
 8007d0c:	6001      	str	r1, [r0, #0]
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	e7fe      	b.n	8007d1e <xPortStartScheduler+0x7e>
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d30:	e7fe      	b.n	8007d30 <xPortStartScheduler+0x90>
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007d42:	e7fe      	b.n	8007d42 <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d44:	9b02      	ldr	r3, [sp, #8]
 8007d46:	4a22      	ldr	r2, [pc, #136]	; (8007dd0 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 8007d48:	4d24      	ldr	r5, [pc, #144]	; (8007ddc <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d4a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d4e:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d52:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d54:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d56:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d58:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d60:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d64:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8007d68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d6c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	uxCriticalNesting = 0;
 8007d70:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 8007d72:	f7fa fc71 	bl	8002658 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007d76:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 8007d78:	f7ff febe 	bl	8007af8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d7c:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8007d80:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d84:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8007d88:	f7ff fea2 	bl	8007ad0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007d8c:	f000 fc5e 	bl	800864c <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8007d90:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 8007d92:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8007d94:	3301      	adds	r3, #1
 8007d96:	d008      	beq.n	8007daa <xPortStartScheduler+0x10a>
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	e7fe      	b.n	8007da8 <xPortStartScheduler+0x108>
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8007dba:	9b03      	ldr	r3, [sp, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d0fc      	beq.n	8007dba <xPortStartScheduler+0x11a>
}
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	b004      	add	sp, #16
 8007dc4:	bd70      	pop	{r4, r5, r6, pc}
 8007dc6:	bf00      	nop
 8007dc8:	410fc271 	.word	0x410fc271
 8007dcc:	410fc270 	.word	0x410fc270
 8007dd0:	e000e400 	.word	0xe000e400
 8007dd4:	200025fc 	.word	0x200025fc
 8007dd8:	20002600 	.word	0x20002600
 8007ddc:	20000434 	.word	0x20000434

08007de0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	4d16      	ldr	r5, [pc, #88]	; (8007e3c <prvIdleTask+0x5c>)
 8007de4:	4f16      	ldr	r7, [pc, #88]	; (8007e40 <prvIdleTask+0x60>)
 8007de6:	4e17      	ldr	r6, [pc, #92]	; (8007e44 <prvIdleTask+0x64>)
 8007de8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8007e48 <prvIdleTask+0x68>
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 8007dec:	f04f 2ae0 	mov.w	sl, #3758153728	; 0xe000e000
 8007df0:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 8007df4:	e014      	b.n	8007e20 <prvIdleTask+0x40>

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
 8007df6:	f7ff fed5 	bl	8007ba4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dfe:	1d20      	adds	r0, r4, #4
 8007e00:	f7ff fe52 	bl	8007aa8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e04:	6833      	ldr	r3, [r6, #0]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e0a:	682b      	ldr	r3, [r5, #0]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 8007e10:	f7ff feea 	bl	8007be8 <vPortExitCritical>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007e14:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007e16:	f7ff fdad 	bl	8007974 <vPortFree>
			vPortFree( pxTCB );
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f7ff fdaa 	bl	8007974 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e7      	bne.n	8007df6 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e26:	f8d8 3000 	ldr.w	r3, [r8]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d9f8      	bls.n	8007e20 <prvIdleTask+0x40>
				taskYIELD();
 8007e2e:	f8ca 9d04 	str.w	r9, [sl, #3332]	; 0xd04
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	e7f1      	b.n	8007e20 <prvIdleTask+0x40>
 8007e3c:	200026a0 	.word	0x200026a0
 8007e40:	20002714 	.word	0x20002714
 8007e44:	2000269c 	.word	0x2000269c
 8007e48:	20002610 	.word	0x20002610

08007e4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e4e:	4b1b      	ldr	r3, [pc, #108]	; (8007ebc <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e50:	4e1b      	ldr	r6, [pc, #108]	; (8007ec0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8007e52:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e54:	6833      	ldr	r3, [r6, #0]
{
 8007e56:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e58:	1d18      	adds	r0, r3, #4
{
 8007e5a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e5c:	f7ff fe24 	bl	8007aa8 <uxListRemove>
 8007e60:	b948      	cbnz	r0, 8007e76 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007e62:	6833      	ldr	r3, [r6, #0]
 8007e64:	4917      	ldr	r1, [pc, #92]	; (8007ec4 <prvAddCurrentTaskToDelayedList+0x78>)
 8007e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e68:	2301      	movs	r3, #1
 8007e6a:	fa03 f202 	lsl.w	r2, r3, r2
 8007e6e:	680b      	ldr	r3, [r1, #0]
 8007e70:	ea23 0302 	bic.w	r3, r3, r2
 8007e74:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e76:	1c6b      	adds	r3, r5, #1
 8007e78:	d017      	beq.n	8007eaa <prvAddCurrentTaskToDelayedList+0x5e>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e7a:	6833      	ldr	r3, [r6, #0]
 8007e7c:	1964      	adds	r4, r4, r5
 8007e7e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8007e80:	d307      	bcc.n	8007e92 <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e82:	4b11      	ldr	r3, [pc, #68]	; (8007ec8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8007e84:	6818      	ldr	r0, [r3, #0]
 8007e86:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e8c:	3104      	adds	r1, #4
 8007e8e:	f7ff bdf3 	b.w	8007a78 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e92:	4b0e      	ldr	r3, [pc, #56]	; (8007ecc <prvAddCurrentTaskToDelayedList+0x80>)
 8007e94:	6818      	ldr	r0, [r3, #0]
 8007e96:	6831      	ldr	r1, [r6, #0]
 8007e98:	3104      	adds	r1, #4
 8007e9a:	f7ff fded 	bl	8007a78 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ed0 <prvAddCurrentTaskToDelayedList+0x84>)
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8007ea4:	bf88      	it	hi
 8007ea6:	601c      	strhi	r4, [r3, #0]
}
 8007ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007eaa:	2f00      	cmp	r7, #0
 8007eac:	d0e5      	beq.n	8007e7a <prvAddCurrentTaskToDelayedList+0x2e>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eae:	6831      	ldr	r1, [r6, #0]
 8007eb0:	4808      	ldr	r0, [pc, #32]	; (8007ed4 <prvAddCurrentTaskToDelayedList+0x88>)
}
 8007eb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eb6:	3104      	adds	r1, #4
 8007eb8:	f7ff bdce 	b.w	8007a58 <vListInsertEnd>
 8007ebc:	20002728 	.word	0x20002728
 8007ec0:	20002604 	.word	0x20002604
 8007ec4:	200026ac 	.word	0x200026ac
 8007ec8:	2000260c 	.word	0x2000260c
 8007ecc:	20002608 	.word	0x20002608
 8007ed0:	200026dc 	.word	0x200026dc
 8007ed4:	20002700 	.word	0x20002700

08007ed8 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 8007ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007edc:	4b4a      	ldr	r3, [pc, #296]	; (8008008 <xTaskIncrementTick.part.0+0x130>)
 8007ede:	681d      	ldr	r5, [r3, #0]
 8007ee0:	3501      	adds	r5, #1
BaseType_t xTaskIncrementTick( void )
 8007ee2:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 8007ee4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ee6:	2d00      	cmp	r5, #0
 8007ee8:	d045      	beq.n	8007f76 <xTaskIncrementTick.part.0+0x9e>
 8007eea:	4b48      	ldr	r3, [pc, #288]	; (800800c <xTaskIncrementTick.part.0+0x134>)
 8007eec:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	429d      	cmp	r5, r3
 8007ef2:	d34d      	bcc.n	8007f90 <xTaskIncrementTick.part.0+0xb8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ef4:	4e46      	ldr	r6, [pc, #280]	; (8008010 <xTaskIncrementTick.part.0+0x138>)
 8007ef6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8008024 <xTaskIncrementTick.part.0+0x14c>
 8007efa:	6833      	ldr	r3, [r6, #0]
 8007efc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008028 <xTaskIncrementTick.part.0+0x150>
 8007f00:	681c      	ldr	r4, [r3, #0]
 8007f02:	2c00      	cmp	r4, #0
 8007f04:	d07a      	beq.n	8007ffc <xTaskIncrementTick.part.0+0x124>
					prvAddTaskToReadyList( pxTCB );
 8007f06:	4f43      	ldr	r7, [pc, #268]	; (8008014 <xTaskIncrementTick.part.0+0x13c>)
BaseType_t xSwitchRequired = pdFALSE;
 8007f08:	2400      	movs	r4, #0
					prvAddTaskToReadyList( pxTCB );
 8007f0a:	f04f 0a01 	mov.w	sl, #1
 8007f0e:	e024      	b.n	8007f5a <xTaskIncrementTick.part.0+0x82>
 8007f10:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f12:	f7ff fdc9 	bl	8007aa8 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f16:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8007f1a:	9900      	ldr	r1, [sp, #0]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f1c:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f20:	b112      	cbz	r2, 8007f28 <xTaskIncrementTick.part.0+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f22:	f7ff fdc1 	bl	8007aa8 <uxListRemove>
 8007f26:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 8007f28:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	fa0a f200 	lsl.w	r2, sl, r0
 8007f32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007f36:	431a      	orrs	r2, r3
 8007f38:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8007f3c:	603a      	str	r2, [r7, #0]
 8007f3e:	f7ff fd8b 	bl	8007a58 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f42:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f46:	6830      	ldr	r0, [r6, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f48:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
 8007f4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f4e:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 8007f50:	4291      	cmp	r1, r2
 8007f52:	bf28      	it	cs
 8007f54:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d050      	beq.n	8007ffc <xTaskIncrementTick.part.0+0x124>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f5a:	6833      	ldr	r3, [r6, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f62:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f66:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 8007f6a:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f6c:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8007f6e:	d2cf      	bcs.n	8007f10 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 8007f70:	9b01      	ldr	r3, [sp, #4]
 8007f72:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f74:	e011      	b.n	8007f9a <xTaskIncrementTick.part.0+0xc2>
			taskSWITCH_DELAYED_LISTS();
 8007f76:	4b26      	ldr	r3, [pc, #152]	; (8008010 <xTaskIncrementTick.part.0+0x138>)
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	6812      	ldr	r2, [r2, #0]
 8007f7c:	b30a      	cbz	r2, 8007fc2 <xTaskIncrementTick.part.0+0xea>
 8007f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	e7fe      	b.n	8007f8e <xTaskIncrementTick.part.0+0xb6>
 8007f90:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8008024 <xTaskIncrementTick.part.0+0x14c>
 8007f94:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008028 <xTaskIncrementTick.part.0+0x150>
BaseType_t xSwitchRequired = pdFALSE;
 8007f98:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f9a:	f8d9 3000 	ldr.w	r3, [r9]
			if( xYieldPending != pdFALSE )
 8007f9e:	491e      	ldr	r1, [pc, #120]	; (8008018 <xTaskIncrementTick.part.0+0x140>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	f858 2003 	ldr.w	r2, [r8, r3]
			if( xYieldPending != pdFALSE )
 8007fac:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8007fae:	2a02      	cmp	r2, #2
 8007fb0:	bf28      	it	cs
 8007fb2:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8007fb4:	2b00      	cmp	r3, #0
}
 8007fb6:	bf0c      	ite	eq
 8007fb8:	4620      	moveq	r0, r4
 8007fba:	2001      	movne	r0, #1
 8007fbc:	b003      	add	sp, #12
 8007fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8007fc2:	4a16      	ldr	r2, [pc, #88]	; (800801c <xTaskIncrementTick.part.0+0x144>)
 8007fc4:	6818      	ldr	r0, [r3, #0]
 8007fc6:	6811      	ldr	r1, [r2, #0]
 8007fc8:	6019      	str	r1, [r3, #0]
 8007fca:	4915      	ldr	r1, [pc, #84]	; (8008020 <xTaskIncrementTick.part.0+0x148>)
 8007fcc:	6010      	str	r0, [r2, #0]
 8007fce:	680a      	ldr	r2, [r1, #0]
 8007fd0:	3201      	adds	r2, #1
 8007fd2:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	6812      	ldr	r2, [r2, #0]
 8007fd8:	b93a      	cbnz	r2, 8007fea <xTaskIncrementTick.part.0+0x112>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fda:	4b0c      	ldr	r3, [pc, #48]	; (800800c <xTaskIncrementTick.part.0+0x134>)
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	e781      	b.n	8007eee <xTaskIncrementTick.part.0+0x16>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fea:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fec:	4a07      	ldr	r2, [pc, #28]	; (800800c <xTaskIncrementTick.part.0+0x134>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fee:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ff0:	9201      	str	r2, [sp, #4]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	4613      	mov	r3, r2
}
 8007ffa:	e778      	b.n	8007eee <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ffc:	9a01      	ldr	r2, [sp, #4]
 8007ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8008002:	6013      	str	r3, [r2, #0]
					break;
 8008004:	e7c9      	b.n	8007f9a <xTaskIncrementTick.part.0+0xc2>
 8008006:	bf00      	nop
 8008008:	20002728 	.word	0x20002728
 800800c:	200026dc 	.word	0x200026dc
 8008010:	20002608 	.word	0x20002608
 8008014:	200026ac 	.word	0x200026ac
 8008018:	2000272c 	.word	0x2000272c
 800801c:	2000260c 	.word	0x2000260c
 8008020:	200026e0 	.word	0x200026e0
 8008024:	20002610 	.word	0x20002610
 8008028:	20002604 	.word	0x20002604

0800802c <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800802c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 8008030:	4c45      	ldr	r4, [pc, #276]	; (8008148 <xTaskResumeAll.part.0+0x11c>)
BaseType_t xTaskResumeAll( void )
 8008032:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8008034:	f7ff fdb6 	bl	8007ba4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	3b01      	subs	r3, #1
 800803c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d167      	bne.n	8008114 <xTaskResumeAll.part.0+0xe8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008044:	4b41      	ldr	r3, [pc, #260]	; (800814c <xTaskResumeAll.part.0+0x120>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d063      	beq.n	8008114 <xTaskResumeAll.part.0+0xe8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800804c:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008168 <xTaskResumeAll.part.0+0x13c>
 8008050:	f8db 3000 	ldr.w	r3, [fp]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d073      	beq.n	8008140 <xTaskResumeAll.part.0+0x114>
 8008058:	4b3d      	ldr	r3, [pc, #244]	; (8008150 <xTaskResumeAll.part.0+0x124>)
 800805a:	4d3e      	ldr	r5, [pc, #248]	; (8008154 <xTaskResumeAll.part.0+0x128>)
 800805c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800816c <xTaskResumeAll.part.0+0x140>
 8008060:	4f3d      	ldr	r7, [pc, #244]	; (8008158 <xTaskResumeAll.part.0+0x12c>)
 8008062:	9301      	str	r3, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8008064:	2601      	movs	r6, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008066:	f8db 300c 	ldr.w	r3, [fp, #12]
 800806a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800806e:	f10a 0904 	add.w	r9, sl, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008072:	f10a 0018 	add.w	r0, sl, #24
 8008076:	f7ff fd17 	bl	8007aa8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800807a:	4648      	mov	r0, r9
 800807c:	f7ff fd14 	bl	8007aa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008080:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8008084:	682a      	ldr	r2, [r5, #0]
 8008086:	fa06 f300 	lsl.w	r3, r6, r0
 800808a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800808e:	4313      	orrs	r3, r2
 8008090:	4649      	mov	r1, r9
 8008092:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8008096:	602b      	str	r3, [r5, #0]
 8008098:	f7ff fcde 	bl	8007a58 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 80080a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d33d      	bcc.n	8008124 <xTaskResumeAll.part.0+0xf8>
						xYieldPending = pdTRUE;
 80080a8:	9b01      	ldr	r3, [sp, #4]
 80080aa:	601e      	str	r6, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080ac:	f8db 3000 	ldr.w	r3, [fp]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1d8      	bne.n	8008066 <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080b4:	4b29      	ldr	r3, [pc, #164]	; (800815c <xTaskResumeAll.part.0+0x130>)
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	6812      	ldr	r2, [r2, #0]
 80080ba:	2a00      	cmp	r2, #0
 80080bc:	d03b      	beq.n	8008136 <xTaskResumeAll.part.0+0x10a>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080be:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080c0:	4b27      	ldr	r3, [pc, #156]	; (8008160 <xTaskResumeAll.part.0+0x134>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080c2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080c4:	68d2      	ldr	r2, [r2, #12]
 80080c6:	6852      	ldr	r2, [r2, #4]
 80080c8:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80080ca:	4e26      	ldr	r6, [pc, #152]	; (8008164 <xTaskResumeAll.part.0+0x138>)
 80080cc:	6835      	ldr	r5, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80080ce:	b195      	cbz	r5, 80080f6 <xTaskResumeAll.part.0+0xca>
								xYieldPending = pdTRUE;
 80080d0:	2701      	movs	r7, #1
 80080d2:	e006      	b.n	80080e2 <xTaskResumeAll.part.0+0xb6>
 80080d4:	f7ff ff00 	bl	8007ed8 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 80080d8:	b108      	cbz	r0, 80080de <xTaskResumeAll.part.0+0xb2>
								xYieldPending = pdTRUE;
 80080da:	9b01      	ldr	r3, [sp, #4]
 80080dc:	601f      	str	r7, [r3, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80080de:	3d01      	subs	r5, #1
 80080e0:	d008      	beq.n	80080f4 <xTaskResumeAll.part.0+0xc8>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d0f5      	beq.n	80080d4 <xTaskResumeAll.part.0+0xa8>
		++xPendedTicks;
 80080e8:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80080ea:	3d01      	subs	r5, #1
		++xPendedTicks;
 80080ec:	f103 0301 	add.w	r3, r3, #1
 80080f0:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80080f2:	d1f6      	bne.n	80080e2 <xTaskResumeAll.part.0+0xb6>
						xPendedTicks = 0;
 80080f4:	6035      	str	r5, [r6, #0]
				if( xYieldPending != pdFALSE )
 80080f6:	9b01      	ldr	r3, [sp, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	b15b      	cbz	r3, 8008114 <xTaskResumeAll.part.0+0xe8>
					taskYIELD_IF_USING_PREEMPTION();
 80080fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008104:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008110:	2001      	movs	r0, #1
 8008112:	e000      	b.n	8008116 <xTaskResumeAll.part.0+0xea>
BaseType_t xAlreadyYielded = pdFALSE;
 8008114:	2000      	movs	r0, #0
 8008116:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8008118:	f7ff fd66 	bl	8007be8 <vPortExitCritical>
}
 800811c:	9801      	ldr	r0, [sp, #4]
 800811e:	b003      	add	sp, #12
 8008120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008124:	f8db 3000 	ldr.w	r3, [fp]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d19c      	bne.n	8008066 <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800812c:	4b0b      	ldr	r3, [pc, #44]	; (800815c <xTaskResumeAll.part.0+0x130>)
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	6812      	ldr	r2, [r2, #0]
 8008132:	2a00      	cmp	r2, #0
 8008134:	d1c3      	bne.n	80080be <xTaskResumeAll.part.0+0x92>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008136:	4b0a      	ldr	r3, [pc, #40]	; (8008160 <xTaskResumeAll.part.0+0x134>)
 8008138:	f04f 32ff 	mov.w	r2, #4294967295
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	e7c4      	b.n	80080ca <xTaskResumeAll.part.0+0x9e>
 8008140:	4b03      	ldr	r3, [pc, #12]	; (8008150 <xTaskResumeAll.part.0+0x124>)
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	e7c1      	b.n	80080ca <xTaskResumeAll.part.0+0x9e>
 8008146:	bf00      	nop
 8008148:	200026a4 	.word	0x200026a4
 800814c:	2000269c 	.word	0x2000269c
 8008150:	2000272c 	.word	0x2000272c
 8008154:	200026ac 	.word	0x200026ac
 8008158:	20002604 	.word	0x20002604
 800815c:	20002608 	.word	0x20002608
 8008160:	200026dc 	.word	0x200026dc
 8008164:	200026e4 	.word	0x200026e4
 8008168:	200026e8 	.word	0x200026e8
 800816c:	20002610 	.word	0x20002610

08008170 <xTaskCreate>:
	{
 8008170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008174:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8008178:	4607      	mov	r7, r0
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800817a:	4650      	mov	r0, sl
	{
 800817c:	460d      	mov	r5, r1
 800817e:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008180:	f7ff fb40 	bl	8007804 <pvPortMalloc>
			if( pxStack != NULL )
 8008184:	2800      	cmp	r0, #0
 8008186:	f000 80c4 	beq.w	8008312 <xTaskCreate+0x1a2>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800818a:	4683      	mov	fp, r0
 800818c:	2054      	movs	r0, #84	; 0x54
 800818e:	f7ff fb39 	bl	8007804 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008192:	4604      	mov	r4, r0
 8008194:	2800      	cmp	r0, #0
 8008196:	f000 80c9 	beq.w	800832c <xTaskCreate+0x1bc>
					pxNewTCB->pxStack = pxStack;
 800819a:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	if( pcName != NULL )
 800819e:	2d00      	cmp	r5, #0
 80081a0:	f000 80d6 	beq.w	8008350 <xTaskCreate+0x1e0>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081a4:	782b      	ldrb	r3, [r5, #0]
 80081a6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80081aa:	782b      	ldrb	r3, [r5, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d04d      	beq.n	800824c <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081b0:	786b      	ldrb	r3, [r5, #1]
 80081b2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 80081b6:	786b      	ldrb	r3, [r5, #1]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d047      	beq.n	800824c <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081bc:	78ab      	ldrb	r3, [r5, #2]
 80081be:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 80081c2:	78ab      	ldrb	r3, [r5, #2]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d041      	beq.n	800824c <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081c8:	78eb      	ldrb	r3, [r5, #3]
 80081ca:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 80081ce:	78eb      	ldrb	r3, [r5, #3]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d03b      	beq.n	800824c <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081d4:	792b      	ldrb	r3, [r5, #4]
 80081d6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 80081da:	792b      	ldrb	r3, [r5, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d035      	beq.n	800824c <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081e0:	796b      	ldrb	r3, [r5, #5]
 80081e2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 80081e6:	796b      	ldrb	r3, [r5, #5]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d02f      	beq.n	800824c <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081ec:	79ab      	ldrb	r3, [r5, #6]
 80081ee:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 80081f2:	79ab      	ldrb	r3, [r5, #6]
 80081f4:	b353      	cbz	r3, 800824c <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081f6:	79eb      	ldrb	r3, [r5, #7]
 80081f8:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 80081fc:	79eb      	ldrb	r3, [r5, #7]
 80081fe:	b32b      	cbz	r3, 800824c <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008200:	7a2b      	ldrb	r3, [r5, #8]
 8008202:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 8008206:	7a2b      	ldrb	r3, [r5, #8]
 8008208:	b303      	cbz	r3, 800824c <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800820a:	7a6b      	ldrb	r3, [r5, #9]
 800820c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 8008210:	7a6b      	ldrb	r3, [r5, #9]
 8008212:	b1db      	cbz	r3, 800824c <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008214:	7aab      	ldrb	r3, [r5, #10]
 8008216:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 800821a:	7aab      	ldrb	r3, [r5, #10]
 800821c:	b1b3      	cbz	r3, 800824c <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800821e:	7aeb      	ldrb	r3, [r5, #11]
 8008220:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 8008224:	7aeb      	ldrb	r3, [r5, #11]
 8008226:	b18b      	cbz	r3, 800824c <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008228:	7b2b      	ldrb	r3, [r5, #12]
 800822a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 800822e:	7b2b      	ldrb	r3, [r5, #12]
 8008230:	b163      	cbz	r3, 800824c <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008232:	7b6b      	ldrb	r3, [r5, #13]
 8008234:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 8008238:	7b6b      	ldrb	r3, [r5, #13]
 800823a:	b13b      	cbz	r3, 800824c <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800823c:	7bab      	ldrb	r3, [r5, #14]
 800823e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
 8008242:	7bab      	ldrb	r3, [r5, #14]
 8008244:	b113      	cbz	r3, 800824c <xTaskCreate+0xdc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008246:	7beb      	ldrb	r3, [r5, #15]
 8008248:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800824c:	2300      	movs	r3, #0
 800824e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008252:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008254:	2e06      	cmp	r6, #6
 8008256:	bf28      	it	cs
 8008258:	2606      	movcs	r6, #6
		pxNewTCB->uxMutexesHeld = 0;
 800825a:	2500      	movs	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800825c:	f104 0904 	add.w	r9, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8008260:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008262:	6466      	str	r6, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008264:	4648      	mov	r0, r9
		pxNewTCB->uxMutexesHeld = 0;
 8008266:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008268:	f7ff fbf2 	bl	8007a50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800826c:	f104 0018 	add.w	r0, r4, #24
 8008270:	f7ff fbee 	bl	8007a50 <vListInitialiseItem>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008274:	f1aa 0204 	sub.w	r2, sl, #4
 8008278:	eb0b 0002 	add.w	r0, fp, r2
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800827c:	f1c6 0607 	rsb	r6, r6, #7
		pxNewTCB->ulNotifiedValue = 0;
 8008280:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008282:	61a6      	str	r6, [r4, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008284:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008288:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800828a:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800828c:	4642      	mov	r2, r8
 800828e:	4639      	mov	r1, r7
 8008290:	f020 0007 	bic.w	r0, r0, #7
 8008294:	f7ff fc5a 	bl	8007b4c <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8008298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800829a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800829c:	b103      	cbz	r3, 80082a0 <xTaskCreate+0x130>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800829e:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 80082a0:	f7ff fc80 	bl	8007ba4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80082a4:	4a3d      	ldr	r2, [pc, #244]	; (800839c <xTaskCreate+0x22c>)
		if( pxCurrentTCB == NULL )
 80082a6:	4e3e      	ldr	r6, [pc, #248]	; (80083a0 <xTaskCreate+0x230>)
		uxCurrentNumberOfTasks++;
 80082a8:	6813      	ldr	r3, [r2, #0]
 80082aa:	3301      	adds	r3, #1
 80082ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082ae:	6833      	ldr	r3, [r6, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d044      	beq.n	800833e <xTaskCreate+0x1ce>
			if( xSchedulerRunning == pdFALSE )
 80082b4:	4f3b      	ldr	r7, [pc, #236]	; (80083a4 <xTaskCreate+0x234>)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	b37b      	cbz	r3, 800831a <xTaskCreate+0x1aa>
		prvAddTaskToReadyList( pxNewTCB );
 80082ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80082bc:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80083cc <xTaskCreate+0x25c>
		uxTaskNumber++;
 80082c0:	4d39      	ldr	r5, [pc, #228]	; (80083a8 <xTaskCreate+0x238>)
		prvAddTaskToReadyList( pxNewTCB );
 80082c2:	4a3a      	ldr	r2, [pc, #232]	; (80083ac <xTaskCreate+0x23c>)
		uxTaskNumber++;
 80082c4:	682b      	ldr	r3, [r5, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80082c6:	f8d2 c000 	ldr.w	ip, [r2]
		uxTaskNumber++;
 80082ca:	3301      	adds	r3, #1
 80082cc:	602b      	str	r3, [r5, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80082ce:	2501      	movs	r5, #1
 80082d0:	fa05 f300 	lsl.w	r3, r5, r0
 80082d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80082d8:	ea43 030c 	orr.w	r3, r3, ip
 80082dc:	4649      	mov	r1, r9
 80082de:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	f7ff fbb8 	bl	8007a58 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80082e8:	f7ff fc7e 	bl	8007be8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	b31b      	cbz	r3, 8008338 <xTaskCreate+0x1c8>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082f0:	6832      	ldr	r2, [r6, #0]
 80082f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80082f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d21e      	bcs.n	8008338 <xTaskCreate+0x1c8>
			taskYIELD_IF_USING_PREEMPTION();
 80082fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80082fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008302:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
 800830e:	4628      	mov	r0, r5
 8008310:	e001      	b.n	8008316 <xTaskCreate+0x1a6>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008312:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008316:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800831a:	6833      	ldr	r3, [r6, #0]
 800831c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80083cc <xTaskCreate+0x25c>
 8008324:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8008326:	bf98      	it	ls
 8008328:	6034      	strls	r4, [r6, #0]
 800832a:	e7c9      	b.n	80082c0 <xTaskCreate+0x150>
					vPortFree( pxStack );
 800832c:	4658      	mov	r0, fp
 800832e:	f7ff fb21 	bl	8007974 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008332:	f04f 30ff 	mov.w	r0, #4294967295
 8008336:	e7ee      	b.n	8008316 <xTaskCreate+0x1a6>
			xReturn = pdPASS;
 8008338:	4628      	mov	r0, r5
	}
 800833a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pxCurrentTCB = pxNewTCB;
 800833e:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008340:	6813      	ldr	r3, [r2, #0]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d007      	beq.n	8008356 <xTaskCreate+0x1e6>
		prvAddTaskToReadyList( pxNewTCB );
 8008346:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008348:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80083cc <xTaskCreate+0x25c>
 800834c:	4f15      	ldr	r7, [pc, #84]	; (80083a4 <xTaskCreate+0x234>)
 800834e:	e7b7      	b.n	80082c0 <xTaskCreate+0x150>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008350:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
 8008354:	e77d      	b.n	8008252 <xTaskCreate+0xe2>
 8008356:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80083cc <xTaskCreate+0x25c>
 800835a:	4645      	mov	r5, r8
 800835c:	f108 078c 	add.w	r7, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008360:	4628      	mov	r0, r5
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008362:	3514      	adds	r5, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008364:	f7ff fb68 	bl	8007a38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008368:	42bd      	cmp	r5, r7
 800836a:	d1f9      	bne.n	8008360 <xTaskCreate+0x1f0>
	vListInitialise( &xDelayedTaskList1 );
 800836c:	4f10      	ldr	r7, [pc, #64]	; (80083b0 <xTaskCreate+0x240>)
	vListInitialise( &xDelayedTaskList2 );
 800836e:	4d11      	ldr	r5, [pc, #68]	; (80083b4 <xTaskCreate+0x244>)
	vListInitialise( &xDelayedTaskList1 );
 8008370:	4638      	mov	r0, r7
 8008372:	f7ff fb61 	bl	8007a38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008376:	4628      	mov	r0, r5
 8008378:	f7ff fb5e 	bl	8007a38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800837c:	480e      	ldr	r0, [pc, #56]	; (80083b8 <xTaskCreate+0x248>)
 800837e:	f7ff fb5b 	bl	8007a38 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8008382:	480e      	ldr	r0, [pc, #56]	; (80083bc <xTaskCreate+0x24c>)
 8008384:	f7ff fb58 	bl	8007a38 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8008388:	480d      	ldr	r0, [pc, #52]	; (80083c0 <xTaskCreate+0x250>)
 800838a:	f7ff fb55 	bl	8007a38 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800838e:	4b0d      	ldr	r3, [pc, #52]	; (80083c4 <xTaskCreate+0x254>)
		prvAddTaskToReadyList( pxNewTCB );
 8008390:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 8008392:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008394:	4b0c      	ldr	r3, [pc, #48]	; (80083c8 <xTaskCreate+0x258>)
 8008396:	4f03      	ldr	r7, [pc, #12]	; (80083a4 <xTaskCreate+0x234>)
 8008398:	601d      	str	r5, [r3, #0]
}
 800839a:	e791      	b.n	80082c0 <xTaskCreate+0x150>
 800839c:	2000269c 	.word	0x2000269c
 80083a0:	20002604 	.word	0x20002604
 80083a4:	200026fc 	.word	0x200026fc
 80083a8:	200026a8 	.word	0x200026a8
 80083ac:	200026ac 	.word	0x200026ac
 80083b0:	200026b0 	.word	0x200026b0
 80083b4:	200026c4 	.word	0x200026c4
 80083b8:	200026e8 	.word	0x200026e8
 80083bc:	20002714 	.word	0x20002714
 80083c0:	20002700 	.word	0x20002700
 80083c4:	20002608 	.word	0x20002608
 80083c8:	2000260c 	.word	0x2000260c
 80083cc:	20002610 	.word	0x20002610

080083d0 <vTaskDelay>:
	{
 80083d0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083d2:	b950      	cbnz	r0, 80083ea <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80083d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80083d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	f3bf 8f6f 	isb	sy
	}
 80083e8:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80083ea:	4c10      	ldr	r4, [pc, #64]	; (800842c <vTaskDelay+0x5c>)
 80083ec:	6821      	ldr	r1, [r4, #0]
 80083ee:	b141      	cbz	r1, 8008402 <vTaskDelay+0x32>
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	e7fe      	b.n	8008400 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	3301      	adds	r3, #1
 8008406:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008408:	f7ff fd20 	bl	8007e4c <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	b943      	cbnz	r3, 8008422 <vTaskDelay+0x52>
 8008410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	e7fe      	b.n	8008420 <vTaskDelay+0x50>
 8008422:	f7ff fe03 	bl	800802c <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8008426:	2800      	cmp	r0, #0
 8008428:	d0d4      	beq.n	80083d4 <vTaskDelay+0x4>
	}
 800842a:	bd10      	pop	{r4, pc}
 800842c:	200026a4 	.word	0x200026a4

08008430 <vTaskStartScheduler>:
{
 8008430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008434:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008438:	f7ff f9e4 	bl	8007804 <pvPortMalloc>
			if( pxStack != NULL )
 800843c:	2800      	cmp	r0, #0
 800843e:	d078      	beq.n	8008532 <vTaskStartScheduler+0x102>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008440:	4605      	mov	r5, r0
 8008442:	2054      	movs	r0, #84	; 0x54
 8008444:	f7ff f9de 	bl	8007804 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008448:	4604      	mov	r4, r0
 800844a:	2800      	cmp	r0, #0
 800844c:	d06e      	beq.n	800852c <vTaskStartScheduler+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800844e:	4b59      	ldr	r3, [pc, #356]	; (80085b4 <vTaskStartScheduler+0x184>)
 8008450:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008452:	1d07      	adds	r7, r0, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008454:	e9c0 530c 	strd	r5, r3, [r0, #48]	; 0x30
		pxNewTCB->uxMutexesHeld = 0;
 8008458:	e9c0 6611 	strd	r6, r6, [r0, #68]	; 0x44
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800845c:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008460:	f880 6043 	strb.w	r6, [r0, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
 8008464:	62c6      	str	r6, [r0, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008466:	4638      	mov	r0, r7
 8008468:	f7ff faf2 	bl	8007a50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800846c:	f104 0018 	add.w	r0, r4, #24
 8008470:	f7ff faee 	bl	8007a50 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008474:	2307      	movs	r3, #7
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008476:	f505 70fe 	add.w	r0, r5, #508	; 0x1fc
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800847a:	4632      	mov	r2, r6
 800847c:	494e      	ldr	r1, [pc, #312]	; (80085b8 <vTaskStartScheduler+0x188>)
		pxNewTCB->ulNotifiedValue = 0;
 800847e:	64e6      	str	r6, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008480:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008482:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008484:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008486:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800848a:	f020 0007 	bic.w	r0, r0, #7
 800848e:	f7ff fb5d 	bl	8007b4c <pxPortInitialiseStack>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008492:	4b4a      	ldr	r3, [pc, #296]	; (80085bc <vTaskStartScheduler+0x18c>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008494:	6020      	str	r0, [r4, #0]
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008496:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8008498:	f7ff fb84 	bl	8007ba4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800849c:	4a48      	ldr	r2, [pc, #288]	; (80085c0 <vTaskStartScheduler+0x190>)
		if( pxCurrentTCB == NULL )
 800849e:	4d49      	ldr	r5, [pc, #292]	; (80085c4 <vTaskStartScheduler+0x194>)
		uxCurrentNumberOfTasks++;
 80084a0:	6813      	ldr	r3, [r2, #0]
 80084a2:	3301      	adds	r3, #1
 80084a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084a6:	682b      	ldr	r3, [r5, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d054      	beq.n	8008556 <vTaskStartScheduler+0x126>
			if( xSchedulerRunning == pdFALSE )
 80084ac:	4e46      	ldr	r6, [pc, #280]	; (80085c8 <vTaskStartScheduler+0x198>)
 80084ae:	6833      	ldr	r3, [r6, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d047      	beq.n	8008544 <vTaskStartScheduler+0x114>
		prvAddTaskToReadyList( pxNewTCB );
 80084b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80084b6:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80085f4 <vTaskStartScheduler+0x1c4>
 80084ba:	4a44      	ldr	r2, [pc, #272]	; (80085cc <vTaskStartScheduler+0x19c>)
 80084bc:	4639      	mov	r1, r7
		uxTaskNumber++;
 80084be:	4f44      	ldr	r7, [pc, #272]	; (80085d0 <vTaskStartScheduler+0x1a0>)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	3301      	adds	r3, #1
 80084c4:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80084c6:	6817      	ldr	r7, [r2, #0]
 80084c8:	2301      	movs	r3, #1
 80084ca:	4083      	lsls	r3, r0
 80084cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80084d0:	433b      	orrs	r3, r7
 80084d2:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80084d6:	6013      	str	r3, [r2, #0]
 80084d8:	f7ff fabe 	bl	8007a58 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80084dc:	f7ff fb84 	bl	8007be8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80084e0:	6833      	ldr	r3, [r6, #0]
 80084e2:	b173      	cbz	r3, 8008502 <vTaskStartScheduler+0xd2>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084e4:	682a      	ldr	r2, [r5, #0]
 80084e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80084e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d209      	bcs.n	8008502 <vTaskStartScheduler+0xd2>
			taskYIELD_IF_USING_PREEMPTION();
 80084ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80084f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8008512:	4a30      	ldr	r2, [pc, #192]	; (80085d4 <vTaskStartScheduler+0x1a4>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008514:	4b30      	ldr	r3, [pc, #192]	; (80085d8 <vTaskStartScheduler+0x1a8>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8008516:	f04f 30ff 	mov.w	r0, #4294967295
 800851a:	6010      	str	r0, [r2, #0]
		xSchedulerRunning = pdTRUE;
 800851c:	2101      	movs	r1, #1
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800851e:	2200      	movs	r2, #0
		xSchedulerRunning = pdTRUE;
 8008520:	6031      	str	r1, [r6, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008522:	601a      	str	r2, [r3, #0]
}
 8008524:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008528:	f7ff bbba 	b.w	8007ca0 <xPortStartScheduler>
					vPortFree( pxStack );
 800852c:	4628      	mov	r0, r5
 800852e:	f7ff fa21 	bl	8007974 <vPortFree>
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008542:	e7fe      	b.n	8008542 <vTaskStartScheduler+0x112>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008544:	682b      	ldr	r3, [r5, #0]
 8008546:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80085f4 <vTaskStartScheduler+0x1c4>
 800854e:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8008550:	bf98      	it	ls
 8008552:	602c      	strls	r4, [r5, #0]
 8008554:	e7b1      	b.n	80084ba <vTaskStartScheduler+0x8a>
			pxCurrentTCB = pxNewTCB;
 8008556:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008558:	6813      	ldr	r3, [r2, #0]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d004      	beq.n	8008568 <vTaskStartScheduler+0x138>
		prvAddTaskToReadyList( pxNewTCB );
 800855e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008560:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80085f4 <vTaskStartScheduler+0x1c4>
 8008564:	4e18      	ldr	r6, [pc, #96]	; (80085c8 <vTaskStartScheduler+0x198>)
 8008566:	e7a8      	b.n	80084ba <vTaskStartScheduler+0x8a>
 8008568:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80085f4 <vTaskStartScheduler+0x1c4>
 800856c:	4646      	mov	r6, r8
 800856e:	f108 098c 	add.w	r9, r8, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008572:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008574:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008576:	f7ff fa5f 	bl	8007a38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800857a:	45b1      	cmp	r9, r6
 800857c:	d1f9      	bne.n	8008572 <vTaskStartScheduler+0x142>
	vListInitialise( &xDelayedTaskList1 );
 800857e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80085f8 <vTaskStartScheduler+0x1c8>
	vListInitialise( &xDelayedTaskList2 );
 8008582:	4e16      	ldr	r6, [pc, #88]	; (80085dc <vTaskStartScheduler+0x1ac>)
	vListInitialise( &xDelayedTaskList1 );
 8008584:	4648      	mov	r0, r9
 8008586:	f7ff fa57 	bl	8007a38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800858a:	4630      	mov	r0, r6
 800858c:	f7ff fa54 	bl	8007a38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008590:	4813      	ldr	r0, [pc, #76]	; (80085e0 <vTaskStartScheduler+0x1b0>)
 8008592:	f7ff fa51 	bl	8007a38 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8008596:	4813      	ldr	r0, [pc, #76]	; (80085e4 <vTaskStartScheduler+0x1b4>)
 8008598:	f7ff fa4e 	bl	8007a38 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800859c:	4812      	ldr	r0, [pc, #72]	; (80085e8 <vTaskStartScheduler+0x1b8>)
 800859e:	f7ff fa4b 	bl	8007a38 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80085a2:	4b12      	ldr	r3, [pc, #72]	; (80085ec <vTaskStartScheduler+0x1bc>)
		prvAddTaskToReadyList( pxNewTCB );
 80085a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 80085a6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085aa:	4b11      	ldr	r3, [pc, #68]	; (80085f0 <vTaskStartScheduler+0x1c0>)
 80085ac:	601e      	str	r6, [r3, #0]
 80085ae:	4e06      	ldr	r6, [pc, #24]	; (80085c8 <vTaskStartScheduler+0x198>)
}
 80085b0:	e783      	b.n	80084ba <vTaskStartScheduler+0x8a>
 80085b2:	bf00      	nop
 80085b4:	454c4449 	.word	0x454c4449
 80085b8:	08007de1 	.word	0x08007de1
 80085bc:	200026d8 	.word	0x200026d8
 80085c0:	2000269c 	.word	0x2000269c
 80085c4:	20002604 	.word	0x20002604
 80085c8:	200026fc 	.word	0x200026fc
 80085cc:	200026ac 	.word	0x200026ac
 80085d0:	200026a8 	.word	0x200026a8
 80085d4:	200026dc 	.word	0x200026dc
 80085d8:	20002728 	.word	0x20002728
 80085dc:	200026c4 	.word	0x200026c4
 80085e0:	200026e8 	.word	0x200026e8
 80085e4:	20002714 	.word	0x20002714
 80085e8:	20002700 	.word	0x20002700
 80085ec:	20002608 	.word	0x20002608
 80085f0:	2000260c 	.word	0x2000260c
 80085f4:	20002610 	.word	0x20002610
 80085f8:	200026b0 	.word	0x200026b0

080085fc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80085fc:	4a02      	ldr	r2, [pc, #8]	; (8008608 <vTaskSuspendAll+0xc>)
 80085fe:	6813      	ldr	r3, [r2, #0]
 8008600:	3301      	adds	r3, #1
 8008602:	6013      	str	r3, [r2, #0]
}
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	200026a4 	.word	0x200026a4

0800860c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800860c:	4b06      	ldr	r3, [pc, #24]	; (8008628 <xTaskResumeAll+0x1c>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	b943      	cbnz	r3, 8008624 <xTaskResumeAll+0x18>
 8008612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	e7fe      	b.n	8008622 <xTaskResumeAll+0x16>
 8008624:	f7ff bd02 	b.w	800802c <xTaskResumeAll.part.0>
 8008628:	200026a4 	.word	0x200026a4

0800862c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800862c:	4b05      	ldr	r3, [pc, #20]	; (8008644 <xTaskIncrementTick+0x18>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	b90b      	cbnz	r3, 8008636 <xTaskIncrementTick+0xa>
 8008632:	f7ff bc51 	b.w	8007ed8 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 8008636:	4a04      	ldr	r2, [pc, #16]	; (8008648 <xTaskIncrementTick+0x1c>)
 8008638:	6813      	ldr	r3, [r2, #0]
 800863a:	3301      	adds	r3, #1
}
 800863c:	2000      	movs	r0, #0
		++xPendedTicks;
 800863e:	6013      	str	r3, [r2, #0]
}
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	200026a4 	.word	0x200026a4
 8008648:	200026e4 	.word	0x200026e4

0800864c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800864c:	4b16      	ldr	r3, [pc, #88]	; (80086a8 <vTaskSwitchContext+0x5c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	b11b      	cbz	r3, 800865a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8008652:	4b16      	ldr	r3, [pc, #88]	; (80086ac <vTaskSwitchContext+0x60>)
 8008654:	2201      	movs	r2, #1
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800865a:	4914      	ldr	r1, [pc, #80]	; (80086ac <vTaskSwitchContext+0x60>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800865c:	4a14      	ldr	r2, [pc, #80]	; (80086b0 <vTaskSwitchContext+0x64>)
		xYieldPending = pdFALSE;
 800865e:	600b      	str	r3, [r1, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008660:	6813      	ldr	r3, [r2, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008662:	fab3 f383 	clz	r3, r3
 8008666:	b2db      	uxtb	r3, r3
 8008668:	f1c3 031f 	rsb	r3, r3, #31
 800866c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008670:	4a10      	ldr	r2, [pc, #64]	; (80086b4 <vTaskSwitchContext+0x68>)
 8008672:	0099      	lsls	r1, r3, #2
 8008674:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008678:	5850      	ldr	r0, [r2, r1]
 800867a:	b940      	cbnz	r0, 800868e <vTaskSwitchContext+0x42>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	e7fe      	b.n	800868c <vTaskSwitchContext+0x40>
 800868e:	6858      	ldr	r0, [r3, #4]
 8008690:	3108      	adds	r1, #8
 8008692:	6840      	ldr	r0, [r0, #4]
 8008694:	6058      	str	r0, [r3, #4]
 8008696:	440a      	add	r2, r1
 8008698:	4290      	cmp	r0, r2
 800869a:	bf04      	itt	eq
 800869c:	6840      	ldreq	r0, [r0, #4]
 800869e:	6058      	streq	r0, [r3, #4]
 80086a0:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <vTaskSwitchContext+0x6c>)
 80086a2:	68c2      	ldr	r2, [r0, #12]
 80086a4:	601a      	str	r2, [r3, #0]
}
 80086a6:	4770      	bx	lr
 80086a8:	200026a4 	.word	0x200026a4
 80086ac:	2000272c 	.word	0x2000272c
 80086b0:	200026ac 	.word	0x200026ac
 80086b4:	20002610 	.word	0x20002610
 80086b8:	20002604 	.word	0x20002604

080086bc <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 80086bc:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 80086be:	8840      	ldrh	r0, [r0, #2]
 80086c0:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 80086c4:	0c00      	lsrs	r0, r0, #16
 80086c6:	4770      	bx	lr

080086c8 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 80086c8:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 80086ca:	8803      	ldrh	r3, [r0, #0]
 80086cc:	140d      	asrs	r5, r1, #16
{
 80086ce:	b084      	sub	sp, #16
 80086d0:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 80086d2:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 80086d6:	fb03 f303 	mul.w	r3, r3, r3
{
 80086da:	9101      	str	r1, [sp, #4]
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 80086dc:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 80086e0:	428b      	cmp	r3, r1
 80086e2:	da10      	bge.n	8008706 <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 80086e4:	8846      	ldrh	r6, [r0, #2]
 80086e6:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 80086ea:	4282      	cmp	r2, r0
 80086ec:	dd14      	ble.n	8008718 <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 80086ee:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 80086f0:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 80086f4:	bfb8      	it	lt
 80086f6:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 80086f8:	f7f9 fbba 	bl	8001e70 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 80086fc:	2c00      	cmp	r4, #0
        {
          new_q = - new_q;
 80086fe:	bfb8      	it	lt
 8008700:	4240      	neglt	r0, r0
        }
      }
      Local_Vqd.q = (int16_t)new_q;
      Local_Vqd.d = (int16_t)new_d;
 8008702:	b235      	sxth	r5, r6
      Local_Vqd.q = (int16_t)new_q;
 8008704:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 8008706:	b2a4      	uxth	r4, r4
 8008708:	2000      	movs	r0, #0
 800870a:	f364 000f 	bfi	r0, r4, #0, #16
 800870e:	b2ad      	uxth	r5, r5
 8008710:	f365 401f 	bfi	r0, r5, #16, #16
}
 8008714:	b004      	add	sp, #16
 8008716:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8008718:	1a98      	subs	r0, r3, r2
 800871a:	f7f9 fba9 	bl	8001e70 <MCM_Sqrt>
        if (Vqd.q < 0)
 800871e:	2c00      	cmp	r4, #0
 8008720:	daf0      	bge.n	8008704 <Circle_Limitation+0x3c>
          new_q = -new_q;
 8008722:	4240      	negs	r0, r0
 8008724:	e7ee      	b.n	8008704 <Circle_Limitation+0x3c>
 8008726:	bf00      	nop

08008728 <MCP_ReceivedPacket>:
#include "mc_config.h"
#include "mcp_config.h"
#include "mc_api.h"

void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8008728:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 800872a:	6845      	ldr	r5, [r0, #4]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800872c:	882a      	ldrh	r2, [r5, #0]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800872e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8008732:	f022 0307 	bic.w	r3, r2, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8008736:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 800873a:	b083      	sub	sp, #12
 800873c:	4604      	mov	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800873e:	b29b      	uxth	r3, r3
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8008740:	d04f      	beq.n	80087e2 <MCP_ReceivedPacket+0xba>
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);

    
    MCI_Handle_t *pMCI = &Mci[motorID];
 8008742:	4f59      	ldr	r7, [pc, #356]	; (80088a8 <MCP_ReceivedPacket+0x180>)
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8008744:	3a01      	subs	r2, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8008746:	f002 0207 	and.w	r2, r2, #7
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 800874a:	3502      	adds	r5, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 800874c:	eb07 1742 	add.w	r7, r7, r2, lsl #5
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8008750:	6822      	ldr	r2, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8008752:	6045      	str	r5, [r0, #4]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8008754:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8008756:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800875a:	3802      	subs	r0, #2
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800875c:	f10c 3cff 	add.w	ip, ip, #4294967295
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8008760:	b280      	uxth	r0, r0
    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0;
 8008762:	2600      	movs	r6, #0

    switch (command)
 8008764:	2b38      	cmp	r3, #56	; 0x38
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8008766:	81a0      	strh	r0, [r4, #12]
    pHandle->txLength = 0;
 8008768:	81e6      	strh	r6, [r4, #14]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800876a:	fa1f f18c 	uxth.w	r1, ip
 800876e:	fa0f f28c 	sxth.w	r2, ip
    switch (command)
 8008772:	d829      	bhi.n	80087c8 <MCP_ReceivedPacket+0xa0>
 8008774:	2b38      	cmp	r3, #56	; 0x38
 8008776:	d81e      	bhi.n	80087b6 <MCP_ReceivedPacket+0x8e>
 8008778:	e8df f003 	tbb	[pc, r3]
 800877c:	1d1d1d5c 	.word	0x1d1d1d5c
 8008780:	1d1d1d1d 	.word	0x1d1d1d1d
 8008784:	1d1d1d64 	.word	0x1d1d1d64
 8008788:	1d1d1d1d 	.word	0x1d1d1d1d
 800878c:	1d1d1d57 	.word	0x1d1d1d57
 8008790:	1d1d1d1d 	.word	0x1d1d1d1d
 8008794:	1d1d1d4f 	.word	0x1d1d1d4f
 8008798:	1d1d1d1d 	.word	0x1d1d1d1d
 800879c:	1d1d1d49 	.word	0x1d1d1d49
 80087a0:	1d1d1d1d 	.word	0x1d1d1d1d
 80087a4:	1d1d1d69 	.word	0x1d1d1d69
 80087a8:	1d1d1d1d 	.word	0x1d1d1d1d
 80087ac:	1d1d1d45 	.word	0x1d1d1d45
 80087b0:	1d1d1d1d 	.word	0x1d1d1d1d
 80087b4:	74          	.byte	0x74
 80087b5:	00          	.byte	0x00
 80087b6:	2300      	movs	r3, #0
 80087b8:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80087ba:	68a2      	ldr	r2, [r4, #8]
 80087bc:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 80087be:	89e3      	ldrh	r3, [r4, #14]
 80087c0:	3301      	adds	r3, #1
 80087c2:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 80087c4:	b003      	add	sp, #12
 80087c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (command)
 80087c8:	2b68      	cmp	r3, #104	; 0x68
 80087ca:	d062      	beq.n	8008892 <MCP_ReceivedPacket+0x16a>
 80087cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087d0:	d068      	beq.n	80088a4 <MCP_ReceivedPacket+0x17c>
 80087d2:	2b48      	cmp	r3, #72	; 0x48
 80087d4:	d1ef      	bne.n	80087b6 <MCP_ReceivedPacket+0x8e>
        MCI_Clear_Iqdref(pMCI);
 80087d6:	4638      	mov	r0, r7
 80087d8:	f7f9 fa9c 	bl	8001d14 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80087dc:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80087de:	4630      	mov	r0, r6
        break;
 80087e0:	e7eb      	b.n	80087ba <MCP_ReceivedPacket+0x92>
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80087e2:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80087e4:	6822      	ldr	r2, [r4, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80087e6:	3802      	subs	r0, #2
      userCommand = (command >> 3) & 0x1f;
 80087e8:	f3c3 03c7 	ubfx	r3, r3, #3, #8
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80087ec:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 80087ee:	3502      	adds	r5, #2
    pHandle->txLength = 0;
 80087f0:	2100      	movs	r1, #0
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 80087f2:	f013 0f1e 	tst.w	r3, #30
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80087f6:	8992      	ldrh	r2, [r2, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 80087f8:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 80087fa:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0;
 80087fc:	81e1      	strh	r1, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 80087fe:	d037      	beq.n	8008870 <MCP_ReceivedPacket+0x148>
        MCPResponse = MCP_CMD_OK;
 8008800:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8008802:	200d      	movs	r0, #13
 8008804:	e7d9      	b.n	80087ba <MCP_ReceivedPacket+0x92>
        if (IDLE == MCI_GetSTMState(pMCI))
 8008806:	4638      	mov	r0, r7
 8008808:	f7f9 f9bc 	bl	8001b84 <MCI_GetSTMState>
 800880c:	b128      	cbz	r0, 800881a <MCP_ReceivedPacket+0xf2>
          (void)MCI_StopMotor(pMCI);
 800880e:	4638      	mov	r0, r7
 8008810:	f7f9 f9d4 	bl	8001bbc <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008814:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 8008816:	2000      	movs	r0, #0
 8008818:	e7cf      	b.n	80087ba <MCP_ReceivedPacket+0x92>
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 800881a:	4638      	mov	r0, r7
 800881c:	f7f9 f9b8 	bl	8001b90 <MCI_StartMotor>
 8008820:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008824:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8008826:	b2c0      	uxtb	r0, r0
 8008828:	e7c7      	b.n	80087ba <MCP_ReceivedPacket+0x92>
        MCPResponse = RI_GetRegCommandParser(pHandle, txSyncFreeSpace);
 800882a:	4620      	mov	r0, r4
 800882c:	f7fa fb76 	bl	8002f1c <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8008830:	89e3      	ldrh	r3, [r4, #14]
        break;
 8008832:	e7c2      	b.n	80087ba <MCP_ReceivedPacket+0x92>
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8008834:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4;
 8008836:	2104      	movs	r1, #4
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8008838:	2201      	movs	r2, #1
        pHandle->txLength = 4;
 800883a:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 800883c:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800883e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008840:	2000      	movs	r0, #0
      break;
 8008842:	e7ba      	b.n	80087ba <MCP_ReceivedPacket+0x92>
        MCPResponse = RI_SetRegCommandParser(pHandle, txSyncFreeSpace);
 8008844:	4620      	mov	r0, r4
 8008846:	f7fa f88d 	bl	8002964 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800884a:	89e3      	ldrh	r3, [r4, #14]
        break;
 800884c:	e7b5      	b.n	80087ba <MCP_ReceivedPacket+0x92>
        if (RUN == MCI_GetSTMState(pMCI))
 800884e:	4638      	mov	r0, r7
 8008850:	f7f9 f998 	bl	8001b84 <MCI_GetSTMState>
 8008854:	2806      	cmp	r0, #6
 8008856:	d1dd      	bne.n	8008814 <MCP_ReceivedPacket+0xec>
          MCI_StopRamp(pMCI);
 8008858:	4638      	mov	r0, r7
 800885a:	f7f9 f9f3 	bl	8001c44 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800885e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8008860:	2000      	movs	r0, #0
 8008862:	e7aa      	b.n	80087ba <MCP_ReceivedPacket+0x92>
        (void)MCI_FaultAcknowledged(pMCI);
 8008864:	4638      	mov	r0, r7
 8008866:	f7f9 f9c9 	bl	8001bfc <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800886a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800886c:	2000      	movs	r0, #0
        break;
 800886e:	e7a4      	b.n	80087ba <MCP_ReceivedPacket+0x92>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8008870:	3a01      	subs	r2, #1
      userCommand = (command >> 3) & 0x1f;
 8008872:	f003 031f 	and.w	r3, r3, #31
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8008876:	b212      	sxth	r2, r2
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8008878:	490c      	ldr	r1, [pc, #48]	; (80088ac <MCP_ReceivedPacket+0x184>)
 800887a:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 800887e:	2e00      	cmp	r6, #0
 8008880:	d0be      	beq.n	8008800 <MCP_ReceivedPacket+0xd8>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8008882:	68a3      	ldr	r3, [r4, #8]
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	4629      	mov	r1, r5
 8008888:	f104 030e 	add.w	r3, r4, #14
 800888c:	47b0      	blx	r6
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800888e:	89e3      	ldrh	r3, [r4, #14]
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8008890:	e793      	b.n	80087ba <MCP_ReceivedPacket+0x92>
  	    MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8008892:	68a3      	ldr	r3, [r4, #8]
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	4629      	mov	r1, r5
 8008898:	f104 030e 	add.w	r3, r4, #14
 800889c:	f7f9 f8f6 	bl	8001a8c <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80088a0:	89e3      	ldrh	r3, [r4, #14]
        break;
 80088a2:	e78a      	b.n	80087ba <MCP_ReceivedPacket+0x92>
    switch (command)
 80088a4:	4633      	mov	r3, r6
 80088a6:	e7e7      	b.n	8008878 <MCP_ReceivedPacket+0x150>
 80088a8:	20000744 	.word	0x20000744
 80088ac:	200018c0 	.word	0x200018c0

080088b0 <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint8_t i;
    uint16_t *logValue16;
    uint32_t *logValue;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 80088b2:	7fc3      	ldrb	r3, [r0, #31]
 80088b4:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 80088b8:	429a      	cmp	r2, r3
{
 80088ba:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 80088bc:	d002      	beq.n	80088c4 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* nothing to log just waiting next call to MCPA_datalog*/
      pHandle->HFIndex++;
 80088be:	3301      	adds	r3, #1
 80088c0:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 80088c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 80088c4:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 80088ca:	b1a5      	cbz	r5, 80088f6 <MCPA_dataLog+0x46>
 80088cc:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80088ce:	8ba2      	ldrh	r2, [r4, #28]
 80088d0:	42aa      	cmp	r2, r5
 80088d2:	d24e      	bcs.n	8008972 <MCPA_dataLog+0xc2>
 80088d4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 80088d8:	2bfe      	cmp	r3, #254	; 0xfe
 80088da:	d066      	beq.n	80089aa <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 80088dc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80088e0:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex + 2U,
 80088e2:	8b22      	ldrh	r2, [r4, #24]
 80088e4:	6820      	ldr	r0, [r4, #0]
 80088e6:	3202      	adds	r2, #2
 80088e8:	2309      	movs	r3, #9
 80088ea:	6845      	ldr	r5, [r0, #4]
 80088ec:	b292      	uxth	r2, r2
 80088ee:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	8323      	strh	r3, [r4, #24]
}
 80088f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 80088f6:	4601      	mov	r1, r0
 80088f8:	2209      	movs	r2, #9
 80088fa:	f851 0b14 	ldr.w	r0, [r1], #20
 80088fe:	6803      	ldr	r3, [r0, #0]
 8008900:	4798      	blx	r3
 8008902:	b390      	cbz	r0, 800896a <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8008904:	4b4b      	ldr	r3, [pc, #300]	; (8008a34 <MCPA_dataLog+0x184>)
 8008906:	6961      	ldr	r1, [r4, #20]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 800890c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8008910:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer*/
 8008914:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8008918:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 800891a:	4290      	cmp	r0, r2
          pHandle->bufferIndex = 4U;
 800891c:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 800891e:	d101      	bne.n	8008924 <MCPA_dataLog+0x74>
 8008920:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8008922:	e7d4      	b.n	80088ce <MCPA_dataLog+0x1e>
            pHandle->HFNumBuff = pHandle->HFNum;
 8008924:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
            pHandle->MFNumBuff = pHandle->MFNum;
 8008928:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
            pHandle->HFRateBuff = pHandle->HFRate;
 800892c:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
            pHandle->MarkBuff = pHandle->Mark;
 8008930:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            pHandle->HFNumBuff = pHandle->HFNum;
 8008934:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8008938:	185a      	adds	r2, r3, r1
            pHandle->MFNumBuff = pHandle->MFNum;
 800893a:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 800893e:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MFRateBuff = pHandle->MFRate;
 8008940:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
            pHandle->HFRateBuff = pHandle->HFRate;
 8008944:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8008948:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff = pHandle->MFRate;
 800894a:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 800894e:	83a3      	strh	r3, [r4, #28]
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8008950:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8008954:	f001 fba2 	bl	800a09c <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8008958:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800895c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8008960:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8008964:	441a      	add	r2, r3
 8008966:	f001 fb99 	bl	800a09c <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800896a:	8b25      	ldrh	r5, [r4, #24]
 800896c:	2d00      	cmp	r5, #0
 800896e:	d1ad      	bne.n	80088cc <MCPA_dataLog+0x1c>
}
 8008970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008972:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
        logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8008976:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008978:	b36e      	cbz	r6, 80089d6 <MCPA_dataLog+0x126>
 800897a:	68a2      	ldr	r2, [r4, #8]
 800897c:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8008980:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8008982:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8008986:	8800      	ldrh	r0, [r0, #0]
 8008988:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 800898c:	8b25      	ldrh	r5, [r4, #24]
 800898e:	3502      	adds	r5, #2
 8008990:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008992:	4563      	cmp	r3, ip
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8008994:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8008996:	d1f4      	bne.n	8008982 <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 8008998:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800899c:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 800899e:	2bfd      	cmp	r3, #253	; 0xfd
 80089a0:	4618      	mov	r0, r3
 80089a2:	d91d      	bls.n	80089e0 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80089a4:	4295      	cmp	r5, r2
 80089a6:	d897      	bhi.n	80088d8 <MCPA_dataLog+0x28>
}
 80089a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80089aa:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80089ae:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80089b2:	4418      	add	r0, r3
 80089b4:	4298      	cmp	r0, r3
 80089b6:	dd91      	ble.n	80088dc <MCPA_dataLog+0x2c>
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80089b8:	68a7      	ldr	r7, [r4, #8]
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80089ba:	6926      	ldr	r6, [r4, #16]
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80089bc:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 80089c0:	6812      	ldr	r2, [r2, #0]
 80089c2:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80089c4:	1c5a      	adds	r2, r3, #1
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80089c6:	5cf3      	ldrb	r3, [r6, r3]
 80089c8:	441d      	add	r5, r3
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80089ca:	b2d3      	uxtb	r3, r2
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80089cc:	b2ad      	uxth	r5, r5
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80089ce:	4283      	cmp	r3, r0
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80089d0:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80089d2:	dbf3      	blt.n	80089bc <MCPA_dataLog+0x10c>
 80089d4:	e782      	b.n	80088dc <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 80089d6:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 80089da:	28fd      	cmp	r0, #253	; 0xfd
 80089dc:	f63f af71 	bhi.w	80088c2 <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 80089e0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80089e4:	4283      	cmp	r3, r0
 80089e6:	d007      	beq.n	80089f8 <MCPA_dataLog+0x148>
            pHandle->MFIndex ++;
 80089e8:	3301      	adds	r3, #1
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80089ea:	8b25      	ldrh	r5, [r4, #24]
            pHandle->MFIndex ++;
 80089ec:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80089f0:	42aa      	cmp	r2, r5
 80089f2:	f4ff af73 	bcc.w	80088dc <MCPA_dataLog+0x2c>
}
 80089f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80089f8:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 80089fc:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 80089fe:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008a00:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 8008a02:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008a06:	dd12      	ble.n	8008a2e <MCPA_dataLog+0x17e>
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8008a08:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008a0c:	f8d4 c010 	ldr.w	ip, [r4, #16]
              logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8008a10:	8b25      	ldrh	r5, [r4, #24]
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8008a12:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008a1a:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008a1e:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008a20:	441d      	add	r5, r3
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008a22:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008a24:	b2ad      	uxth	r5, r5
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008a26:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008a28:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008a2a:	dbf2      	blt.n	8008a12 <MCPA_dataLog+0x162>
 8008a2c:	e7e0      	b.n	80089f0 <MCPA_dataLog+0x140>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8008a2e:	8b25      	ldrh	r5, [r4, #24]
 8008a30:	e7de      	b.n	80089f0 <MCPA_dataLog+0x140>
 8008a32:	bf00      	nop
 8008a34:	20002730 	.word	0x20002730

08008a38 <MCPA_flushDataLog>:
{
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 8008a38:	8b03      	ldrh	r3, [r0, #24]
 8008a3a:	b19b      	cbz	r3, 8008a64 <MCPA_flushDataLog+0x2c>
{
 8008a3c:	b570      	push	{r4, r5, r6, lr}
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 8008a3e:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8008a42:	2afe      	cmp	r2, #254	; 0xfe
 8008a44:	4604      	mov	r4, r0
 8008a46:	d00e      	beq.n	8008a66 <MCPA_flushDataLog+0x2e>
      {
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
        {
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8008a48:	6941      	ldr	r1, [r0, #20]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8008a4a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8008a4e:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8008a50:	8b22      	ldrh	r2, [r4, #24]
 8008a52:	6820      	ldr	r0, [r4, #0]
 8008a54:	3202      	adds	r2, #2
 8008a56:	2309      	movs	r3, #9
 8008a58:	6845      	ldr	r5, [r0, #4]
 8008a5a:	b292      	uxth	r2, r2
 8008a5c:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	8323      	strh	r3, [r4, #24]
  }   
}
 8008a62:	bd70      	pop	{r4, r5, r6, pc}
 8008a64:	4770      	bx	lr
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008a66:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8008a6a:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8008a6e:	6941      	ldr	r1, [r0, #20]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008a70:	4494      	add	ip, r2
 8008a72:	4562      	cmp	r2, ip
 8008a74:	dae9      	bge.n	8008a4a <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8008a76:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008a78:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8008a7a:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8008a7e:	6800      	ldr	r0, [r0, #0]
 8008a80:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008a82:	5ca8      	ldrb	r0, [r5, r2]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008a84:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008a86:	4403      	add	r3, r0
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008a88:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008a8a:	b29b      	uxth	r3, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008a8c:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8008a8e:	8323      	strh	r3, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8008a90:	dbf3      	blt.n	8008a7a <MCPA_flushDataLog+0x42>
 8008a92:	e7da      	b.n	8008a4a <MCPA_flushDataLog+0x12>

08008a94 <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}

uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8008a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
    uint16_t newID, buffSize;
    uint8_t i;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8008a98:	880f      	ldrh	r7, [r1, #0]
{
 8008a9a:	4604      	mov	r4, r0

    if (buffSize == 0)
 8008a9c:	2f00      	cmp	r7, #0
 8008a9e:	d044      	beq.n	8008b2a <MCPA_cfgLog+0x96>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8008aa0:	6803      	ldr	r3, [r0, #0]
 8008aa2:	89db      	ldrh	r3, [r3, #14]
 8008aa4:	42bb      	cmp	r3, r7
 8008aa6:	d33d      	bcc.n	8008b24 <MCPA_cfgLog+0x90>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8008aa8:	788b      	ldrb	r3, [r1, #2]
 8008aaa:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8008aae:	78ca      	ldrb	r2, [r1, #3]
 8008ab0:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8008ab4:	790b      	ldrb	r3, [r1, #4]
 8008ab6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8008aba:	794e      	ldrb	r6, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/

      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8008abc:	7f83      	ldrb	r3, [r0, #30]
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8008abe:	f880 6027 	strb.w	r6, [r0, #39]	; 0x27
      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8008ac2:	4416      	add	r6, r2
 8008ac4:	429e      	cmp	r6, r3
 8008ac6:	dc52      	bgt.n	8008b6e <MCPA_cfgLog+0xda>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/
 8008ac8:	3106      	adds	r1, #6
      {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008aca:	2e00      	cmp	r6, #0
 8008acc:	d056      	beq.n	8008b7c <MCPA_cfgLog+0xe8>
 8008ace:	2500      	movs	r5, #0
 8008ad0:	4688      	mov	r8, r1
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
 8008ad2:	462e      	mov	r6, r5
 8008ad4:	e011      	b.n	8008afa <MCPA_cfgLog+0x66>
      {
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8008ad6:	68e3      	ldr	r3, [r4, #12]
 8008ad8:	5558      	strb	r0, [r3, r5]
        pCfgData++;/* Point to the next UID */
        pCfgData++;
         logSize = logSize+pHandle->dataSizeTable[i];
 8008ada:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008adc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8008ae0:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
         logSize = logSize+pHandle->dataSizeTable[i];
 8008ae4:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008ae6:	f105 0c01 	add.w	ip, r5, #1
 8008aea:	fa5f f58c 	uxtb.w	r5, ip
 8008aee:	4403      	add	r3, r0
         logSize = logSize+pHandle->dataSizeTable[i];
 8008af0:	4432      	add	r2, r6
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008af2:	429d      	cmp	r5, r3
        pCfgData++;
 8008af4:	4641      	mov	r1, r8
         logSize = logSize+pHandle->dataSizeTable[i];
 8008af6:	b296      	uxth	r6, r2
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008af8:	da11      	bge.n	8008b1e <MCPA_cfgLog+0x8a>
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
 8008afa:	f838 9b02 	ldrh.w	r9, [r8], #2
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 8008afe:	6861      	ldr	r1, [r4, #4]
 8008b00:	4648      	mov	r0, r9
 8008b02:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8008b06:	f7fa fda3 	bl	8003650 <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8008b0a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8008b0e:	42ab      	cmp	r3, r5
 8008b10:	f04f 0002 	mov.w	r0, #2
 8008b14:	d8df      	bhi.n	8008ad6 <MCPA_cfgLog+0x42>
 8008b16:	4648      	mov	r0, r9
 8008b18:	f7fa fd8e 	bl	8003638 <RI_GetIDSize>
 8008b1c:	e7db      	b.n	8008ad6 <MCPA_cfgLog+0x42>
      }

     /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
     if (buffSize < (logSize + 2U + 4U))
 8008b1e:	1db3      	adds	r3, r6, #6
 8008b20:	429f      	cmp	r7, r3
 8008b22:	d21a      	bcs.n	8008b5a <MCPA_cfgLog+0xc6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8008b24:	2009      	movs	r0, #9
      }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return result;
}
 8008b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8008b2a:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 8008b2c:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8008b30:	b153      	cbz	r3, 8008b48 <MCPA_cfgLog+0xb4>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8008b32:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8008b34:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8008b38:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8008b3a:	8b22      	ldrh	r2, [r4, #24]
 8008b3c:	6820      	ldr	r0, [r4, #0]
 8008b3e:	3202      	adds	r2, #2
 8008b40:	6845      	ldr	r5, [r0, #4]
 8008b42:	b292      	uxth	r2, r2
 8008b44:	2309      	movs	r3, #9
 8008b46:	47a8      	blx	r5
  pHandle->bufferIndex = 0;
 8008b48:	2000      	movs	r0, #0
  pHandle->MarkBuff = 0;
 8008b4a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex = 0;
 8008b4e:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 8008b50:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0;
 8008b54:	8320      	strh	r0, [r4, #24]
}
 8008b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       pHandle->bufferTxTrigger = buffSize-logSize-2U; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 8008b5a:	1eba      	subs	r2, r7, #2
 8008b5c:	1b92      	subs	r2, r2, r6
 8008b5e:	8362      	strh	r2, [r4, #26]
       pHandle->Mark = *((uint8_t *) pCfgData);
 8008b60:	780b      	ldrb	r3, [r1, #0]
 8008b62:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
       if (0U == pHandle->Mark)
 8008b66:	b12b      	cbz	r3, 8008b74 <MCPA_cfgLog+0xe0>
  uint8_t result = MCP_CMD_OK;
 8008b68:	2000      	movs	r0, #0
}
 8008b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       result = MCP_ERROR_BAD_RAW_FORMAT;
 8008b6e:	200a      	movs	r0, #10
}
 8008b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8008b74:	8b23      	ldrh	r3, [r4, #24]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0e6      	beq.n	8008b48 <MCPA_cfgLog+0xb4>
 8008b7a:	e7da      	b.n	8008b32 <MCPA_cfgLog+0x9e>
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8008b7c:	2306      	movs	r3, #6
 8008b7e:	e7cf      	b.n	8008b20 <MCPA_cfgLog+0x8c>

08008b80 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8008b80:	8a03      	ldrh	r3, [r0, #16]
 8008b82:	8b42      	ldrh	r2, [r0, #26]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d306      	bcc.n	8008b96 <NTC_SetFaultState+0x16>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8008b88:	8b82      	ldrh	r2, [r0, #28]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d901      	bls.n	8008b92 <NTC_SetFaultState+0x12>
    {
      hFault = MC_NO_ERROR;
 8008b8e:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
}
 8008b90:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 8008b92:	8ac0      	ldrh	r0, [r0, #22]
 8008b94:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 8008b96:	2008      	movs	r0, #8
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop

08008b9c <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	8203      	strh	r3, [r0, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop

08008ba4 <NTC_Init>:
{
 8008ba4:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8008ba6:	7803      	ldrb	r3, [r0, #0]
{
 8008ba8:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8008baa:	b123      	cbz	r3, 8008bb6 <NTC_Init+0x12>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8008bac:	8a43      	ldrh	r3, [r0, #18]
 8008bae:	8203      	strh	r3, [r0, #16]
      pHandle->hFaultState = MC_NO_ERROR;
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	82c2      	strh	r2, [r0, #22]
}
 8008bb4:	bd10      	pop	{r4, pc}
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8008bb6:	3004      	adds	r0, #4
 8008bb8:	f7fa fdda 	bl	8003770 <RCM_RegisterRegConv>
 8008bbc:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
      NTC_Clear(pHandle);
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f7ff ffeb 	bl	8008b9c <NTC_Clear>
}
 8008bc6:	bd10      	pop	{r4, pc}

08008bc8 <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle)
{
 8008bc8:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8008bca:	7803      	ldrb	r3, [r0, #0]
{
 8008bcc:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8008bce:	b113      	cbz	r3, 8008bd6 <NTC_CalcAvTemp+0xe>

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
    }
    else  /* case VIRTUAL_SENSOR */
    {
      pHandle->hFaultState = MC_NO_ERROR;
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	82e0      	strh	r0, [r4, #22]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8008bd4:	bd10      	pop	{r4, pc}
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8008bd6:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8008bda:	f7fa feb1 	bl	8003940 <RCM_ExecRegularConv>
      if (0xFFFFU == hAux)
 8008bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008be2:	4298      	cmp	r0, r3
 8008be4:	d007      	beq.n	8008bf6 <NTC_CalcAvTemp+0x2e>
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8008be6:	8b23      	ldrh	r3, [r4, #24]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8008be8:	8a22      	ldrh	r2, [r4, #16]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8008bea:	1e59      	subs	r1, r3, #1
        wtemp += hAux;
 8008bec:	fb01 0002 	mla	r0, r1, r2, r0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8008bf0:	fbb0 f0f3 	udiv	r0, r0, r3
        pHandle->hAvTemp_d = (uint16_t)wtemp;
 8008bf4:	8220      	strh	r0, [r4, #16]
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	f7ff ffc2 	bl	8008b80 <NTC_SetFaultState>
 8008bfc:	82e0      	strh	r0, [r4, #22]
}
 8008bfe:	bd10      	pop	{r4, pc}

08008c00 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8008c00:	7803      	ldrb	r3, [r0, #0]
 8008c02:	b95b      	cbnz	r3, 8008c1c <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8008c04:	8a02      	ldrh	r2, [r0, #16]
      wTemp -= ((int32_t)pHandle->wV0);
 8008c06:	6a01      	ldr	r1, [r0, #32]
      wTemp *= pHandle->hSensitivity;
 8008c08:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8008c0c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
      wTemp -= ((int32_t)pHandle->wV0);
 8008c0e:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8008c10:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8008c14:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8008c18:	b200      	sxth	r0, r0
 8008c1a:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8008c1c:	8a80      	ldrh	r0, [r0, #20]
}
 8008c1e:	b200      	sxth	r0, r0
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop

08008c24 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8008c24:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8008c26:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8008c28:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8008c2a:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8008c2c:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8008c2e:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8008c30:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008c32:	4770      	bx	lr

08008c34 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8008c34:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008c36:	4770      	bx	lr

08008c38 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8008c38:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008c3a:	4770      	bx	lr

08008c3c <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8008c3c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop

08008c44 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8008c44:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop

08008c4c <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8008c4c:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8008c4e:	4770      	bx	lr

08008c50 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8008c50:	8b80      	ldrh	r0, [r0, #28]
 8008c52:	4770      	bx	lr

08008c54 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8008c54:	2301      	movs	r3, #1
 8008c56:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8008c58:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8008c5a:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop

08008c60 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8008c60:	8bc0      	ldrh	r0, [r0, #30]
 8008c62:	4770      	bx	lr

08008c64 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8008c64:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008c66:	4770      	bx	lr

08008c68 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8008c68:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008c6a:	4770      	bx	lr

08008c6c <PID_SetKIDivisorPOW2>:
{
 8008c6c:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8008c6e:	2301      	movs	r3, #1
{
 8008c70:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8008c72:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8008c74:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8008c78:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8008c7a:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8008c7c:	8343      	strh	r3, [r0, #26]
{
 8008c7e:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8008c80:	f7ff fff2 	bl	8008c68 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8008c84:	4902      	ldr	r1, [pc, #8]	; (8008c90 <PID_SetKIDivisorPOW2+0x24>)
 8008c86:	4628      	mov	r0, r5
 8008c88:	40a1      	lsls	r1, r4
 8008c8a:	f7ff ffeb 	bl	8008c64 <PID_SetLowerIntegralTermLimit>
}
 8008c8e:	bd38      	pop	{r3, r4, r5, pc}
 8008c90:	ffff8001 	.word	0xffff8001

08008c94 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8008c94:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008c96:	4770      	bx	lr

08008c98 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8008c98:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop

08008ca0 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8008ca0:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 8008ca2:	4770      	bx	lr

08008ca4 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8008ca8:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8008caa:	8483      	strh	r3, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop

08008cb0 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8008cb0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8008cb4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8008cb8:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 8008cbc:	b510      	push	{r4, lr}
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8008cbe:	fb01 f303 	mul.w	r3, r1, r3
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8008cc2:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
    if (0 == pHandle->hKiGain)
 8008cc6:	b162      	cbz	r2, 8008ce2 <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8008cc8:	fb01 f202 	mul.w	r2, r1, r2
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8008ccc:	6881      	ldr	r1, [r0, #8]

      if (wIntegral_sum_temp < 0)
 8008cce:	188c      	adds	r4, r1, r2
 8008cd0:	d420      	bmi.n	8008d14 <PI_Controller+0x64>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 8008cd2:	2900      	cmp	r1, #0
 8008cd4:	db2a      	blt.n	8008d2c <PI_Controller+0x7c>
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8008cd6:	68c2      	ldr	r2, [r0, #12]
 8008cd8:	42a2      	cmp	r2, r4
 8008cda:	db02      	blt.n	8008ce2 <PI_Controller+0x32>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8008cdc:	6902      	ldr	r2, [r0, #16]
 8008cde:	42a2      	cmp	r2, r4
 8008ce0:	dd22      	ble.n	8008d28 <PI_Controller+0x78>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8008ce2:	8b81      	ldrh	r1, [r0, #28]
 8008ce4:	410b      	asrs	r3, r1
 8008ce6:	8bc1      	ldrh	r1, [r0, #30]
 8008ce8:	fa42 f101 	asr.w	r1, r2, r1
 8008cec:	440b      	add	r3, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8008cee:	459c      	cmp	ip, r3
 8008cf0:	da05      	bge.n	8008cfe <PI_Controller+0x4e>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8008cf2:	ebac 0303 	sub.w	r3, ip, r3
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8008cf6:	441a      	add	r2, r3
 8008cf8:	6082      	str	r2, [r0, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8008cfa:	4660      	mov	r0, ip
 8008cfc:	bd10      	pop	{r4, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8008cfe:	459e      	cmp	lr, r3
      wDischarge = hLowerOutputLimit - wOutput_32;
 8008d00:	bfc9      	itett	gt
 8008d02:	ebae 0303 	subgt.w	r3, lr, r3
    returnValue = (int16_t)wOutput_32;
 8008d06:	fa0f fc83 	sxthle.w	ip, r3
    pHandle->wIntegralTerm += wDischarge;
 8008d0a:	18d2      	addgt	r2, r2, r3
 8008d0c:	46f4      	movgt	ip, lr
 8008d0e:	6082      	str	r2, [r0, #8]
}
 8008d10:	4660      	mov	r0, ip
 8008d12:	bd10      	pop	{r4, pc}
        if (pHandle->wIntegralTerm > 0)
 8008d14:	2900      	cmp	r1, #0
 8008d16:	ddde      	ble.n	8008cd6 <PI_Controller+0x26>
          if (wIntegral_Term > 0)
 8008d18:	2a00      	cmp	r2, #0
 8008d1a:	dddc      	ble.n	8008cd6 <PI_Controller+0x26>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8008d1c:	68c2      	ldr	r2, [r0, #12]
 8008d1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d22:	428a      	cmp	r2, r1
 8008d24:	d1dd      	bne.n	8008ce2 <PI_Controller+0x32>
            wIntegral_sum_temp = INT32_MAX;
 8008d26:	4614      	mov	r4, r2
 8008d28:	4622      	mov	r2, r4
 8008d2a:	e7da      	b.n	8008ce2 <PI_Controller+0x32>
            wIntegral_sum_temp = -INT32_MAX;
 8008d2c:	4902      	ldr	r1, [pc, #8]	; (8008d38 <PI_Controller+0x88>)
 8008d2e:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 8008d32:	bf28      	it	cs
 8008d34:	460c      	movcs	r4, r1
 8008d36:	e7ce      	b.n	8008cd6 <PI_Controller+0x26>
 8008d38:	80000001 	.word	0x80000001

08008d3c <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8008d3c:	6882      	ldr	r2, [r0, #8]
{
 8008d3e:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8008d40:	89d1      	ldrh	r1, [r2, #14]
 8008d42:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8008d46:	8993      	ldrh	r3, [r2, #12]
 8008d48:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8008d4c:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8008d50:	fb13 230c 	smlabb	r3, r3, ip, r2
 8008d54:	2b00      	cmp	r3, #0

    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8008d56:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8008d5a:	bfbc      	itt	lt
 8008d5c:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8008d60:	33ff      	addlt	r3, #255	; 0xff
    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8008d62:	ebc2 4323 	rsb	r3, r2, r3, asr #16
 8008d66:	eb02 1323 	add.w	r3, r2, r3, asr #4
 8008d6a:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 8008d6c:	f85d fb04 	ldr.w	pc, [sp], #4

08008d70 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 8008d70:	2300      	movs	r3, #0
 8008d72:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop

08008d78 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float The average measured motor power expressed in Watts.
  */
__weak float PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8008d78:	b538      	push	{r3, r4, r5, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8008d7a:	f9b0 5000 	ldrsh.w	r5, [r0]
{
 8008d7e:	4604      	mov	r4, r0
  PowerW = (pHandle->hAvrgElMotorPower * VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8008d80:	68c0      	ldr	r0, [r0, #12]
 8008d82:	f7ff fc9b 	bl	80086bc <VBS_GetAvBusVoltage_V>
 8008d86:	fb05 f300 	mul.w	r3, r5, r0
 8008d8a:	ee00 3a10 	vmov	s0, r3
 8008d8e:	edd4 7a01 	vldr	s15, [r4, #4]
 8008d92:	eeb8 0ac0 	vcvt.f32.s32	s0, s0

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8008d96:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008d9a:	bd38      	pop	{r3, r4, r5, pc}

08008d9c <startTimers>:
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 8008d9c:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8008d9e:	4b18      	ldr	r3, [pc, #96]	; (8008e00 <startTimers+0x64>)
 8008da0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008da2:	07d2      	lsls	r2, r2, #31
 8008da4:	b082      	sub	sp, #8
 8008da6:	d415      	bmi.n	8008dd4 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008da8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008daa:	f042 0201 	orr.w	r2, r2, #1
 8008dae:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008db0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008db2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008db6:	f002 0201 	and.w	r2, r2, #1
 8008dba:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8008dbc:	9a01      	ldr	r2, [sp, #4]
 8008dbe:	694a      	ldr	r2, [r1, #20]
 8008dc0:	f042 0201 	orr.w	r2, r2, #1
 8008dc4:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8008dc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008dc8:	f022 0201 	bic.w	r2, r2, #1
 8008dcc:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8008dce:	b002      	add	sp, #8
 8008dd0:	bc30      	pop	{r4, r5}
 8008dd2:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8008dd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008dd8:	4c0a      	ldr	r4, [pc, #40]	; (8008e04 <startTimers+0x68>)
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	6859      	ldr	r1, [r3, #4]
 8008dde:	4d0a      	ldr	r5, [pc, #40]	; (8008e08 <startTimers+0x6c>)
 8008de0:	4021      	ands	r1, r4
 8008de2:	f041 0120 	orr.w	r1, r1, #32
 8008de6:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8008de8:	6958      	ldr	r0, [r3, #20]
 8008dea:	f040 0001 	orr.w	r0, r0, #1
 8008dee:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008df0:	6859      	ldr	r1, [r3, #4]
 8008df2:	402a      	ands	r2, r5
 8008df4:	4021      	ands	r1, r4
 8008df6:	430a      	orrs	r2, r1
 8008df8:	605a      	str	r2, [r3, #4]
}
 8008dfa:	b002      	add	sp, #8
 8008dfc:	bc30      	pop	{r4, r5}
 8008dfe:	4770      	bx	lr
 8008e00:	40021000 	.word	0x40021000
 8008e04:	fdffff8f 	.word	0xfdffff8f
 8008e08:	02000070 	.word	0x02000070

08008e0c <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8008e0c:	3201      	adds	r2, #1
{
 8008e0e:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8008e10:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008e12:	f06f 0602 	mvn.w	r6, #2
 8008e16:	0155      	lsls	r5, r2, #5
 8008e18:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8008e1a:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8008e1c:	f893 c000 	ldrb.w	ip, [r3]
 8008e20:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8008e24:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8008e28:	d80c      	bhi.n	8008e44 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8008e2a:	6904      	ldr	r4, [r0, #16]
 8008e2c:	07a4      	lsls	r4, r4, #30
 8008e2e:	d5f5      	bpl.n	8008e1c <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8008e30:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8008e34:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8008e36:	6106      	str	r6, [r0, #16]
 8008e38:	d8f0      	bhi.n	8008e1c <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8008e3a:	781c      	ldrb	r4, [r3, #0]
 8008e3c:	2c0f      	cmp	r4, #15
 8008e3e:	d8ed      	bhi.n	8008e1c <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8008e40:	2301      	movs	r3, #1
 8008e42:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_POW_COM
  }
#endif
  }
 8008e44:	bd70      	pop	{r4, r5, r6, pc}
 8008e46:	bf00      	nop

08008e48 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008e48:	6883      	ldr	r3, [r0, #8]
 8008e4a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008e4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e52:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008e54:	6883      	ldr	r3, [r0, #8]
 8008e56:	00d9      	lsls	r1, r3, #3
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 8008e58:	b082      	sub	sp, #8
 8008e5a:	d418      	bmi.n	8008e8e <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 8008e5c:	4b24      	ldr	r3, [pc, #144]	; (8008ef0 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 8008e5e:	6882      	ldr	r2, [r0, #8]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4924      	ldr	r1, [pc, #144]	; (8008ef4 <R3_2_ADCxInit+0xac>)
 8008e64:	099b      	lsrs	r3, r3, #6
 8008e66:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8008e6a:	fba1 1303 	umull	r1, r3, r1, r3
 8008e6e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8008e72:	099b      	lsrs	r3, r3, #6
 8008e74:	005b      	lsls	r3, r3, #1
 8008e76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008e7a:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 8008e7c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008e7e:	9b01      	ldr	r3, [sp, #4]
 8008e80:	b12b      	cbz	r3, 8008e8e <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8008e82:	9b01      	ldr	r3, [sp, #4]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8008e88:	9b01      	ldr	r3, [sp, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1f9      	bne.n	8008e82 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8008e8e:	6883      	ldr	r3, [r0, #8]
 8008e90:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008e94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e9c:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008e9e:	6883      	ldr	r3, [r0, #8]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	dbfc      	blt.n	8008e9e <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8008ea4:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0
  * following a calibration phase, could have no effect on ADC
  * within certain AHB/ADC clock ratio.
  */
  while (0U == LL_ADC_IsActiveFlag_ADRDY(ADCx))
 8008ea6:	07da      	lsls	r2, r3, #31
 8008ea8:	d408      	bmi.n	8008ebc <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 8008eaa:	4a13      	ldr	r2, [pc, #76]	; (8008ef8 <R3_2_ADCxInit+0xb0>)
 8008eac:	6883      	ldr	r3, [r0, #8]
 8008eae:	4013      	ands	r3, r2
 8008eb0:	f043 0301 	orr.w	r3, r3, #1
 8008eb4:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8008eb6:	6803      	ldr	r3, [r0, #0]
 8008eb8:	07db      	lsls	r3, r3, #31
 8008eba:	d5f7      	bpl.n	8008eac <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8008ebc:	6882      	ldr	r2, [r0, #8]
 8008ebe:	490e      	ldr	r1, [pc, #56]	; (8008ef8 <R3_2_ADCxInit+0xb0>)
 8008ec0:	400a      	ands	r2, r1
 8008ec2:	f042 0208 	orr.w	r2, r2, #8
 8008ec6:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8008ec8:	6882      	ldr	r2, [r0, #8]
 8008eca:	400a      	ands	r2, r1
 8008ecc:	f042 0220 	orr.w	r2, r2, #32
 8008ed0:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8008ed2:	68c3      	ldr	r3, [r0, #12]
 8008ed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ed8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008edc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ee0:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 8008ee2:	6883      	ldr	r3, [r0, #8]
 8008ee4:	400b      	ands	r3, r1
 8008ee6:	f043 0304 	orr.w	r3, r3, #4
 8008eea:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode(ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY);

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
}
 8008eec:	b002      	add	sp, #8
 8008eee:	4770      	bx	lr
 8008ef0:	20000428 	.word	0x20000428
 8008ef4:	053e2d63 	.word	0x053e2d63
 8008ef8:	7fffffc0 	.word	0x7fffffc0

08008efc <R3_2_GetPhaseCurrents>:
  * @brief  Computes and stores in @p pHdl handler the latest converted motor phase currents in @p Iab ab_t format.
  *
  */
__weak void R3_2_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8008efc:	b1d9      	cbz	r1, 8008f36 <R3_2_GetPhaseCurrents+0x3a>
  {
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008efe:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 8008f02:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
{
 8008f06:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008f08:	689c      	ldr	r4, [r3, #8]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8008f0a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008f0e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8008f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8008f12:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8008f16:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8008f1a:	6863      	ldr	r3, [r4, #4]
 8008f1c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f24:	6063      	str	r3, [r4, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 8008f26:	2a05      	cmp	r2, #5
 8008f28:	f200 80a0 	bhi.w	800906c <R3_2_GetPhaseCurrents+0x170>
 8008f2c:	e8df f002 	tbb	[pc, r2]
 8008f30:	043b3b1d 	.word	0x043b3b1d
 8008f34:	1d04      	.short	0x1d04
 8008f36:	4770      	bx	lr
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008f38:	6f04      	ldr	r4, [r0, #112]	; 0x70

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 8008f3a:	4b50      	ldr	r3, [pc, #320]	; (800907c <R3_2_GetPhaseCurrents+0x180>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008f3c:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8008f3e:	429c      	cmp	r4, r3
 8008f40:	db05      	blt.n	8008f4e <R3_2_GetPhaseCurrents+0x52>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 8008f42:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008f46:	f2c0 808f 	blt.w	8009068 <R3_2_GetPhaseCurrents+0x16c>
        {
          Iab->a = INT16_MAX;
 8008f4a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8008f4e:	800b      	strh	r3, [r1, #0]
        {
          Iab->a = (int16_t)Aux;
        }

        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8008f50:	6f42      	ldr	r2, [r0, #116]	; 0x74

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 8008f52:	4d4a      	ldr	r5, [pc, #296]	; (800907c <R3_2_GetPhaseCurrents+0x180>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8008f54:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 8008f56:	42aa      	cmp	r2, r5
 8008f58:	da5d      	bge.n	8009016 <R3_2_GetPhaseCurrents+0x11a>

      default:
        break;
    }

    pHandle->_Super.Ia = Iab->a;
 8008f5a:	f9b1 c000 	ldrsh.w	ip, [r1]
          Iab->b = -INT16_MAX;
 8008f5e:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008f60:	fa1f f38c 	uxth.w	r3, ip
 8008f64:	f248 0201 	movw	r2, #32769	; 0x8001
 8008f68:	e013      	b.n	8008f92 <R3_2_GetPhaseCurrents+0x96>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8008f6a:	6f44      	ldr	r4, [r0, #116]	; 0x74
        if (Aux < -INT16_MAX)
 8008f6c:	4b43      	ldr	r3, [pc, #268]	; (800907c <R3_2_GetPhaseCurrents+0x180>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8008f6e:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8008f70:	429c      	cmp	r4, r3
 8008f72:	da46      	bge.n	8009002 <R3_2_GetPhaseCurrents+0x106>
          Iab->b = -INT16_MAX;
 8008f74:	804b      	strh	r3, [r1, #2]
 8008f76:	461c      	mov	r4, r3
 8008f78:	f248 0201 	movw	r2, #32769	; 0x8001
 8008f7c:	461d      	mov	r5, r3
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8008f7e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8008f80:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 8008f82:	1b1c      	subs	r4, r3, r4
        if (Aux > INT16_MAX)
 8008f84:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008f88:	db22      	blt.n	8008fd0 <R3_2_GetPhaseCurrents+0xd4>
          Iab->a = INT16_MAX;
 8008f8a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8008f8e:	800b      	strh	r3, [r1, #0]
 8008f90:	469c      	mov	ip, r3
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008f92:	4413      	add	r3, r2
 8008f94:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 8008f96:	f8a0 5052 	strh.w	r5, [r0, #82]	; 0x52
    pHandle->_Super.Ia = Iab->a;
 8008f9a:	f8a0 c050 	strh.w	ip, [r0, #80]	; 0x50
  }
}
 8008f9e:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8008fa0:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
 8008fa4:	4770      	bx	lr
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008fa6:	6f04      	ldr	r4, [r0, #112]	; 0x70
        if (Aux < -INT16_MAX)
 8008fa8:	4b34      	ldr	r3, [pc, #208]	; (800907c <R3_2_GetPhaseCurrents+0x180>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8008faa:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8008fac:	429c      	cmp	r4, r3
 8008fae:	da1e      	bge.n	8008fee <R3_2_GetPhaseCurrents+0xf2>
          Iab->a = -INT16_MAX;
 8008fb0:	461c      	mov	r4, r3
 8008fb2:	800b      	strh	r3, [r1, #0]
 8008fb4:	46a4      	mov	ip, r4
 8008fb6:	f248 0301 	movw	r3, #32769	; 0x8001
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8008fba:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8008fbc:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 8008fbe:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 8008fc0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008fc4:	db0c      	blt.n	8008fe0 <R3_2_GetPhaseCurrents+0xe4>
          Iab->b = INT16_MAX;
 8008fc6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008fca:	804a      	strh	r2, [r1, #2]
 8008fcc:	4615      	mov	r5, r2
 8008fce:	e7e0      	b.n	8008f92 <R3_2_GetPhaseCurrents+0x96>
        else  if (Aux < -INT16_MAX)
 8008fd0:	4e2a      	ldr	r6, [pc, #168]	; (800907c <R3_2_GetPhaseCurrents+0x180>)
 8008fd2:	42b4      	cmp	r4, r6
 8008fd4:	da42      	bge.n	800905c <R3_2_GetPhaseCurrents+0x160>
          Iab->a = -INT16_MAX;
 8008fd6:	800e      	strh	r6, [r1, #0]
 8008fd8:	f248 0301 	movw	r3, #32769	; 0x8001
 8008fdc:	46b4      	mov	ip, r6
 8008fde:	e7d8      	b.n	8008f92 <R3_2_GetPhaseCurrents+0x96>
        else  if (Aux < -INT16_MAX)
 8008fe0:	4d26      	ldr	r5, [pc, #152]	; (800907c <R3_2_GetPhaseCurrents+0x180>)
 8008fe2:	42aa      	cmp	r2, r5
 8008fe4:	da36      	bge.n	8009054 <R3_2_GetPhaseCurrents+0x158>
          Iab->b = -INT16_MAX;
 8008fe6:	804d      	strh	r5, [r1, #2]
 8008fe8:	f248 0201 	movw	r2, #32769	; 0x8001
 8008fec:	e7d1      	b.n	8008f92 <R3_2_GetPhaseCurrents+0x96>
        else  if (Aux > INT16_MAX)
 8008fee:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008ff2:	db29      	blt.n	8009048 <R3_2_GetPhaseCurrents+0x14c>
          Iab->a = INT16_MAX;
 8008ff4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	800a      	strh	r2, [r1, #0]
 8008ffc:	4614      	mov	r4, r2
 8008ffe:	4694      	mov	ip, r2
 8009000:	e7db      	b.n	8008fba <R3_2_GetPhaseCurrents+0xbe>
        else  if (Aux > INT16_MAX)
 8009002:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8009006:	db1b      	blt.n	8009040 <R3_2_GetPhaseCurrents+0x144>
          Iab->b = INT16_MAX;
 8009008:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800900c:	461a      	mov	r2, r3
 800900e:	804b      	strh	r3, [r1, #2]
 8009010:	461c      	mov	r4, r3
 8009012:	461d      	mov	r5, r3
 8009014:	e7b3      	b.n	8008f7e <R3_2_GetPhaseCurrents+0x82>
        else  if (Aux > INT16_MAX)
 8009016:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800901a:	db09      	blt.n	8009030 <R3_2_GetPhaseCurrents+0x134>
          Iab->b = INT16_MAX;
 800901c:	f647 73ff 	movw	r3, #32767	; 0x7fff
    pHandle->_Super.Ia = Iab->a;
 8009020:	f9b1 c000 	ldrsh.w	ip, [r1]
          Iab->b = INT16_MAX;
 8009024:	804b      	strh	r3, [r1, #2]
 8009026:	461a      	mov	r2, r3
 8009028:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800902a:	fa1f f38c 	uxth.w	r3, ip
 800902e:	e7b0      	b.n	8008f92 <R3_2_GetPhaseCurrents+0x96>
    pHandle->_Super.Ia = Iab->a;
 8009030:	f9b1 c000 	ldrsh.w	ip, [r1]
          Iab->b = (int16_t)Aux;
 8009034:	b215      	sxth	r5, r2
 8009036:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009038:	fa1f f38c 	uxth.w	r3, ip
 800903c:	b292      	uxth	r2, r2
 800903e:	e7a8      	b.n	8008f92 <R3_2_GetPhaseCurrents+0x96>
          Iab->b = (int16_t)Aux;
 8009040:	b225      	sxth	r5, r4
 8009042:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009044:	b2a2      	uxth	r2, r4
 8009046:	e79a      	b.n	8008f7e <R3_2_GetPhaseCurrents+0x82>
          Iab->a = (int16_t)Aux;
 8009048:	fa0f fc84 	sxth.w	ip, r4
 800904c:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009050:	b2a3      	uxth	r3, r4
 8009052:	e7b2      	b.n	8008fba <R3_2_GetPhaseCurrents+0xbe>
          Iab->b = (int16_t)Aux;
 8009054:	b215      	sxth	r5, r2
 8009056:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009058:	b292      	uxth	r2, r2
 800905a:	e79a      	b.n	8008f92 <R3_2_GetPhaseCurrents+0x96>
          Iab->a = (int16_t)Aux;
 800905c:	fa0f fc84 	sxth.w	ip, r4
 8009060:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009064:	b2a3      	uxth	r3, r4
 8009066:	e794      	b.n	8008f92 <R3_2_GetPhaseCurrents+0x96>
          Iab->a = (int16_t)Aux;
 8009068:	800c      	strh	r4, [r1, #0]
 800906a:	e771      	b.n	8008f50 <R3_2_GetPhaseCurrents+0x54>
    pHandle->_Super.Ia = Iab->a;
 800906c:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 8009070:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009074:	880b      	ldrh	r3, [r1, #0]
 8009076:	884a      	ldrh	r2, [r1, #2]
 8009078:	e78b      	b.n	8008f92 <R3_2_GetPhaseCurrents+0x96>
 800907a:	bf00      	nop
 800907c:	ffff8001 	.word	0xffff8001

08009080 <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 8009080:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009082:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8009086:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 800908a:	f880 406a 	strb.w	r4, [r0, #106]	; 0x6a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800908e:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009092:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8009094:	8fc4      	ldrh	r4, [r0, #62]	; 0x3e
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009096:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8009098:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800909a:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 800909e:	f8b0 0042 	ldrh.w	r0, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR2, CompareValue);
 80090a2:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 80090a4:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 80090a6:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80090a8:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80090aa:	4904      	ldr	r1, [pc, #16]	; (80090bc <R3_2_SetADCSampPointPolarization+0x3c>)
 80090ac:	685b      	ldr	r3, [r3, #4]
}
 80090ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80090b2:	420b      	tst	r3, r1
}
 80090b4:	bf14      	ite	ne
 80090b6:	2001      	movne	r0, #1
 80090b8:	2000      	moveq	r0, #0
 80090ba:	4770      	bx	lr
 80090bc:	02000070 	.word	0x02000070

080090c0 <R3_2_HFCurrentsPolarizationAB>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 80090c0:	b341      	cbz	r1, 8009114 <R3_2_HFCurrentsPolarizationAB+0x54>
{
 80090c2:	b430      	push	{r4, r5}
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80090c4:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80090c8:	f890 4081 	ldrb.w	r4, [r0, #129]	; 0x81
 80090cc:	689a      	ldr	r2, [r3, #8]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 80090ce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80090d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80090d4:	6e5d      	ldr	r5, [r3, #100]	; 0x64
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 80090d6:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80090da:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80090de:	6853      	ldr	r3, [r2, #4]
 80090e0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80090e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090e8:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 80090ea:	f890 c080 	ldrb.w	ip, [r0, #128]	; 0x80
 80090ee:	f1bc 0f0f 	cmp.w	ip, #15
 80090f2:	d80b      	bhi.n	800910c <R3_2_HFCurrentsPolarizationAB+0x4c>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 80090f4:	6f03      	ldr	r3, [r0, #112]	; 0x70
      pHandle-> PhaseBOffset += ADCDataReg2;
 80090f6:	6f42      	ldr	r2, [r0, #116]	; 0x74
      pHandle-> PhaseAOffset += ADCDataReg1;
 80090f8:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 80090fa:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
      pHandle-> PhaseBOffset += ADCDataReg2;
 80090fe:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 8009100:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 8009102:	e9c0 421c 	strd	r4, r2, [r0, #112]	; 0x70
      pHandle->PolarizationCounter++;
 8009106:	b2db      	uxtb	r3, r3
 8009108:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 800910c:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 800910e:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 8009110:	600b      	str	r3, [r1, #0]
}
 8009112:	4770      	bx	lr
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop

08009118 <R3_2_HFCurrentsPolarizationC>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationC(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8009118:	b311      	cbz	r1, 8009160 <R3_2_HFCurrentsPolarizationC+0x48>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800911a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800911e:	f890 c081 	ldrb.w	ip, [r0, #129]	; 0x81
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009122:	689a      	ldr	r2, [r3, #8]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8009124:	eb03 038c 	add.w	r3, r3, ip, lsl #2
{
 8009128:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800912a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800912c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009130:	6853      	ldr	r3, [r2, #4]
 8009132:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800913a:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 800913c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8009140:	2b0f      	cmp	r3, #15
 8009142:	d808      	bhi.n	8009156 <R3_2_HFCurrentsPolarizationC+0x3e>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 8009144:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
      pHandle-> PhaseCOffset += ADCDataReg2;
 8009148:	6f82      	ldr	r2, [r0, #120]	; 0x78
      pHandle->PolarizationCounter++;
 800914a:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 800914c:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 800914e:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 8009150:	6782      	str	r2, [r0, #120]	; 0x78
      pHandle->PolarizationCounter++;
 8009152:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8009156:	2300      	movs	r3, #0
    Iab->b = 0;
  }
}
 8009158:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 800915c:	600b      	str	r3, [r1, #0]
}
 800915e:	4770      	bx	lr
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop

08009164 <R3_2_TurnOnLowSides>:
  * @param  ticks: Timer ticks value to be applied
  *                Min value: 0 (low sides ON)
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
__weak void R3_2_TurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
 8009164:	b410      	push	{r4}
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009166:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88

  pHandle->_Super.TurnOnLowSidesAction = true;
 800916a:	2301      	movs	r3, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800916c:	68a2      	ldr	r2, [r4, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800916e:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009172:	f06f 0301 	mvn.w	r3, #1
 8009176:	6113      	str	r3, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009178:	6351      	str	r1, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800917a:	6391      	str	r1, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800917c:	63d1      	str	r1, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800917e:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1(TIMx, ticks);
  LL_TIM_OC_SetCompareCH2(TIMx, ticks);
  LL_TIM_OC_SetCompareCH3(TIMx, ticks);

  /* Wait until next update */
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8009180:	07db      	lsls	r3, r3, #31
 8009182:	d5fc      	bpl.n	800917e <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009184:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8009186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800918a:	6453      	str	r3, [r2, #68]	; 0x44
  }

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 800918c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8009190:	2b02      	cmp	r3, #2
 8009192:	d10b      	bne.n	80091ac <R3_2_TurnOnLowSides+0x48>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8009194:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8009198:	f8b4 00ac 	ldrh.w	r0, [r4, #172]	; 0xac
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800919c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800919e:	6190      	str	r0, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80091a0:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80091a4:	f8b4 20b0 	ldrh.w	r2, [r4, #176]	; 0xb0
 80091a8:	6188      	str	r0, [r1, #24]
 80091aa:	619a      	str	r2, [r3, #24]
  else
  {
    /* Nothing to do */
  }
  return;
}
 80091ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop

080091b4 <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80091b4:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 80091b8:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80091bc:	688b      	ldr	r3, [r1, #8]
  pHandle->ADCRegularLocked = true;
 80091be:	f04f 0c01 	mov.w	ip, #1
{
 80091c2:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked = true;
 80091c4:	f880 c08c 	strb.w	ip, [r0, #140]	; 0x8c
  pHandle->_Super.TurnOnLowSidesAction = false;
 80091c8:	f04f 0c00 	mov.w	ip, #0
 80091cc:	f880 c06b 	strb.w	ip, [r0, #107]	; 0x6b
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 80091d0:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80091d2:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 80091d4:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 80091d6:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80091d8:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80091da:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 80091de:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80091e0:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80091e2:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 80091e4:	07d2      	lsls	r2, r2, #31
 80091e6:	d5fc      	bpl.n	80091e2 <R3_2_SwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80091e8:	f06f 0201 	mvn.w	r2, #1
 80091ec:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80091ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80091f4:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80091f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80091fc:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->pParams_str->LowSideOutputs))
 80091fe:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8009202:	2a02      	cmp	r2, #2
 8009204:	d008      	beq.n	8009218 <R3_2_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009206:	f06f 0201 	mvn.w	r2, #1
 800920a:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 8009212:	bc30      	pop	{r4, r5}
 8009214:	60da      	str	r2, [r3, #12]
 8009216:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8009218:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800921a:	6a0c      	ldr	r4, [r1, #32]
 800921c:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8009220:	f240 5255 	movw	r2, #1365	; 0x555
 8009224:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009226:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800922a:	d007      	beq.n	800923c <R3_2_SwitchOnPWM+0x88>
 800922c:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800922e:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009232:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8009236:	6184      	str	r4, [r0, #24]
 8009238:	6191      	str	r1, [r2, #24]
}
 800923a:	e7e4      	b.n	8009206 <R3_2_SwitchOnPWM+0x52>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800923c:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800923e:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009242:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8009246:	6284      	str	r4, [r0, #40]	; 0x28
 8009248:	6291      	str	r1, [r2, #40]	; 0x28
}
 800924a:	e7dc      	b.n	8009206 <R3_2_SwitchOnPWM+0x52>

0800924c <R3_2_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800924c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8009250:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009252:	68d3      	ldr	r3, [r2, #12]
 8009254:	f023 0301 	bic.w	r3, r3, #1
 8009258:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800925a:	6c53      	ldr	r3, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE(TIMx);

  pHandle->_Super.TurnOnLowSidesAction = false;
 800925c:	f04f 0c00 	mov.w	ip, #0
 8009260:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009264:	f880 c06b 	strb.w	ip, [r0, #107]	; 0x6b
 8009268:	6453      	str	r3, [r2, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->BrakeActionLock)
 800926a:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800926e:	b91b      	cbnz	r3, 8009278 <R3_2_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8009270:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 8009274:	2b02      	cmp	r3, #2
 8009276:	d00c      	beq.n	8009292 <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009278:	f06f 0301 	mvn.w	r3, #1
 800927c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800927e:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8009280:	07db      	lsls	r3, r3, #31
 8009282:	d5fc      	bpl.n	800927e <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009284:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked = false;
 8009288:	2300      	movs	r3, #0
 800928a:	6111      	str	r1, [r2, #16]
 800928c:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
 8009290:	4770      	bx	lr
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8009292:	6a0b      	ldr	r3, [r1, #32]
{
 8009294:	b410      	push	{r4}
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8009296:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 800929a:	629c      	str	r4, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800929c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800929e:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
 80092a2:	629c      	str	r4, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80092a4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80092a6:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 80092aa:	6299      	str	r1, [r3, #40]	; 0x28
 80092ac:	f06f 0301 	mvn.w	r3, #1
 80092b0:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80092b2:	6913      	ldr	r3, [r2, #16]
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 80092b4:	07d9      	lsls	r1, r3, #31
 80092b6:	d5fc      	bpl.n	80092b2 <R3_2_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80092b8:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 80092bc:	2300      	movs	r3, #0
 80092be:	6111      	str	r1, [r2, #16]
}
 80092c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->ADCRegularLocked = false;
 80092c4:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
}
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop

080092cc <R3_2_RLGetPhaseCurrents>:
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{

  if (MC_NULL == pStator_Currents)
 80092cc:	b329      	cbz	r1, 800931a <R3_2_RLGetPhaseCurrents+0x4e>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80092ce:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 80092d2:	b410      	push	{r4}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80092d4:	6894      	ldr	r4, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80092d6:	6863      	ldr	r3, [r4, #4]
 80092d8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80092dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092e0:	6063      	str	r3, [r4, #4]
    int32_t wAux;

    /* disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 80092e2:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
 80092e6:	6f43      	ldr	r3, [r0, #116]	; 0x74

    /* Check saturation */
    if (wAux > -INT16_MAX)
 80092e8:	480e      	ldr	r0, [pc, #56]	; (8009324 <R3_2_RLGetPhaseCurrents+0x58>)
    wAux = ((int32_t)pHandle->PhaseBOffset) - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 80092ea:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80092ee:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80092f0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80092f4:	1a9b      	subs	r3, r3, r2
    if (wAux > -INT16_MAX)
 80092f6:	4283      	cmp	r3, r0
 80092f8:	da09      	bge.n	800930e <R3_2_RLGetPhaseCurrents+0x42>
 80092fa:	4b0b      	ldr	r3, [pc, #44]	; (8009328 <R3_2_RLGetPhaseCurrents+0x5c>)
    }

    pStator_Currents->a = (int16_t)wAux;
    pStator_Currents->b = (int16_t)wAux;
  }
}
 80092fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 8009300:	2200      	movs	r2, #0
 8009302:	f363 020f 	bfi	r2, r3, #0, #16
 8009306:	f363 421f 	bfi	r2, r3, #16, #16
 800930a:	600a      	str	r2, [r1, #0]
}
 800930c:	4770      	bx	lr
      if (wAux < INT16_MAX)
 800930e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009312:	4293      	cmp	r3, r2
 8009314:	dc02      	bgt.n	800931c <R3_2_RLGetPhaseCurrents+0x50>
    pStator_Currents->a = (int16_t)wAux;
 8009316:	b21b      	sxth	r3, r3
 8009318:	e7f0      	b.n	80092fc <R3_2_RLGetPhaseCurrents+0x30>
 800931a:	4770      	bx	lr
 800931c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009320:	e7ec      	b.n	80092fc <R3_2_RLGetPhaseCurrents+0x30>
 8009322:	bf00      	nop
 8009324:	ffff8002 	.word	0xffff8002
 8009328:	ffff8001 	.word	0xffff8001

0800932c <R3_2_RLTurnOnLowSides>:
  * @param  ticks: Duty cycle of the boot capacitors charge, specific to motor.
  */
static void R3_2_RLTurnOnLowSides(PWMC_Handle_t *pHdl, uint32_t ticks)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800932c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88

  pHandle->ADCRegularLocked = true;
 8009330:	2301      	movs	r3, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009332:	688a      	ldr	r2, [r1, #8]
{
 8009334:	b410      	push	{r4}
  pHandle->ADCRegularLocked = true;
 8009336:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800933a:	2400      	movs	r4, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800933c:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009340:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009342:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009344:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Wait until next update */
  while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8009346:	07db      	lsls	r3, r3, #31
 8009348:	d5fc      	bpl.n	8009344 <R3_2_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800934a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800934c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009350:	6453      	str	r3, [r2, #68]	; 0x44
  }

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8009352:	f891 30c0 	ldrb.w	r3, [r1, #192]	; 0xc0
 8009356:	2b02      	cmp	r3, #2
 8009358:	d10b      	bne.n	8009372 <R3_2_RLTurnOnLowSides+0x46>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800935a:	e9d1 2008 	ldrd	r2, r0, [r1, #32]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800935e:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009362:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009364:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8009366:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800936a:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 800936e:	6284      	str	r4, [r0, #40]	; 0x28
 8009370:	629a      	str	r2, [r3, #40]	; 0x28
  else
  {
    /* Nothing to do */
  }
  return;
}
 8009372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009376:	4770      	bx	lr

08009378 <R3_2_RLSwitchOnPWM>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
static void R3_2_RLSwitchOnPWM( PWMC_Handle_t *pHdl)
{
  if (MC_NULL == pHdl)
 8009378:	2800      	cmp	r0, #0
 800937a:	d04c      	beq.n	8009416 <R3_2_RLSwitchOnPWM+0x9e>
    /* Nothing to do */
  }
  else
  {
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800937c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCx_1;
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;

    pHandle->ADCRegularLocked=true;
 8009380:	2201      	movs	r2, #1
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009382:	688b      	ldr	r3, [r1, #8]
{
 8009384:	b4f0      	push	{r4, r5, r6, r7}
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8009386:	e9d1 5400 	ldrd	r5, r4, [r1]
    pHandle->ADCRegularLocked=true;
 800938a:	f880 208c 	strb.w	r2, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800938e:	f06f 0201 	mvn.w	r2, #1
 8009392:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009394:	691a      	ldr	r2, [r3, #16]
    /* wait for a new PWM period */
    LL_TIM_ClearFlag_UPDATE(TIMx);
    while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 8009396:	07d6      	lsls	r6, r2, #31
 8009398:	d5fc      	bpl.n	8009394 <R3_2_RLSwitchOnPWM+0x1c>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800939a:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800939e:	f06f 0601 	mvn.w	r6, #1
 80093a2:	611e      	str	r6, [r3, #16]
 80093a4:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80093a6:	2601      	movs	r6, #1
 80093a8:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 80093aa:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80093ac:	691a      	ldr	r2, [r3, #16]

    while (0U == LL_TIM_IsActiveFlag_UPDATE(TIMx))
 80093ae:	07d2      	lsls	r2, r2, #31
 80093b0:	d5fc      	bpl.n	80093ac <R3_2_RLSwitchOnPWM+0x34>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80093b2:	68da      	ldr	r2, [r3, #12]
 80093b4:	f042 0201 	orr.w	r2, r2, #1
 80093b8:	60da      	str	r2, [r3, #12]

    /* enable TIMx update interrupt*/
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 80093ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093c0:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80093c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093c8:	645a      	str	r2, [r3, #68]	; 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 80093ca:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 80093ce:	2a02      	cmp	r2, #2
 80093d0:	d00f      	beq.n	80093f2 <R3_2_RLSwitchOnPWM+0x7a>
      /* Nothing to do */
    }

    /* set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 80093d2:	2303      	movs	r3, #3
 80093d4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
  MODIFY_REG(ADCx->CR,
 80093d8:	68aa      	ldr	r2, [r5, #8]
 80093da:	4913      	ldr	r1, [pc, #76]	; (8009428 <R3_2_RLSwitchOnPWM+0xb0>)
 80093dc:	400a      	ands	r2, r1
 80093de:	f042 0208 	orr.w	r2, r2, #8
 80093e2:	60aa      	str	r2, [r5, #8]
 80093e4:	68a3      	ldr	r3, [r4, #8]
 80093e6:	400b      	ands	r3, r1
 80093e8:	f043 0308 	orr.w	r3, r3, #8
 80093ec:	60a3      	str	r3, [r4, #8]

    LL_ADC_INJ_StartConversion(ADCx_1);
    LL_ADC_INJ_StartConversion(ADCx_2);
  }
  return;
}
 80093ee:	bcf0      	pop	{r4, r5, r6, r7}
 80093f0:	4770      	bx	lr
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 80093f2:	6a1a      	ldr	r2, [r3, #32]
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80093f4:	6a0e      	ldr	r6, [r1, #32]
 80093f6:	f8b1 70ac 	ldrh.w	r7, [r1, #172]	; 0xac
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 80093fa:	f240 5355 	movw	r3, #1365	; 0x555
 80093fe:	421a      	tst	r2, r3
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009400:	e9d1 2309 	ldrd	r2, r3, [r1, #36]	; 0x24
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8009404:	d008      	beq.n	8009418 <R3_2_RLSwitchOnPWM+0xa0>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009406:	61b7      	str	r7, [r6, #24]
        LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8009408:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	; 0xae
 800940c:	6196      	str	r6, [r2, #24]
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800940e:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 8009412:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009414:	e7dd      	b.n	80093d2 <R3_2_RLSwitchOnPWM+0x5a>
 8009416:	4770      	bx	lr
  WRITE_REG(GPIOx->BRR, PinMask);
 8009418:	62b7      	str	r7, [r6, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800941a:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	; 0xae
 800941e:	6296      	str	r6, [r2, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009420:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 8009424:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009426:	e7d4      	b.n	80093d2 <R3_2_RLSwitchOnPWM+0x5a>
 8009428:	7fffffc0 	.word	0x7fffffc0

0800942c <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800942c:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 8009430:	b510      	push	{r4, lr}
 8009432:	f00c 0c3c 	and.w	ip, ip, #60	; 0x3c
 8009436:	f101 0e08 	add.w	lr, r1, #8
 800943a:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 800943c:	f85c 300e 	ldr.w	r3, [ip, lr]
 8009440:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009444:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009448:	431a      	orrs	r2, r3
 800944a:	f84c 200e 	str.w	r2, [ip, lr]
  SET_BIT(DACx->SWTRIGR,
 800944e:	684a      	ldr	r2, [r1, #4]
 8009450:	f000 0303 	and.w	r3, r0, #3
 8009454:	4313      	orrs	r3, r2
 8009456:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 8009458:	680a      	ldr	r2, [r1, #0]
 800945a:	2301      	movs	r3, #1
 800945c:	f000 0010 	and.w	r0, r0, #16
 8009460:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8009464:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8009468:	4b14      	ldr	r3, [pc, #80]	; (80094bc <R3_2_SetAOReferenceVoltage+0x90>)
 800946a:	d013      	beq.n	8009494 <R3_2_SetAOReferenceVoltage+0x68>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4c14      	ldr	r4, [pc, #80]	; (80094c0 <R3_2_SetAOReferenceVoltage+0x94>)
  SET_BIT(DACx->CR,
 8009470:	680a      	ldr	r2, [r1, #0]
 8009472:	fba4 4303 	umull	r4, r3, r4, r3
 8009476:	0cdb      	lsrs	r3, r3, #19
 8009478:	00db      	lsls	r3, r3, #3
 800947a:	4310      	orrs	r0, r2
 800947c:	6008      	str	r0, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 800947e:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 8009480:	9b00      	ldr	r3, [sp, #0]
 8009482:	b12b      	cbz	r3, 8009490 <R3_2_SetAOReferenceVoltage+0x64>
      wait_loop_index--;
 8009484:	9b00      	ldr	r3, [sp, #0]
 8009486:	3b01      	subs	r3, #1
 8009488:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 800948a:	9b00      	ldr	r3, [sp, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1f9      	bne.n	8009484 <R3_2_SetAOReferenceVoltage+0x58>
}
 8009490:	b002      	add	sp, #8
 8009492:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8009494:	4a0a      	ldr	r2, [pc, #40]	; (80094c0 <R3_2_SetAOReferenceVoltage+0x94>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	fba2 2303 	umull	r2, r3, r2, r3
 800949c:	0cdb      	lsrs	r3, r3, #19
 800949e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80094a2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80094a4:	9b01      	ldr	r3, [sp, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d0f2      	beq.n	8009490 <R3_2_SetAOReferenceVoltage+0x64>
      wait_loop_index--;
 80094aa:	9b01      	ldr	r3, [sp, #4]
 80094ac:	3b01      	subs	r3, #1
 80094ae:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80094b0:	9b01      	ldr	r3, [sp, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1f9      	bne.n	80094aa <R3_2_SetAOReferenceVoltage+0x7e>
}
 80094b6:	b002      	add	sp, #8
 80094b8:	bd10      	pop	{r4, pc}
 80094ba:	bf00      	nop
 80094bc:	20000428 	.word	0x20000428
 80094c0:	431bde83 	.word	0x431bde83

080094c4 <R3_2_Init>:
  if (MC_NULL == pHandle)
 80094c4:	2800      	cmp	r0, #0
 80094c6:	f000 80fc 	beq.w	80096c2 <R3_2_Init+0x1fe>
{
 80094ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 80094ce:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCx_1;
 80094d2:	681f      	ldr	r7, [r3, #0]
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 80094d4:	685e      	ldr	r6, [r3, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80094d6:	687a      	ldr	r2, [r7, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80094d8:	689c      	ldr	r4, [r3, #8]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 80094da:	f8d3 a014 	ldr.w	sl, [r3, #20]
 80094de:	4605      	mov	r5, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 80094e0:	e9d3 e00b 	ldrd	lr, r0, [r3, #44]	; 0x2c
{
 80094e4:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80094e6:	2104      	movs	r1, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80094e8:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 80094ec:	9001      	str	r0, [sp, #4]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 80094ee:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80094f0:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 80094f2:	e9d3 cb03 	ldrd	ip, fp, [r3, #12]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 80094f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80094f8:	9003      	str	r0, [sp, #12]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 80094fa:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 80094fe:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8009500:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8009502:	687a      	ldr	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8009504:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8009506:	f022 0220 	bic.w	r2, r2, #32
 800950a:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800950c:	6038      	str	r0, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800950e:	6872      	ldr	r2, [r6, #4]
 8009510:	f022 0204 	bic.w	r2, r2, #4
 8009514:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8009516:	6031      	str	r1, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8009518:	6872      	ldr	r2, [r6, #4]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800951a:	498f      	ldr	r1, [pc, #572]	; (8009758 <R3_2_Init+0x294>)
 800951c:	f022 0220 	bic.w	r2, r2, #32
 8009520:	6072      	str	r2, [r6, #4]
      if (TIM1 ==  TIMx)
 8009522:	4a8e      	ldr	r2, [pc, #568]	; (800975c <R3_2_Init+0x298>)
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8009524:	6030      	str	r0, [r6, #0]
 8009526:	4294      	cmp	r4, r2
 8009528:	690a      	ldr	r2, [r1, #16]
 800952a:	bf0c      	ite	eq
 800952c:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8009530:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 8009534:	610a      	str	r2, [r1, #16]
      if (OPAMPParams != NULL)
 8009536:	f1bc 0f00 	cmp.w	ip, #0
 800953a:	d011      	beq.n	8009560 <R3_2_Init+0x9c>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 800953c:	e9dc 0103 	ldrd	r0, r1, [ip, #12]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8009540:	6802      	ldr	r2, [r0, #0]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 8009542:	f8dc c024 	ldr.w	ip, [ip, #36]	; 0x24
 8009546:	f042 0201 	orr.w	r2, r2, #1
 800954a:	6002      	str	r2, [r0, #0]
 800954c:	680a      	ldr	r2, [r1, #0]
 800954e:	f042 0201 	orr.w	r2, r2, #1
 8009552:	600a      	str	r2, [r1, #0]
 8009554:	f8dc 2000 	ldr.w	r2, [ip]
 8009558:	f042 0201 	orr.w	r2, r2, #1
 800955c:	f8cc 2000 	str.w	r2, [ip]
      if (COMP_OCPAx != NULL)
 8009560:	f1bb 0f00 	cmp.w	fp, #0
 8009564:	d018      	beq.n	8009598 <R3_2_Init+0xd4>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 8009566:	f893 20c3 	ldrb.w	r2, [r3, #195]	; 0xc3
 800956a:	2a01      	cmp	r2, #1
 800956c:	d008      	beq.n	8009580 <R3_2_Init+0xbc>
 800956e:	f1be 0f00 	cmp.w	lr, #0
 8009572:	d005      	beq.n	8009580 <R3_2_Init+0xbc>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 8009574:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 8009578:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800957a:	4671      	mov	r1, lr
 800957c:	f7ff ff56 	bl	800942c <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009580:	f8db 3000 	ldr.w	r3, [fp]
 8009584:	f043 0301 	orr.w	r3, r3, #1
 8009588:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800958c:	f8db 3000 	ldr.w	r3, [fp]
 8009590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009594:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPBx != NULL)
 8009598:	f1ba 0f00 	cmp.w	sl, #0
 800959c:	d019      	beq.n	80095d2 <R3_2_Init+0x10e>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 800959e:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80095a2:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 80095a6:	2a01      	cmp	r2, #1
 80095a8:	d007      	beq.n	80095ba <R3_2_Init+0xf6>
 80095aa:	9a01      	ldr	r2, [sp, #4]
 80095ac:	b12a      	cbz	r2, 80095ba <R3_2_Init+0xf6>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 80095ae:	4611      	mov	r1, r2
 80095b0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80095b2:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 80095b6:	f7ff ff39 	bl	800942c <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80095ba:	f8da 3000 	ldr.w	r3, [sl]
 80095be:	f043 0301 	orr.w	r3, r3, #1
 80095c2:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80095c6:	f8da 3000 	ldr.w	r3, [sl]
 80095ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095ce:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OCPCx != NULL)
 80095d2:	f1b9 0f00 	cmp.w	r9, #0
 80095d6:	d019      	beq.n	800960c <R3_2_Init+0x148>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 80095d8:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 80095dc:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 80095e0:	2a01      	cmp	r2, #1
 80095e2:	d007      	beq.n	80095f4 <R3_2_Init+0x130>
 80095e4:	9a02      	ldr	r2, [sp, #8]
 80095e6:	b12a      	cbz	r2, 80095f4 <R3_2_Init+0x130>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 80095e8:	4611      	mov	r1, r2
 80095ea:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80095ec:	f8b3 20bc 	ldrh.w	r2, [r3, #188]	; 0xbc
 80095f0:	f7ff ff1c 	bl	800942c <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80095f4:	f8d9 3000 	ldr.w	r3, [r9]
 80095f8:	f043 0301 	orr.w	r3, r3, #1
 80095fc:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009600:	f8d9 3000 	ldr.w	r3, [r9]
 8009604:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009608:	f8c9 3000 	str.w	r3, [r9]
      if (COMP_OVPx != NULL)
 800960c:	f1b8 0f00 	cmp.w	r8, #0
 8009610:	d019      	beq.n	8009646 <R3_2_Init+0x182>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 8009612:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8009616:	f893 20c6 	ldrb.w	r2, [r3, #198]	; 0xc6
 800961a:	2a01      	cmp	r2, #1
 800961c:	d007      	beq.n	800962e <R3_2_Init+0x16a>
 800961e:	9a03      	ldr	r2, [sp, #12]
 8009620:	b12a      	cbz	r2, 800962e <R3_2_Init+0x16a>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 8009622:	4611      	mov	r1, r2
 8009624:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009626:	f8b3 20be 	ldrh.w	r2, [r3, #190]	; 0xbe
 800962a:	f7ff feff 	bl	800942c <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800962e:	f8d8 3000 	ldr.w	r3, [r8]
 8009632:	f043 0301 	orr.w	r3, r3, #1
 8009636:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800963a:	f8d8 3000 	ldr.w	r3, [r8]
 800963e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009642:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009646:	68bb      	ldr	r3, [r7, #8]
      if (0U == LL_ADC_IsEnabled(ADCx_1))
 8009648:	07d9      	lsls	r1, r3, #31
 800964a:	d56a      	bpl.n	8009722 <R3_2_Init+0x25e>
 800964c:	68b3      	ldr	r3, [r6, #8]
      if (0U == LL_ADC_IsEnabled(ADCx_2))
 800964e:	07da      	lsls	r2, r3, #31
 8009650:	d563      	bpl.n	800971a <R3_2_Init+0x256>
  volatile uint32_t Brk2Timeout = 1000;
 8009652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009656:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8009658:	6823      	ldr	r3, [r4, #0]
  if (2U == pHandle->pParams_str->FreqRatio)
 800965a:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 800965e:	f023 0301 	bic.w	r3, r3, #1
 8009662:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009664:	6863      	ldr	r3, [r4, #4]
 8009666:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800966a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800966e:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009670:	69a3      	ldr	r3, [r4, #24]
 8009672:	f043 0308 	orr.w	r3, r3, #8
 8009676:	61a3      	str	r3, [r4, #24]
 8009678:	69a3      	ldr	r3, [r4, #24]
 800967a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800967e:	61a3      	str	r3, [r4, #24]
 8009680:	69e3      	ldr	r3, [r4, #28]
 8009682:	f043 0308 	orr.w	r3, r3, #8
 8009686:	61e3      	str	r3, [r4, #28]
 8009688:	69e3      	ldr	r3, [r4, #28]
 800968a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800968e:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009690:	6963      	ldr	r3, [r4, #20]
 8009692:	f043 0301 	orr.w	r3, r3, #1
 8009696:	6163      	str	r3, [r4, #20]
 8009698:	f892 30c7 	ldrb.w	r3, [r2, #199]	; 0xc7
 800969c:	2b02      	cmp	r3, #2
 800969e:	d011      	beq.n	80096c4 <R3_2_Init+0x200>
    if (M1 == pHandle->_Super.Motor)
 80096a0:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
 80096a4:	b9b3      	cbnz	r3, 80096d4 <R3_2_Init+0x210>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 80096a6:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d00e      	beq.n	80096cc <R3_2_Init+0x208>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 80096ae:	2b03      	cmp	r3, #3
 80096b0:	d110      	bne.n	80096d4 <R3_2_Init+0x210>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80096b2:	2101      	movs	r1, #1
 80096b4:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80096b6:	6961      	ldr	r1, [r4, #20]
 80096b8:	f041 0101 	orr.w	r1, r1, #1
 80096bc:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80096be:	6323      	str	r3, [r4, #48]	; 0x30
}
 80096c0:	e008      	b.n	80096d4 <R3_2_Init+0x210>
 80096c2:	4770      	bx	lr
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 80096c4:	f892 30c8 	ldrb.w	r3, [r2, #200]	; 0xc8
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d039      	beq.n	8009740 <R3_2_Init+0x27c>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 80096cc:	f8b5 307c 	ldrh.w	r3, [r5, #124]	; 0x7c
 80096d0:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 80096d2:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80096d4:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80096d8:	6123      	str	r3, [r4, #16]
  if ((pHandle->pParams_str->BKIN2Mode) != NONE)
 80096da:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 80096de:	b17b      	cbz	r3, 8009700 <R3_2_Init+0x23c>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80096e0:	6923      	ldr	r3, [r4, #16]
 80096e2:	05db      	lsls	r3, r3, #23
 80096e4:	d52a      	bpl.n	800973c <R3_2_Init+0x278>
    while ((Brk2Timeout != 0u) && (1U == result))
 80096e6:	9b05      	ldr	r3, [sp, #20]
 80096e8:	b153      	cbz	r3, 8009700 <R3_2_Init+0x23c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80096ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80096ee:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 80096f0:	9b05      	ldr	r3, [sp, #20]
 80096f2:	3b01      	subs	r3, #1
 80096f4:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80096f6:	6923      	ldr	r3, [r4, #16]
 80096f8:	f413 7f80 	tst.w	r3, #256	; 0x100
    while ((Brk2Timeout != 0u) && (1U == result))
 80096fc:	9b05      	ldr	r3, [sp, #20]
 80096fe:	d11a      	bne.n	8009736 <R3_2_Init+0x272>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8009700:	68e3      	ldr	r3, [r4, #12]
 8009702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009706:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 8009708:	6a23      	ldr	r3, [r4, #32]
 800970a:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800970e:	f043 0305 	orr.w	r3, r3, #5
 8009712:	6223      	str	r3, [r4, #32]
}
 8009714:	b007      	add	sp, #28
 8009716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R3_2_ADCxInit(ADCx_2);
 800971a:	4630      	mov	r0, r6
 800971c:	f7ff fb94 	bl	8008e48 <R3_2_ADCxInit>
 8009720:	e797      	b.n	8009652 <R3_2_Init+0x18e>
        R3_2_ADCxInit(ADCx_1);
 8009722:	4638      	mov	r0, r7
 8009724:	f7ff fb90 	bl	8008e48 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8009728:	2340      	movs	r3, #64	; 0x40
 800972a:	603b      	str	r3, [r7, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009732:	607b      	str	r3, [r7, #4]
}
 8009734:	e78a      	b.n	800964c <R3_2_Init+0x188>
    while ((Brk2Timeout != 0u) && (1U == result))
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1d9      	bne.n	80096ee <R3_2_Init+0x22a>
 800973a:	e7e1      	b.n	8009700 <R3_2_Init+0x23c>
 800973c:	9b05      	ldr	r3, [sp, #20]
 800973e:	e7df      	b.n	8009700 <R3_2_Init+0x23c>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 8009740:	f892 10c1 	ldrb.w	r1, [r2, #193]	; 0xc1
 8009744:	2903      	cmp	r1, #3
 8009746:	d1c1      	bne.n	80096cc <R3_2_Init+0x208>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009748:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800974a:	6963      	ldr	r3, [r4, #20]
 800974c:	f043 0301 	orr.w	r3, r3, #1
 8009750:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009752:	6321      	str	r1, [r4, #48]	; 0x30
}
 8009754:	e7ba      	b.n	80096cc <R3_2_Init+0x208>
 8009756:	bf00      	nop
 8009758:	e0042000 	.word	0xe0042000
 800975c:	40012c00 	.word	0x40012c00

08009760 <R3_2_SetOffsetCalib>:
{
 8009760:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8009762:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 8009766:	680b      	ldr	r3, [r1, #0]
 8009768:	6703      	str	r3, [r0, #112]	; 0x70
  pHdl->offsetCalibStatus = true;
 800976a:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 800976c:	e9c0 421d 	strd	r4, r2, [r0, #116]	; 0x74
  pHdl->offsetCalibStatus = true;
 8009770:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8009774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop

0800977c <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 800977c:	e9d0 231d 	ldrd	r2, r3, [r0, #116]	; 0x74
 8009780:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8009782:	608b      	str	r3, [r1, #8]
 8009784:	e9c1 0200 	strd	r0, r2, [r1]
}
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop

0800978c <R3_2_CurrentReadingPolarization>:
{
 800978c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800978e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  if (true == pHandle->_Super.offsetCalibStatus)
 8009792:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
  ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCx_2;
 8009796:	e9d3 7600 	ldrd	r7, r6, [r3]
{
 800979a:	b085      	sub	sp, #20
 800979c:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 800979e:	b1aa      	cbz	r2, 80097cc <R3_2_CurrentReadingPolarization+0x40>
  MODIFY_REG(ADCx->CR,
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	494f      	ldr	r1, [pc, #316]	; (80098e0 <R3_2_CurrentReadingPolarization+0x154>)
 80097a4:	400a      	ands	r2, r1
 80097a6:	f042 0208 	orr.w	r2, r2, #8
 80097aa:	60ba      	str	r2, [r7, #8]
 80097ac:	68b3      	ldr	r3, [r6, #8]
 80097ae:	400b      	ands	r3, r1
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80097b0:	2280      	movs	r2, #128	; 0x80
 80097b2:	f043 0308 	orr.w	r3, r3, #8
 80097b6:	60b3      	str	r3, [r6, #8]
 80097b8:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
  pHandle->_Super.Sector = SECTOR_5;
 80097bc:	2204      	movs	r2, #4
  pHandle->BrakeActionLock = false;
 80097be:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 80097c0:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
  pHandle->BrakeActionLock = false;
 80097c4:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 80097c8:	b005      	add	sp, #20
 80097ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80097cc:	689d      	ldr	r5, [r3, #8]
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 80097ce:	6803      	ldr	r3, [r0, #0]
 80097d0:	9302      	str	r3, [sp, #8]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 80097d2:	6943      	ldr	r3, [r0, #20]
 80097d4:	9303      	str	r3, [sp, #12]
    pHandle->PolarizationCounter = 0U;
 80097d6:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  CLEAR_BIT(TIMx->CCER, Channels);
 80097da:	6a2b      	ldr	r3, [r5, #32]
    pHandle->PhaseCOffset = 0U;
 80097dc:	6782      	str	r2, [r0, #120]	; 0x78
 80097de:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 80097e2:	f023 0305 	bic.w	r3, r3, #5
    pHandle->PhaseBOffset = 0U;
 80097e6:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 80097ea:	622b      	str	r3, [r5, #32]
  pHandle->PolarizationSector=SECTOR_5;
 80097ec:	2304      	movs	r3, #4
 80097ee:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_5;   
 80097f2:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 80097f6:	4b3b      	ldr	r3, [pc, #236]	; (80098e4 <R3_2_CurrentReadingPolarization+0x158>)
 80097f8:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 80097fa:	4b3b      	ldr	r3, [pc, #236]	; (80098e8 <R3_2_CurrentReadingPolarization+0x15c>)
 80097fc:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80097fe:	2380      	movs	r3, #128	; 0x80
 8009800:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8009804:	f7ff fcd6 	bl	80091b4 <R3_2_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 8009808:	4a38      	ldr	r2, [pc, #224]	; (80098ec <R3_2_CurrentReadingPolarization+0x160>)
 800980a:	686b      	ldr	r3, [r5, #4]
 800980c:	4013      	ands	r3, r2
 800980e:	2b70      	cmp	r3, #112	; 0x70
 8009810:	d1fb      	bne.n	800980a <R3_2_CurrentReadingPolarization+0x7e>
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	4932      	ldr	r1, [pc, #200]	; (80098e0 <R3_2_CurrentReadingPolarization+0x154>)
 8009816:	400a      	ands	r2, r1
 8009818:	f042 0208 	orr.w	r2, r2, #8
 800981c:	60ba      	str	r2, [r7, #8]
 800981e:	68b3      	ldr	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 8009820:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8009824:	400b      	ands	r3, r1
 8009826:	f043 0308 	orr.w	r3, r3, #8
 800982a:	60b3      	str	r3, [r6, #8]
 800982c:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8009830:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8009834:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 8009838:	4628      	mov	r0, r5
 800983a:	e9cd 1300 	strd	r1, r3, [sp]
 800983e:	f7ff fae5 	bl	8008e0c <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 8009842:	4620      	mov	r0, r4
 8009844:	f7ff fd02 	bl	800924c <R3_2_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 8009848:	2200      	movs	r2, #0
 800984a:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  pHandle->PolarizationSector=SECTOR_1;
 800984e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  pHandle->_Super.Sector = SECTOR_1;   
 8009852:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8009856:	4a26      	ldr	r2, [pc, #152]	; (80098f0 <R3_2_CurrentReadingPolarization+0x164>)
 8009858:	6022      	str	r2, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 800985a:	4620      	mov	r0, r4
 800985c:	f7ff fcaa 	bl	80091b4 <R3_2_SwitchOnPWM>
    waitForPolarizationEnd(TIMx,
 8009860:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8009864:	9b01      	ldr	r3, [sp, #4]
 8009866:	f892 20c1 	ldrb.w	r2, [r2, #193]	; 0xc1
 800986a:	9900      	ldr	r1, [sp, #0]
 800986c:	4628      	mov	r0, r5
 800986e:	f7ff facd 	bl	8008e0c <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 8009872:	4620      	mov	r0, r4
 8009874:	f7ff fcea 	bl	800924c <R3_2_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009878:	e9d4 121c 	ldrd	r1, r2, [r4, #112]	; 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800987c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800987e:	0909      	lsrs	r1, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009880:	0912      	lsrs	r2, r2, #4
 8009882:	e9c4 121c 	strd	r1, r2, [r4, #112]	; 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8009886:	091b      	lsrs	r3, r3, #4
 8009888:	67a3      	str	r3, [r4, #120]	; 0x78
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800988a:	9902      	ldr	r1, [sp, #8]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800988c:	9a03      	ldr	r2, [sp, #12]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800988e:	69ab      	ldr	r3, [r5, #24]
 8009890:	6162      	str	r2, [r4, #20]
 8009892:	f023 0308 	bic.w	r3, r3, #8
    pHandle->_Super.offsetCalibStatus = true;
 8009896:	2001      	movs	r0, #1
 8009898:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800989c:	6021      	str	r1, [r4, #0]
 800989e:	61ab      	str	r3, [r5, #24]
 80098a0:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 80098a2:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 80098a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80098aa:	61aa      	str	r2, [r5, #24]
 80098ac:	69ea      	ldr	r2, [r5, #28]
 80098ae:	f022 0208 	bic.w	r2, r2, #8
 80098b2:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80098b4:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80098b6:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80098b8:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80098ba:	69ab      	ldr	r3, [r5, #24]
 80098bc:	f043 0308 	orr.w	r3, r3, #8
 80098c0:	61ab      	str	r3, [r5, #24]
 80098c2:	69ab      	ldr	r3, [r5, #24]
 80098c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80098c8:	61ab      	str	r3, [r5, #24]
 80098ca:	69eb      	ldr	r3, [r5, #28]
 80098cc:	f043 0308 	orr.w	r3, r3, #8
 80098d0:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 80098d2:	6a2b      	ldr	r3, [r5, #32]
 80098d4:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 80098d8:	f043 0305 	orr.w	r3, r3, #5
 80098dc:	622b      	str	r3, [r5, #32]
}
 80098de:	e76d      	b.n	80097bc <R3_2_CurrentReadingPolarization+0x30>
 80098e0:	7fffffc0 	.word	0x7fffffc0
 80098e4:	080090c1 	.word	0x080090c1
 80098e8:	08009081 	.word	0x08009081
 80098ec:	02000070 	.word	0x02000070
 80098f0:	08009119 	.word	0x08009119

080098f4 <R3_2_SetADCSampPointSectX>:
  if (MC_NULL == pHdl)
 80098f4:	2800      	cmp	r0, #0
 80098f6:	d03a      	beq.n	800996e <R3_2_SetADCSampPointSectX+0x7a>
{
 80098f8:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 80098fa:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80098fe:	f8b0 e07c 	ldrh.w	lr, [r0, #124]	; 0x7c
 8009902:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8009906:	ebae 0203 	sub.w	r2, lr, r3
 800990a:	f8b1 40b2 	ldrh.w	r4, [r1, #178]	; 0xb2
 800990e:	b292      	uxth	r2, r2
 8009910:	42a2      	cmp	r2, r4
 8009912:	d916      	bls.n	8009942 <R3_2_SetADCSampPointSectX+0x4e>
      pHandle->_Super.Sector = SECTOR_5;
 8009914:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8009916:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 800991a:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800991e:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009920:	688a      	ldr	r2, [r1, #8]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8009922:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8009924:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8009928:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 800992c:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800992e:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009930:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009932:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009934:	6852      	ldr	r2, [r2, #4]
 8009936:	4b11      	ldr	r3, [pc, #68]	; (800997c <R3_2_SetADCSampPointSectX+0x88>)
 8009938:	421a      	tst	r2, r3
    returnValue = 0U;
 800993a:	bf14      	ite	ne
 800993c:	2001      	movne	r0, #1
 800993e:	2000      	moveq	r0, #0
}
 8009940:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 8009942:	f8b0 c048 	ldrh.w	ip, [r0, #72]	; 0x48
 8009946:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 800994a:	fa1f fc8c 	uxth.w	ip, ip
 800994e:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8009952:	d80d      	bhi.n	8009970 <R3_2_SetADCSampPointSectX+0x7c>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8009954:	4423      	add	r3, r4
 8009956:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 8009958:	459e      	cmp	lr, r3
 800995a:	d8e1      	bhi.n	8009920 <R3_2_SetADCSampPointSectX+0x2c>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800995c:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800995e:	f44f 7280 	mov.w	r2, #256	; 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8009962:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 8009966:	f8a0 207e 	strh.w	r2, [r0, #126]	; 0x7e
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800996a:	b29b      	uxth	r3, r3
 800996c:	e7d8      	b.n	8009920 <R3_2_SetADCSampPointSectX+0x2c>
}
 800996e:	4770      	bx	lr
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8009970:	f8b1 20b6 	ldrh.w	r2, [r1, #182]	; 0xb6
 8009974:	1a9b      	subs	r3, r3, r2
 8009976:	b29b      	uxth	r3, r3
 8009978:	e7d2      	b.n	8009920 <R3_2_SetADCSampPointSectX+0x2c>
 800997a:	bf00      	nop
 800997c:	02000070 	.word	0x02000070

08009980 <R3_2_TIMx_UP_IRQHandler>:
  if (MC_NULL == pHandle)
 8009980:	4602      	mov	r2, r0
 8009982:	2800      	cmp	r0, #0
 8009984:	d043      	beq.n	8009a0e <R3_2_TIMx_UP_IRQHandler+0x8e>
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009986:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
{
 800998a:	b5f0      	push	{r4, r5, r6, r7, lr}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800998c:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
    if (OPAMPParams != NULL)
 8009990:	2c00      	cmp	r4, #0
 8009992:	d036      	beq.n	8009a02 <R3_2_TIMx_UP_IRQHandler+0x82>
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 8009994:	f890 c06a 	ldrb.w	ip, [r0, #106]	; 0x6a
 8009998:	eb01 038c 	add.w	r3, r1, ip, lsl #2
 800999c:	46e6      	mov	lr, ip
 800999e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80099a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1fc      	bne.n	80099a0 <R3_2_TIMx_UP_IRQHandler+0x20>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 80099a6:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 80099aa:	6bde      	ldr	r6, [r3, #60]	; 0x3c
      if (OpampConfig != OPAMP_UNCHANGED)
 80099ac:	1c77      	adds	r7, r6, #1
 80099ae:	d005      	beq.n	80099bc <R3_2_TIMx_UP_IRQHandler+0x3c>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 80099b0:	68df      	ldr	r7, [r3, #12]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 80099b2:	683c      	ldr	r4, [r7, #0]
 80099b4:	f424 7486 	bic.w	r4, r4, #268	; 0x10c
 80099b8:	4334      	orrs	r4, r6
 80099ba:	603c      	str	r4, [r7, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 80099bc:	6d5c      	ldr	r4, [r3, #84]	; 0x54
      if (OpampConfig != OPAMP_UNCHANGED)
 80099be:	1c66      	adds	r6, r4, #1
 80099c0:	d005      	beq.n	80099ce <R3_2_TIMx_UP_IRQHandler+0x4e>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 80099c2:	6a5e      	ldr	r6, [r3, #36]	; 0x24
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 80099c4:	6833      	ldr	r3, [r6, #0]
 80099c6:	f423 7386 	bic.w	r3, r3, #268	; 0x10c
 80099ca:	4323      	orrs	r3, r4
 80099cc:	6033      	str	r3, [r6, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80099ce:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80099d2:	f8b2 307e 	ldrh.w	r3, [r2, #126]	; 0x7e
 80099d6:	6fcc      	ldr	r4, [r1, #124]	; 0x7c
 80099d8:	431c      	orrs	r4, r3
 80099da:	64c4      	str	r4, [r0, #76]	; 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 80099dc:	6e48      	ldr	r0, [r1, #100]	; 0x64
 80099de:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
 80099e2:	430b      	orrs	r3, r1
 80099e4:	64c3      	str	r3, [r0, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80099e6:	686b      	ldr	r3, [r5, #4]
 80099e8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80099ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80099f0:	2180      	movs	r1, #128	; 0x80
 80099f2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80099f6:	606b      	str	r3, [r5, #4]
    tempPointer = &(pHandle->_Super.Motor);
 80099f8:	f102 0068 	add.w	r0, r2, #104	; 0x68
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80099fc:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
}
 8009a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009a02:	f890 e06a 	ldrb.w	lr, [r0, #106]	; 0x6a
 8009a06:	eb01 038e 	add.w	r3, r1, lr, lsl #2
 8009a0a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009a0c:	e7df      	b.n	80099ce <R3_2_TIMx_UP_IRQHandler+0x4e>
}
 8009a0e:	4770      	bx	lr

08009a10 <R3_2_BRK2_IRQHandler>:
  if (MC_NULL == pHandle)
 8009a10:	b168      	cbz	r0, 8009a2e <R3_2_BRK2_IRQHandler+0x1e>
    if (false == pHandle->BrakeActionLock)
 8009a12:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8009a16:	b92b      	cbnz	r3, 8009a24 <R3_2_BRK2_IRQHandler+0x14>
      if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8009a18:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8009a1c:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8009a20:	2a02      	cmp	r2, #2
 8009a22:	d005      	beq.n	8009a30 <R3_2_BRK2_IRQHandler+0x20>
    pHandle->OverCurrentFlag = true;
 8009a24:	2301      	movs	r3, #1
 8009a26:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
    tempPointer = &(pHandle->_Super.Motor);
 8009a2a:	3068      	adds	r0, #104	; 0x68
 8009a2c:	4770      	bx	lr
}
 8009a2e:	4770      	bx	lr
{
 8009a30:	b430      	push	{r4, r5}
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8009a32:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8009a36:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 8009a3c:	62a5      	str	r5, [r4, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8009a3e:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
        LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8009a42:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8009a46:	628c      	str	r4, [r1, #40]	; 0x28
 8009a48:	6293      	str	r3, [r2, #40]	; 0x28
    pHandle->OverCurrentFlag = true;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
}
 8009a50:	bc30      	pop	{r4, r5}
    tempPointer = &(pHandle->_Super.Motor);
 8009a52:	3068      	adds	r0, #104	; 0x68
}
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop

08009a58 <R3_2_BRK_IRQHandler>:
  if (MC_NULL == pHandle)
 8009a58:	4603      	mov	r3, r0
 8009a5a:	b160      	cbz	r0, 8009a76 <R3_2_BRK_IRQHandler+0x1e>
    pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009a5c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8009a60:	6891      	ldr	r1, [r2, #8]
 8009a62:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    pHandle->OverVoltageFlag = true;
 8009a64:	f240 1c01 	movw	ip, #257	; 0x101
    pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009a68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a6c:	644a      	str	r2, [r1, #68]	; 0x44
    tempPointer = &(pHandle->_Super.Motor);
 8009a6e:	3068      	adds	r0, #104	; 0x68
    pHandle->OverVoltageFlag = true;
 8009a70:	f8a3 c083 	strh.w	ip, [r3, #131]	; 0x83
    tempPointer = &(pHandle->_Super.Motor);
 8009a74:	4770      	bx	lr
}
 8009a76:	4770      	bx	lr

08009a78 <R3_2_IsOverCurrentOccurred>:
  if (true == pHandle->OverVoltageFlag)
 8009a78:	f890 3083 	ldrb.w	r3, [r0, #131]	; 0x83
 8009a7c:	b16b      	cbz	r3, 8009a9a <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
 8009a84:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8009a86:	2302      	movs	r3, #2
  if (true == pHandle->OverCurrentFlag)
 8009a88:	f890 2082 	ldrb.w	r2, [r0, #130]	; 0x82
 8009a8c:	b11a      	cbz	r2, 8009a96 <R3_2_IsOverCurrentOccurred+0x1e>
    pHandle->OverCurrentFlag = false;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
    retVal |= MC_BREAK_IN;
 8009a94:	460b      	mov	r3, r1
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	4770      	bx	lr
 8009a9a:	2140      	movs	r1, #64	; 0x40
 8009a9c:	e7f4      	b.n	8009a88 <R3_2_IsOverCurrentOccurred+0x10>
 8009a9e:	bf00      	nop

08009aa0 <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 8009aa0:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
{
 8009aa4:	b430      	push	{r4, r5}
  if (false == pHandle->_Super.RLDetectionMode)
 8009aa6:	2900      	cmp	r1, #0
 8009aa8:	d13d      	bne.n	8009b26 <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009aaa:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 8009aae:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009ab0:	699a      	ldr	r2, [r3, #24]
 8009ab2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009ab6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009aba:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009abe:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009ac0:	6a1a      	ldr	r2, [r3, #32]
 8009ac2:	f042 0201 	orr.w	r2, r2, #1
 8009ac6:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009ac8:	6a1a      	ldr	r2, [r3, #32]
 8009aca:	f022 0204 	bic.w	r2, r2, #4
 8009ace:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009ad0:	6359      	str	r1, [r3, #52]	; 0x34
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 8009ad2:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
 8009ad6:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8009ad8:	f103 0418 	add.w	r4, r3, #24
 8009adc:	d030      	beq.n	8009b40 <R3_2_RLDetectionModeEnable+0xa0>
    else if (ES_GPIO ==  pHandle->pParams_str->LowSideOutputs)
 8009ade:	2a02      	cmp	r2, #2
 8009ae0:	d10f      	bne.n	8009b02 <R3_2_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009ae2:	699a      	ldr	r2, [r3, #24]
 8009ae4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009ae8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8009aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009af0:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009af2:	6a1a      	ldr	r2, [r3, #32]
 8009af4:	f042 0210 	orr.w	r2, r2, #16
 8009af8:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009afa:	6a1a      	ldr	r2, [r3, #32]
 8009afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b00:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009b02:	6862      	ldr	r2, [r4, #4]
 8009b04:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009b08:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8009b0c:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8009b10:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009b12:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8009b14:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8009b16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b1a:	621a      	str	r2, [r3, #32]
 8009b1c:	6a1a      	ldr	r2, [r3, #32]
 8009b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b22:	621a      	str	r2, [r3, #32]
 8009b24:	6701      	str	r1, [r0, #112]	; 0x70
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8009b26:	4b0f      	ldr	r3, [pc, #60]	; (8009b64 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8009b28:	490f      	ldr	r1, [pc, #60]	; (8009b68 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009b2a:	4a10      	ldr	r2, [pc, #64]	; (8009b6c <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8009b2c:	4c10      	ldr	r4, [pc, #64]	; (8009b70 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8009b2e:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 8009b30:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8009b32:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009b34:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8009b38:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 8009b3a:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 8009b3e:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009b40:	699a      	ldr	r2, [r3, #24]
 8009b42:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8009b46:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8009b4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009b4e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009b50:	6a1a      	ldr	r2, [r3, #32]
 8009b52:	f022 0210 	bic.w	r2, r2, #16
 8009b56:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8009b58:	6a1a      	ldr	r2, [r3, #32]
 8009b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b5e:	621a      	str	r2, [r3, #32]
}
 8009b60:	e7cf      	b.n	8009b02 <R3_2_RLDetectionModeEnable+0x62>
 8009b62:	bf00      	nop
 8009b64:	0800932d 	.word	0x0800932d
 8009b68:	08009379 	.word	0x08009379
 8009b6c:	0800924d 	.word	0x0800924d
 8009b70:	080092cd 	.word	0x080092cd

08009b74 <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 8009b74:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d03c      	beq.n	8009bf6 <R3_2_RLDetectionModeDisable+0x82>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009b7c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8009b80:	688b      	ldr	r3, [r1, #8]
{
 8009b82:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009b84:	699a      	ldr	r2, [r3, #24]
 8009b86:	4c43      	ldr	r4, [pc, #268]	; (8009c94 <R3_2_RLDetectionModeDisable+0x120>)
 8009b88:	4022      	ands	r2, r4
 8009b8a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009b8e:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009b90:	6a1a      	ldr	r2, [r3, #32]
 8009b92:	f042 0201 	orr.w	r2, r2, #1
 8009b96:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->pParams_str->LowSideOutputs)
 8009b98:	f891 20c0 	ldrb.w	r2, [r1, #192]	; 0xc0
 8009b9c:	2a01      	cmp	r2, #1
 8009b9e:	d02b      	beq.n	8009bf8 <R3_2_RLDetectionModeDisable+0x84>
    else if (ES_GPIO == pHandle->pParams_str->LowSideOutputs)
 8009ba0:	2a02      	cmp	r2, #2
 8009ba2:	d050      	beq.n	8009c46 <R3_2_RLDetectionModeDisable+0xd2>
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 8009ba4:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 8009ba8:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009baa:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009bac:	6999      	ldr	r1, [r3, #24]
 8009bae:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009bb2:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8009bb6:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8009bba:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009bbc:	6a19      	ldr	r1, [r3, #32]
 8009bbe:	f041 0110 	orr.w	r1, r1, #16
 8009bc2:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009bc4:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009bc6:	69d9      	ldr	r1, [r3, #28]
 8009bc8:	400c      	ands	r4, r1
 8009bca:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8009bce:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009bd0:	6a19      	ldr	r1, [r3, #32]
 8009bd2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009bd6:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8009bd8:	492f      	ldr	r1, [pc, #188]	; (8009c98 <R3_2_RLDetectionModeDisable+0x124>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009bda:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009bdc:	4a2f      	ldr	r2, [pc, #188]	; (8009c9c <R3_2_RLDetectionModeDisable+0x128>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8009bde:	6001      	str	r1, [r0, #0]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8009be0:	492f      	ldr	r1, [pc, #188]	; (8009ca0 <R3_2_RLDetectionModeDisable+0x12c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8009be2:	4c30      	ldr	r4, [pc, #192]	; (8009ca4 <R3_2_RLDetectionModeDisable+0x130>)
 8009be4:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 8009be6:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8009be8:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8009bec:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8009bf0:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 8009bf4:	4770      	bx	lr
 8009bf6:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8009bf8:	6a19      	ldr	r1, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 8009bfa:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 8009bfe:	f041 0104 	orr.w	r1, r1, #4
 8009c02:	0852      	lsrs	r2, r2, #1
 8009c04:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009c06:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009c08:	6999      	ldr	r1, [r3, #24]
 8009c0a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009c0e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8009c12:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8009c16:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009c18:	6a19      	ldr	r1, [r3, #32]
 8009c1a:	f041 0110 	orr.w	r1, r1, #16
 8009c1e:	6219      	str	r1, [r3, #32]
 8009c20:	6a19      	ldr	r1, [r3, #32]
 8009c22:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8009c26:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009c28:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009c2a:	69d9      	ldr	r1, [r3, #28]
 8009c2c:	400c      	ands	r4, r1
 8009c2e:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8009c32:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009c34:	6a19      	ldr	r1, [r3, #32]
 8009c36:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009c3a:	6219      	str	r1, [r3, #32]
 8009c3c:	6a19      	ldr	r1, [r3, #32]
 8009c3e:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8009c42:	6219      	str	r1, [r3, #32]
}
 8009c44:	e7c8      	b.n	8009bd8 <R3_2_RLDetectionModeDisable+0x64>
  CLEAR_BIT(TIMx->CCER, Channels);
 8009c46:	6a19      	ldr	r1, [r3, #32]
 8009c48:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 8009c4c:	f021 0104 	bic.w	r1, r1, #4
 8009c50:	0852      	lsrs	r2, r2, #1
 8009c52:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009c54:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009c56:	6999      	ldr	r1, [r3, #24]
 8009c58:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8009c5c:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8009c60:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8009c64:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8009c66:	6a19      	ldr	r1, [r3, #32]
 8009c68:	f041 0110 	orr.w	r1, r1, #16
 8009c6c:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009c6e:	6a19      	ldr	r1, [r3, #32]
 8009c70:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8009c74:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009c76:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009c78:	69d9      	ldr	r1, [r3, #28]
 8009c7a:	400c      	ands	r4, r1
 8009c7c:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8009c80:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8009c82:	6a19      	ldr	r1, [r3, #32]
 8009c84:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009c88:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8009c8a:	6a19      	ldr	r1, [r3, #32]
 8009c8c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8009c90:	6219      	str	r1, [r3, #32]
}
 8009c92:	e7a1      	b.n	8009bd8 <R3_2_RLDetectionModeDisable+0x64>
 8009c94:	fffeff8c 	.word	0xfffeff8c
 8009c98:	08008efd 	.word	0x08008efd
 8009c9c:	0800924d 	.word	0x0800924d
 8009ca0:	080091b5 	.word	0x080091b5
 8009ca4:	08009165 	.word	0x08009165

08009ca8 <R3_2_RLDetectionModeSetDuty>:
  if (MC_NULL == pHdl)
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	d03d      	beq.n	8009d28 <R3_2_RLDetectionModeSetDuty+0x80>
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009cac:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8009cb0:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
{
 8009cb4:	b410      	push	{r4}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009cb6:	689c      	ldr	r4, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8009cb8:	69e3      	ldr	r3, [r4, #28]
 8009cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8009cbe:	fb02 f101 	mul.w	r1, r2, r1
 8009cc2:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 8009cc6:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 8009cc8:	f04f 0c01 	mov.w	ip, #1
 8009ccc:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
    pHandle->_Super.CntPhA = (uint16_t)val;
 8009cd0:	87c1      	strh	r1, [r0, #62]	; 0x3e
    pHandle->ADCRegularLocked = true;
 8009cd2:	f880 c08c 	strb.w	ip, [r0, #140]	; 0x8c
 8009cd6:	61e3      	str	r3, [r4, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 8009cd8:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 8009cdc:	1ad2      	subs	r2, r2, r3
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 8009cde:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009ce2:	6422      	str	r2, [r4, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009ce4:	63e3      	str	r3, [r4, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009ce6:	6361      	str	r1, [r4, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009ce8:	6863      	ldr	r3, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8009cea:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
 8009cee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cf6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    pHdl->Sector = SECTOR_4;
 8009cfa:	2103      	movs	r1, #3
 8009cfc:	6063      	str	r3, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8009cfe:	4562      	cmp	r2, ip
    pHdl->Sector = SECTOR_4;
 8009d00:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009d04:	6863      	ldr	r3, [r4, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8009d06:	d008      	beq.n	8009d1a <R3_2_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009d08:	4a08      	ldr	r2, [pc, #32]	; (8009d2c <R3_2_RLDetectionModeSetDuty+0x84>)
}
 8009d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009d0e:	4213      	tst	r3, r2
      hAux = MC_DURATION;
 8009d10:	bf14      	ite	ne
 8009d12:	4662      	movne	r2, ip
 8009d14:	2200      	moveq	r2, #0
}
 8009d16:	4610      	mov	r0, r2
 8009d18:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
}
 8009d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d24:	4610      	mov	r0, r2
 8009d26:	4770      	bx	lr
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	02000070 	.word	0x02000070

08009d30 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8009d30:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8009d34:	8c02      	ldrh	r2, [r0, #32]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8009d36:	8b03      	ldrh	r3, [r0, #24]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8009d38:	4494      	add	ip, r2
{
 8009d3a:	b410      	push	{r4}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8009d3c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8009d40:	b14b      	cbz	r3, 8009d56 <RVBS_Clear+0x26>
    {
      pHandle->aBuffer[index] = aux;
 8009d42:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009d44:	2300      	movs	r3, #0
 8009d46:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8009d48:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 8009d4a:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8009d4e:	8b01      	ldrh	r1, [r0, #24]
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	4291      	cmp	r1, r2
 8009d54:	d8f7      	bhi.n	8009d46 <RVBS_Clear+0x16>
    }
    pHandle->_Super.LatestConv = aux;
 8009d56:	2300      	movs	r3, #0
 8009d58:	f36c 030f 	bfi	r3, ip, #0, #16
 8009d5c:	f36c 431f 	bfi	r3, ip, #16, #16
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8009d60:	2200      	movs	r2, #0
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 8009d62:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.LatestConv = aux;
 8009d66:	6043      	str	r3, [r0, #4]
    pHandle->index = 0U;
 8009d68:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
}
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop

08009d70 <RVBS_Init>:
{
 8009d70:	b510      	push	{r4, lr}
 8009d72:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8009d74:	300c      	adds	r0, #12
 8009d76:	f7f9 fcfb 	bl	8003770 <RCM_RegisterRegConv>
 8009d7a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    RVBS_Clear(pHandle);
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f7ff ffd6 	bl	8009d30 <RVBS_Clear>
}
 8009d84:	bd10      	pop	{r4, pc}
 8009d86:	bf00      	nop

08009d88 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8009d88:	8b42      	ldrh	r2, [r0, #26]
 8009d8a:	8b81      	ldrh	r1, [r0, #28]
 8009d8c:	428a      	cmp	r2, r1
 8009d8e:	d00e      	beq.n	8009dae <RVBS_CheckFaultState+0x26>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8009d90:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8009d94:	8c03      	ldrh	r3, [r0, #32]
 8009d96:	4563      	cmp	r3, ip
 8009d98:	d807      	bhi.n	8009daa <RVBS_CheckFaultState+0x22>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8009d9a:	7f83      	ldrb	r3, [r0, #30]
 8009d9c:	b983      	cbnz	r3, 8009dc0 <RVBS_CheckFaultState+0x38>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8009d9e:	4561      	cmp	r1, ip
 8009da0:	d912      	bls.n	8009dc8 <RVBS_CheckFaultState+0x40>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8009da2:	2201      	movs	r2, #1
 8009da4:	7782      	strb	r2, [r0, #30]
          fault = MC_NO_ERROR;
 8009da6:	4618      	mov	r0, r3
 8009da8:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 8009daa:	2004      	movs	r0, #4
 8009dac:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8009dae:	88c3      	ldrh	r3, [r0, #6]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d309      	bcc.n	8009dc8 <RVBS_CheckFaultState+0x40>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8009db4:	8c00      	ldrh	r0, [r0, #32]
        fault = MC_UNDER_VOLT;
 8009db6:	4298      	cmp	r0, r3
 8009db8:	bf8c      	ite	hi
 8009dba:	2004      	movhi	r0, #4
 8009dbc:	2000      	movls	r0, #0
 8009dbe:	4770      	bx	lr
          fault = MC_OVER_VOLT;
        }
      }
      else
      {
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8009dc0:	4562      	cmp	r2, ip
 8009dc2:	d303      	bcc.n	8009dcc <RVBS_CheckFaultState+0x44>
        fault = MC_NO_ERROR;
 8009dc4:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8009dc6:	4770      	bx	lr
        fault = MC_OVER_VOLT;
 8009dc8:	2002      	movs	r0, #2
 8009dca:	4770      	bx	lr
          pHandle->OverVoltageHysteresisUpDir = false;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	7783      	strb	r3, [r0, #30]
          fault = MC_OVER_VOLT;
 8009dd0:	2002      	movs	r0, #2
 8009dd2:	4770      	bx	lr

08009dd4 <RVBS_CalcAvVbus>:
{
 8009dd4:	b538      	push	{r3, r4, r5, lr}
 8009dd6:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8009dd8:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8009ddc:	f7f9 fdb0 	bl	8003940 <RCM_ExecRegularConv>
    if (0xFFFFU == hAux)
 8009de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009de4:	4298      	cmp	r0, r3
 8009de6:	d024      	beq.n	8009e32 <RVBS_CalcAvVbus+0x5e>
      pHandle->aBuffer[pHandle->index] = hAux;
 8009de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dea:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
 8009dee:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009df2:	f8b4 e018 	ldrh.w	lr, [r4, #24]
 8009df6:	f01e 02ff 	ands.w	r2, lr, #255	; 0xff
 8009dfa:	d00d      	beq.n	8009e18 <RVBS_CalcAvVbus+0x44>
 8009dfc:	3a01      	subs	r2, #1
 8009dfe:	b2d2      	uxtb	r2, r2
 8009e00:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 8009e04:	3b02      	subs	r3, #2
      wtemp = 0u;
 8009e06:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 8009e08:	f833 1f02 	ldrh.w	r1, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009e0c:	459c      	cmp	ip, r3
        wtemp += pHandle->aBuffer[i];
 8009e0e:	440a      	add	r2, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8009e10:	d1fa      	bne.n	8009e08 <RVBS_CalcAvVbus+0x34>
      wtemp /= pHandle->LowPassFilterBW;
 8009e12:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8009e16:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8009e18:	f10e 3eff 	add.w	lr, lr, #4294967295
 8009e1c:	4575      	cmp	r5, lr
        pHandle->index++;
 8009e1e:	bf34      	ite	cc
 8009e20:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 8009e22:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8009e24:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8009e26:	80a0      	strh	r0, [r4, #4]
        pHandle->index++;
 8009e28:	bf34      	ite	cc
 8009e2a:	f884 5029 	strbcc.w	r5, [r4, #41]	; 0x29
        pHandle->index = 0U;
 8009e2e:	f884 3029 	strbcs.w	r3, [r4, #41]	; 0x29
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8009e32:	4620      	mov	r0, r4
 8009e34:	f7ff ffa8 	bl	8009d88 <RVBS_CheckFaultState>
 8009e38:	8120      	strh	r0, [r4, #8]
}
 8009e3a:	bd38      	pop	{r3, r4, r5, pc}

08009e3c <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8009e3c:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8009e3e:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8009e40:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8009e44:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8009e48:	6142      	str	r2, [r0, #20]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 8009e4a:	4770      	bx	lr

08009e4c <SPD_GetElAngle>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8009e4c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop

08009e54 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8009e54:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop

08009e5c <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8009e5c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop

08009e64 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8009e64:	f9b1 3000 	ldrsh.w	r3, [r1]
    else
    {
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
    }

    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8009e68:	8a81      	ldrh	r1, [r0, #20]
{
 8009e6a:	b500      	push	{lr}
    if (*pMecSpeedUnit < 0)
 8009e6c:	2b00      	cmp	r3, #0
      hAux = -(*pMecSpeedUnit);
 8009e6e:	bfb8      	it	lt
 8009e70:	425b      	neglt	r3, r3
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8009e72:	f8b0 e016 	ldrh.w	lr, [r0, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8009e76:	f890 c003 	ldrb.w	ip, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8009e7a:	7802      	ldrb	r2, [r0, #0]
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 8009e7c:	b29b      	uxth	r3, r3
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8009e7e:	459e      	cmp	lr, r3
 8009e80:	d819      	bhi.n	8009eb6 <SPD_IsMecSpeedReliable+0x52>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8009e82:	4299      	cmp	r1, r3
 8009e84:	bf2c      	ite	cs
 8009e86:	2300      	movcs	r3, #0
 8009e88:	2301      	movcc	r3, #1
    {
      SpeedError = true;
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8009e8a:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8009e8e:	f8b0 e018 	ldrh.w	lr, [r0, #24]
    if (pHandle->hMecAccelUnitP < 0)
 8009e92:	2900      	cmp	r1, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8009e94:	bfb8      	it	lt
 8009e96:	4249      	neglt	r1, r1
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 8009e98:	b289      	uxth	r1, r1
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8009e9a:	458e      	cmp	lr, r1
 8009e9c:	d300      	bcc.n	8009ea0 <SPD_IsMecSpeedReliable+0x3c>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 8009e9e:	b163      	cbz	r3, 8009eba <SPD_IsMecSpeedReliable+0x56>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8009ea0:	4594      	cmp	ip, r2
 8009ea2:	d901      	bls.n	8009ea8 <SPD_IsMecSpeedReliable+0x44>
      {
        bSpeedErrorNumber++;
 8009ea4:	3201      	adds	r2, #1
 8009ea6:	b2d2      	uxtb	r2, r2
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8009ea8:	7002      	strb	r2, [r0, #0]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8009eaa:	ebb2 000c 	subs.w	r0, r2, ip
 8009eae:	bf18      	it	ne
 8009eb0:	2001      	movne	r0, #1
 8009eb2:	f85d fb04 	ldr.w	pc, [sp], #4
      SpeedError = true;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e7e7      	b.n	8009e8a <SPD_IsMecSpeedReliable+0x26>
        bSpeedErrorNumber = 0u;
 8009eba:	4594      	cmp	ip, r2
 8009ebc:	bf88      	it	hi
 8009ebe:	2200      	movhi	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8009ec0:	7002      	strb	r2, [r0, #0]
}
 8009ec2:	ebb2 000c 	subs.w	r0, r2, ip
 8009ec6:	bf18      	it	ne
 8009ec8:	2001      	movne	r0, #1
 8009eca:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ece:	bf00      	nop

08009ed0 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 8009ed0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8009ed4:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wAux *= INT16_MAX;
 8009ed8:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8009edc:	fb93 f0f0 	sdiv	r0, r3, r0
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 8009ee0:	b200      	sxth	r0, r0
 8009ee2:	4770      	bx	lr

08009ee4 <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8009ee4:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
    pHandle->PISpeed = pPI;
 8009ee8:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8009eea:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
    pHandle->SPD = SPD_Handle;
 8009eee:	6142      	str	r2, [r0, #20]
{
 8009ef0:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 8009ef2:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 8009ef6:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 8009ef8:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8009efa:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8009efe:	0409      	lsls	r1, r1, #16
 8009f00:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 8009f04:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009f06:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 8009f0a:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8009f0c:	6183      	str	r3, [r0, #24]
}
 8009f0e:	4770      	bx	lr

08009f10 <STC_GetSpeedSensor>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 8009f10:	6940      	ldr	r0, [r0, #20]
 8009f12:	4770      	bx	lr

08009f14 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8009f14:	7803      	ldrb	r3, [r0, #0]
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	d000      	beq.n	8009f1c <STC_Clear+0x8>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009f1a:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8009f1c:	6900      	ldr	r0, [r0, #16]
 8009f1e:	2100      	movs	r1, #0
 8009f20:	f7fe be94 	b.w	8008c4c <PID_SetIntegralTerm>

08009f24 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8009f24:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop

08009f2c <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8009f2c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop

08009f34 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8009f34:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8009f36:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8009f38:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009f3a:	4770      	bx	lr

08009f3c <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8009f3c:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8009f3e:	7803      	ldrb	r3, [r0, #0]
 8009f40:	2b04      	cmp	r3, #4
{
 8009f42:	4604      	mov	r4, r0
 8009f44:	460e      	mov	r6, r1
 8009f46:	4615      	mov	r5, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8009f48:	d01e      	beq.n	8009f88 <STC_ExecRamp+0x4c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8009f4a:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8009f4c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8009f50:	4299      	cmp	r1, r3
 8009f52:	dd01      	ble.n	8009f58 <STC_ExecRamp+0x1c>
        allowedRange = false;
 8009f54:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8009f56:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8009f58:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8009f5c:	428b      	cmp	r3, r1
 8009f5e:	dcf9      	bgt.n	8009f54 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8009f60:	8c23      	ldrh	r3, [r4, #32]
 8009f62:	4299      	cmp	r1, r3
 8009f64:	da03      	bge.n	8009f6e <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8009f66:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8009f6a:	428b      	cmp	r3, r1
 8009f6c:	dbf2      	blt.n	8009f54 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 8009f6e:	b9ad      	cbnz	r5, 8009f9c <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8009f70:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8009f72:	0436      	lsls	r6, r6, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8009f74:	2b03      	cmp	r3, #3
        pHandle->RampRemainingStep = 0U;
 8009f76:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8009f7a:	bf0c      	ite	eq
 8009f7c:	6066      	streq	r6, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8009f7e:	60a6      	strne	r6, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8009f80:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 8009f82:	61a3      	str	r3, [r4, #24]
 8009f84:	2001      	movs	r0, #1
}
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8009f88:	f7ff ffd0 	bl	8009f2c <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8009f8c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8009f8e:	429e      	cmp	r6, r3
 8009f90:	dce0      	bgt.n	8009f54 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8009f92:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8009f96:	42b3      	cmp	r3, r6
 8009f98:	dcdc      	bgt.n	8009f54 <STC_ExecRamp+0x18>
 8009f9a:	e7e8      	b.n	8009f6e <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8009f9c:	8ba3      	ldrh	r3, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 8009f9e:	8066      	strh	r6, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8009fa0:	fb05 f303 	mul.w	r3, r5, r3
        wAux /= 1000U;
 8009fa4:	4d06      	ldr	r5, [pc, #24]	; (8009fc0 <STC_ExecRamp+0x84>)
 8009fa6:	fba5 2303 	umull	r2, r3, r5, r3
 8009faa:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8009fac:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8009fae:	1a30      	subs	r0, r6, r0
 8009fb0:	0400      	lsls	r0, r0, #16
        pHandle->RampRemainingStep++;
 8009fb2:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8009fb4:	fb90 f0f3 	sdiv	r0, r0, r3
        pHandle->IncDecAmount = wAux1;
 8009fb8:	61a0      	str	r0, [r4, #24]
 8009fba:	2001      	movs	r0, #1
}
 8009fbc:	bd70      	pop	{r4, r5, r6, pc}
 8009fbe:	bf00      	nop
 8009fc0:	10624dd3 	.word	0x10624dd3

08009fc4 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8009fc8:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8009fca:	4770      	bx	lr

08009fcc <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8009fcc:	b538      	push	{r3, r4, r5, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 8009fce:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8009fd2:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8009fd4:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->TorqueRef;
 8009fd6:	2a04      	cmp	r2, #4
 8009fd8:	bf08      	it	eq
 8009fda:	460d      	moveq	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 8009fdc:	2b01      	cmp	r3, #1
{
 8009fde:	4604      	mov	r4, r0
    if (pHandle->RampRemainingStep > 1U)
 8009fe0:	d908      	bls.n	8009ff4 <STC_CalcTorqueReference+0x28>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 8009fe2:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8009fe4:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8009fe6:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 8009fe8:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8009fea:	2a03      	cmp	r2, #3
 8009fec:	d00b      	beq.n	800a006 <STC_CalcTorqueReference+0x3a>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
    }
    else
    {
      pHandle->TorqueRef = wCurrentReference;
 8009fee:	60a5      	str	r5, [r4, #8]
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8009ff0:	1428      	asrs	r0, r5, #16
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8009ff2:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8009ff4:	d1f9      	bne.n	8009fea <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009ff6:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8009ffa:	2300      	movs	r3, #0
    if (MCM_SPEED_MODE == pHandle->Mode)
 8009ffc:	2a03      	cmp	r2, #3
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8009ffe:	ea4f 4505 	mov.w	r5, r5, lsl #16
      pHandle->RampRemainingStep = 0U;
 800a002:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800a004:	d1f3      	bne.n	8009fee <STC_CalcTorqueReference+0x22>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800a006:	6960      	ldr	r0, [r4, #20]
 800a008:	f7ff ff24 	bl	8009e54 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 800a00c:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 800a010:	b209      	sxth	r1, r1
 800a012:	6920      	ldr	r0, [r4, #16]
 800a014:	f7fe fe4c 	bl	8008cb0 <PI_Controller>
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800a018:	0403      	lsls	r3, r0, #16
 800a01a:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 800a01e:	bd38      	pop	{r3, r4, r5, pc}

0800a020 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 800a020:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop

0800a028 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 800a028:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 800a02c:	2200      	movs	r2, #0
 800a02e:	b299      	uxth	r1, r3
 800a030:	f361 020f 	bfi	r2, r1, #0, #16
 800a034:	0c1b      	lsrs	r3, r3, #16
 800a036:	f363 421f 	bfi	r2, r3, #16, #16
{
 800a03a:	b082      	sub	sp, #8
}
 800a03c:	4610      	mov	r0, r2
 800a03e:	b002      	add	sp, #8
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop

0800a044 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 800a044:	b510      	push	{r4, lr}
 800a046:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800a048:	6940      	ldr	r0, [r0, #20]
 800a04a:	f7ff ff03 	bl	8009e54 <SPD_GetAvrgMecSpeedUnit>
 800a04e:	0400      	lsls	r0, r0, #16
 800a050:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 800a052:	bd10      	pop	{r4, pc}

0800a054 <__libc_init_array>:
 800a054:	b570      	push	{r4, r5, r6, lr}
 800a056:	4d0d      	ldr	r5, [pc, #52]	; (800a08c <__libc_init_array+0x38>)
 800a058:	4c0d      	ldr	r4, [pc, #52]	; (800a090 <__libc_init_array+0x3c>)
 800a05a:	1b64      	subs	r4, r4, r5
 800a05c:	10a4      	asrs	r4, r4, #2
 800a05e:	2600      	movs	r6, #0
 800a060:	42a6      	cmp	r6, r4
 800a062:	d109      	bne.n	800a078 <__libc_init_array+0x24>
 800a064:	4d0b      	ldr	r5, [pc, #44]	; (800a094 <__libc_init_array+0x40>)
 800a066:	4c0c      	ldr	r4, [pc, #48]	; (800a098 <__libc_init_array+0x44>)
 800a068:	f000 f82e 	bl	800a0c8 <_init>
 800a06c:	1b64      	subs	r4, r4, r5
 800a06e:	10a4      	asrs	r4, r4, #2
 800a070:	2600      	movs	r6, #0
 800a072:	42a6      	cmp	r6, r4
 800a074:	d105      	bne.n	800a082 <__libc_init_array+0x2e>
 800a076:	bd70      	pop	{r4, r5, r6, pc}
 800a078:	f855 3b04 	ldr.w	r3, [r5], #4
 800a07c:	4798      	blx	r3
 800a07e:	3601      	adds	r6, #1
 800a080:	e7ee      	b.n	800a060 <__libc_init_array+0xc>
 800a082:	f855 3b04 	ldr.w	r3, [r5], #4
 800a086:	4798      	blx	r3
 800a088:	3601      	adds	r6, #1
 800a08a:	e7f2      	b.n	800a072 <__libc_init_array+0x1e>
 800a08c:	0800a514 	.word	0x0800a514
 800a090:	0800a514 	.word	0x0800a514
 800a094:	0800a514 	.word	0x0800a514
 800a098:	0800a518 	.word	0x0800a518

0800a09c <memcpy>:
 800a09c:	440a      	add	r2, r1
 800a09e:	4291      	cmp	r1, r2
 800a0a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0a4:	d100      	bne.n	800a0a8 <memcpy+0xc>
 800a0a6:	4770      	bx	lr
 800a0a8:	b510      	push	{r4, lr}
 800a0aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0b2:	4291      	cmp	r1, r2
 800a0b4:	d1f9      	bne.n	800a0aa <memcpy+0xe>
 800a0b6:	bd10      	pop	{r4, pc}

0800a0b8 <memset>:
 800a0b8:	4402      	add	r2, r0
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d100      	bne.n	800a0c2 <memset+0xa>
 800a0c0:	4770      	bx	lr
 800a0c2:	f803 1b01 	strb.w	r1, [r3], #1
 800a0c6:	e7f9      	b.n	800a0bc <memset+0x4>

0800a0c8 <_init>:
 800a0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ca:	bf00      	nop
 800a0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ce:	bc08      	pop	{r3}
 800a0d0:	469e      	mov	lr, r3
 800a0d2:	4770      	bx	lr

0800a0d4 <_fini>:
 800a0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d6:	bf00      	nop
 800a0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0da:	bc08      	pop	{r3}
 800a0dc:	469e      	mov	lr, r3
 800a0de:	4770      	bx	lr
